
Robit_xMega.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000034a4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000009a  00802000  000034a4  00003538  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000002df  0080209c  0080209c  000035d4  2**2
                  ALLOC
  3 .comment      00000030  00000000  00000000  000035d2  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000970  00000000  00000000  00003608  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000122d1  00000000  00000000  00003f78  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00002d80  00000000  00000000  00016249  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000b8b8  00000000  00000000  00018fc9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000022f0  00000000  00000000  00024884  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00033803  00000000  00000000  00026b74  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00009a91  00000000  00000000  0005a377  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000858  00000000  00000000  00063e08  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0000cb2d  00000000  00000000  00064660  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0d c1       	rjmp	.+538    	; 0x21c <__ctors_end>
       2:	00 00       	nop
       4:	2c c1       	rjmp	.+600    	; 0x25e <__bad_interrupt>
       6:	00 00       	nop
       8:	2a c1       	rjmp	.+596    	; 0x25e <__bad_interrupt>
       a:	00 00       	nop
       c:	28 c1       	rjmp	.+592    	; 0x25e <__bad_interrupt>
       e:	00 00       	nop
      10:	26 c1       	rjmp	.+588    	; 0x25e <__bad_interrupt>
      12:	00 00       	nop
      14:	24 c1       	rjmp	.+584    	; 0x25e <__bad_interrupt>
      16:	00 00       	nop
      18:	22 c1       	rjmp	.+580    	; 0x25e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	20 c1       	rjmp	.+576    	; 0x25e <__bad_interrupt>
      1e:	00 00       	nop
      20:	1e c1       	rjmp	.+572    	; 0x25e <__bad_interrupt>
      22:	00 00       	nop
      24:	1c c1       	rjmp	.+568    	; 0x25e <__bad_interrupt>
      26:	00 00       	nop
      28:	1a c1       	rjmp	.+564    	; 0x25e <__bad_interrupt>
      2a:	00 00       	nop
      2c:	18 c1       	rjmp	.+560    	; 0x25e <__bad_interrupt>
      2e:	00 00       	nop
      30:	16 c1       	rjmp	.+556    	; 0x25e <__bad_interrupt>
      32:	00 00       	nop
      34:	14 c1       	rjmp	.+552    	; 0x25e <__bad_interrupt>
      36:	00 00       	nop
      38:	93 c7       	rjmp	.+3878   	; 0xf60 <__vector_14>
      3a:	00 00       	nop
      3c:	be c7       	rjmp	.+3964   	; 0xfba <__vector_15>
      3e:	00 00       	nop
      40:	e9 c7       	rjmp	.+4050   	; 0x1014 <__vector_16>
      42:	00 00       	nop
      44:	0c 94 37 08 	jmp	0x106e	; 0x106e <__vector_17>
      48:	0c 94 64 08 	jmp	0x10c8	; 0x10c8 <__vector_18>
      4c:	0c 94 91 08 	jmp	0x1122	; 0x1122 <__vector_19>
      50:	0c 94 be 08 	jmp	0x117c	; 0x117c <__vector_20>
      54:	0c 94 eb 08 	jmp	0x11d6	; 0x11d6 <__vector_21>
      58:	0c 94 18 09 	jmp	0x1230	; 0x1230 <__vector_22>
      5c:	0c 94 45 09 	jmp	0x128a	; 0x128a <__vector_23>
      60:	fe c0       	rjmp	.+508    	; 0x25e <__bad_interrupt>
      62:	00 00       	nop
      64:	fc c0       	rjmp	.+504    	; 0x25e <__bad_interrupt>
      66:	00 00       	nop
      68:	fa c0       	rjmp	.+500    	; 0x25e <__bad_interrupt>
      6a:	00 00       	nop
      6c:	f8 c0       	rjmp	.+496    	; 0x25e <__bad_interrupt>
      6e:	00 00       	nop
      70:	f6 c0       	rjmp	.+492    	; 0x25e <__bad_interrupt>
      72:	00 00       	nop
      74:	f4 c0       	rjmp	.+488    	; 0x25e <__bad_interrupt>
      76:	00 00       	nop
      78:	f2 c0       	rjmp	.+484    	; 0x25e <__bad_interrupt>
      7a:	00 00       	nop
      7c:	f0 c0       	rjmp	.+480    	; 0x25e <__bad_interrupt>
      7e:	00 00       	nop
      80:	ee c0       	rjmp	.+476    	; 0x25e <__bad_interrupt>
      82:	00 00       	nop
      84:	ec c0       	rjmp	.+472    	; 0x25e <__bad_interrupt>
      86:	00 00       	nop
      88:	ea c0       	rjmp	.+468    	; 0x25e <__bad_interrupt>
      8a:	00 00       	nop
      8c:	e8 c0       	rjmp	.+464    	; 0x25e <__bad_interrupt>
      8e:	00 00       	nop
      90:	e6 c0       	rjmp	.+460    	; 0x25e <__bad_interrupt>
      92:	00 00       	nop
      94:	e4 c0       	rjmp	.+456    	; 0x25e <__bad_interrupt>
      96:	00 00       	nop
      98:	e2 c0       	rjmp	.+452    	; 0x25e <__bad_interrupt>
      9a:	00 00       	nop
      9c:	e0 c0       	rjmp	.+448    	; 0x25e <__bad_interrupt>
      9e:	00 00       	nop
      a0:	de c0       	rjmp	.+444    	; 0x25e <__bad_interrupt>
      a2:	00 00       	nop
      a4:	dc c0       	rjmp	.+440    	; 0x25e <__bad_interrupt>
      a6:	00 00       	nop
      a8:	da c0       	rjmp	.+436    	; 0x25e <__bad_interrupt>
      aa:	00 00       	nop
      ac:	d8 c0       	rjmp	.+432    	; 0x25e <__bad_interrupt>
      ae:	00 00       	nop
      b0:	d6 c0       	rjmp	.+428    	; 0x25e <__bad_interrupt>
      b2:	00 00       	nop
      b4:	d4 c0       	rjmp	.+424    	; 0x25e <__bad_interrupt>
      b6:	00 00       	nop
      b8:	d2 c0       	rjmp	.+420    	; 0x25e <__bad_interrupt>
      ba:	00 00       	nop
      bc:	0c 94 34 0b 	jmp	0x1668	; 0x1668 <__vector_47>
      c0:	0c 94 61 0b 	jmp	0x16c2	; 0x16c2 <__vector_48>
      c4:	0c 94 8e 0b 	jmp	0x171c	; 0x171c <__vector_49>
      c8:	0c 94 bb 0b 	jmp	0x1776	; 0x1776 <__vector_50>
      cc:	0c 94 e8 0b 	jmp	0x17d0	; 0x17d0 <__vector_51>
      d0:	0c 94 15 0c 	jmp	0x182a	; 0x182a <__vector_52>
      d4:	0c 94 42 0c 	jmp	0x1884	; 0x1884 <__vector_53>
      d8:	0c 94 6f 0c 	jmp	0x18de	; 0x18de <__vector_54>
      dc:	0c 94 9c 0c 	jmp	0x1938	; 0x1938 <__vector_55>
      e0:	0c 94 c9 0c 	jmp	0x1992	; 0x1992 <__vector_56>
      e4:	bc c0       	rjmp	.+376    	; 0x25e <__bad_interrupt>
      e6:	00 00       	nop
      e8:	ba c0       	rjmp	.+372    	; 0x25e <__bad_interrupt>
      ea:	00 00       	nop
      ec:	b8 c0       	rjmp	.+368    	; 0x25e <__bad_interrupt>
      ee:	00 00       	nop
      f0:	b6 c0       	rjmp	.+364    	; 0x25e <__bad_interrupt>
      f2:	00 00       	nop
      f4:	b4 c0       	rjmp	.+360    	; 0x25e <__bad_interrupt>
      f6:	00 00       	nop
      f8:	b2 c0       	rjmp	.+356    	; 0x25e <__bad_interrupt>
      fa:	00 00       	nop
      fc:	b0 c0       	rjmp	.+352    	; 0x25e <__bad_interrupt>
      fe:	00 00       	nop
     100:	ae c0       	rjmp	.+348    	; 0x25e <__bad_interrupt>
     102:	00 00       	nop
     104:	ac c0       	rjmp	.+344    	; 0x25e <__bad_interrupt>
     106:	00 00       	nop
     108:	aa c0       	rjmp	.+340    	; 0x25e <__bad_interrupt>
     10a:	00 00       	nop
     10c:	a8 c0       	rjmp	.+336    	; 0x25e <__bad_interrupt>
     10e:	00 00       	nop
     110:	a6 c0       	rjmp	.+332    	; 0x25e <__bad_interrupt>
     112:	00 00       	nop
     114:	a4 c0       	rjmp	.+328    	; 0x25e <__bad_interrupt>
     116:	00 00       	nop
     118:	a2 c0       	rjmp	.+324    	; 0x25e <__bad_interrupt>
     11a:	00 00       	nop
     11c:	a0 c0       	rjmp	.+320    	; 0x25e <__bad_interrupt>
     11e:	00 00       	nop
     120:	9e c0       	rjmp	.+316    	; 0x25e <__bad_interrupt>
     122:	00 00       	nop
     124:	9c c0       	rjmp	.+312    	; 0x25e <__bad_interrupt>
     126:	00 00       	nop
     128:	9a c0       	rjmp	.+308    	; 0x25e <__bad_interrupt>
     12a:	00 00       	nop
     12c:	98 c0       	rjmp	.+304    	; 0x25e <__bad_interrupt>
     12e:	00 00       	nop
     130:	96 c0       	rjmp	.+300    	; 0x25e <__bad_interrupt>
     132:	00 00       	nop
     134:	0c 94 72 09 	jmp	0x12e4	; 0x12e4 <__vector_77>
     138:	0c 94 9f 09 	jmp	0x133e	; 0x133e <__vector_78>
     13c:	0c 94 cc 09 	jmp	0x1398	; 0x1398 <__vector_79>
     140:	0c 94 f9 09 	jmp	0x13f2	; 0x13f2 <__vector_80>
     144:	0c 94 26 0a 	jmp	0x144c	; 0x144c <__vector_81>
     148:	0c 94 53 0a 	jmp	0x14a6	; 0x14a6 <__vector_82>
     14c:	0c 94 80 0a 	jmp	0x1500	; 0x1500 <__vector_83>
     150:	0c 94 ad 0a 	jmp	0x155a	; 0x155a <__vector_84>
     154:	0c 94 da 0a 	jmp	0x15b4	; 0x15b4 <__vector_85>
     158:	0c 94 07 0b 	jmp	0x160e	; 0x160e <__vector_86>
     15c:	80 c0       	rjmp	.+256    	; 0x25e <__bad_interrupt>
     15e:	00 00       	nop
     160:	7e c0       	rjmp	.+252    	; 0x25e <__bad_interrupt>
     162:	00 00       	nop
     164:	7c c0       	rjmp	.+248    	; 0x25e <__bad_interrupt>
     166:	00 00       	nop
     168:	7a c0       	rjmp	.+244    	; 0x25e <__bad_interrupt>
     16a:	00 00       	nop
     16c:	78 c0       	rjmp	.+240    	; 0x25e <__bad_interrupt>
     16e:	00 00       	nop
     170:	76 c0       	rjmp	.+236    	; 0x25e <__bad_interrupt>
     172:	00 00       	nop
     174:	74 c0       	rjmp	.+232    	; 0x25e <__bad_interrupt>
     176:	00 00       	nop
     178:	72 c0       	rjmp	.+228    	; 0x25e <__bad_interrupt>
     17a:	00 00       	nop
     17c:	70 c0       	rjmp	.+224    	; 0x25e <__bad_interrupt>
     17e:	00 00       	nop
     180:	6e c0       	rjmp	.+220    	; 0x25e <__bad_interrupt>
     182:	00 00       	nop
     184:	6c c0       	rjmp	.+216    	; 0x25e <__bad_interrupt>
     186:	00 00       	nop
     188:	6a c0       	rjmp	.+212    	; 0x25e <__bad_interrupt>
     18a:	00 00       	nop
     18c:	68 c0       	rjmp	.+208    	; 0x25e <__bad_interrupt>
     18e:	00 00       	nop
     190:	66 c0       	rjmp	.+204    	; 0x25e <__bad_interrupt>
     192:	00 00       	nop
     194:	64 c0       	rjmp	.+200    	; 0x25e <__bad_interrupt>
     196:	00 00       	nop
     198:	62 c0       	rjmp	.+196    	; 0x25e <__bad_interrupt>
     19a:	00 00       	nop
     19c:	60 c0       	rjmp	.+192    	; 0x25e <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	5e c0       	rjmp	.+188    	; 0x25e <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	5c c0       	rjmp	.+184    	; 0x25e <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	5a c0       	rjmp	.+180    	; 0x25e <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	58 c0       	rjmp	.+176    	; 0x25e <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	0c 94 f6 0c 	jmp	0x19ec	; 0x19ec <__vector_108>
     1b4:	0c 94 23 0d 	jmp	0x1a46	; 0x1a46 <__vector_109>
     1b8:	0c 94 50 0d 	jmp	0x1aa0	; 0x1aa0 <__vector_110>
     1bc:	0c 94 7d 0d 	jmp	0x1afa	; 0x1afa <__vector_111>
     1c0:	0c 94 aa 0d 	jmp	0x1b54	; 0x1b54 <__vector_112>
     1c4:	0c 94 d7 0d 	jmp	0x1bae	; 0x1bae <__vector_113>
     1c8:	4a c0       	rjmp	.+148    	; 0x25e <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	48 c0       	rjmp	.+144    	; 0x25e <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	46 c0       	rjmp	.+140    	; 0x25e <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	44 c0       	rjmp	.+136    	; 0x25e <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	42 c0       	rjmp	.+132    	; 0x25e <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	40 c0       	rjmp	.+128    	; 0x25e <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	3e c0       	rjmp	.+124    	; 0x25e <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	3c c0       	rjmp	.+120    	; 0x25e <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	3a c0       	rjmp	.+116    	; 0x25e <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	38 c0       	rjmp	.+112    	; 0x25e <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	36 c0       	rjmp	.+108    	; 0x25e <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	0c 94 f5 12 	jmp	0x25ea	; 0x25ea <__vector_125>
     1f8:	0c 94 af 13 	jmp	0x275e	; 0x275e <__vector_126>
     1fc:	02 0f       	add	r16, r18
     1fe:	f0 0e       	add	r15, r16
     200:	f3 0e       	add	r15, r19
     202:	f6 0e       	add	r15, r22
     204:	f9 0e       	add	r15, r25
     206:	fc 0e       	add	r15, r28
     208:	ff 0e       	add	r15, r31

0000020a <__trampolines_end>:
     20a:	11 12       	cpse	r1, r17
     20c:	13 14       	cp	r1, r3
     20e:	15 16       	cp	r1, r21

00000210 <child_pipe>:
     210:	0a 0b 0c 0d 0e 0f                                   ......

00000216 <child_pipe_enable>:
     216:	00 01 02 03 04 05                                   ......

0000021c <__ctors_end>:
     21c:	11 24       	eor	r1, r1
     21e:	1f be       	out	0x3f, r1	; 63
     220:	cf ef       	ldi	r28, 0xFF	; 255
     222:	cd bf       	out	0x3d, r28	; 61
     224:	df e5       	ldi	r29, 0x5F	; 95
     226:	de bf       	out	0x3e, r29	; 62
     228:	00 e0       	ldi	r16, 0x00	; 0
     22a:	0c bf       	out	0x3c, r16	; 60

0000022c <__do_copy_data>:
     22c:	10 e2       	ldi	r17, 0x20	; 32
     22e:	a0 e0       	ldi	r26, 0x00	; 0
     230:	b0 e2       	ldi	r27, 0x20	; 32
     232:	e4 ea       	ldi	r30, 0xA4	; 164
     234:	f4 e3       	ldi	r31, 0x34	; 52
     236:	00 e0       	ldi	r16, 0x00	; 0
     238:	0b bf       	out	0x3b, r16	; 59
     23a:	02 c0       	rjmp	.+4      	; 0x240 <__do_copy_data+0x14>
     23c:	07 90       	elpm	r0, Z+
     23e:	0d 92       	st	X+, r0
     240:	aa 39       	cpi	r26, 0x9A	; 154
     242:	b1 07       	cpc	r27, r17
     244:	d9 f7       	brne	.-10     	; 0x23c <__do_copy_data+0x10>

00000246 <__do_clear_bss>:
     246:	23 e2       	ldi	r18, 0x23	; 35
     248:	ac e9       	ldi	r26, 0x9C	; 156
     24a:	b0 e2       	ldi	r27, 0x20	; 32
     24c:	01 c0       	rjmp	.+2      	; 0x250 <.do_clear_bss_start>

0000024e <.do_clear_bss_loop>:
     24e:	1d 92       	st	X+, r1

00000250 <.do_clear_bss_start>:
     250:	ab 37       	cpi	r26, 0x7B	; 123
     252:	b2 07       	cpc	r27, r18
     254:	e1 f7       	brne	.-8      	; 0x24e <.do_clear_bss_loop>
     256:	0e 94 03 19 	call	0x3206	; 0x3206 <main>
     25a:	0c 94 50 1a 	jmp	0x34a0	; 0x34a0 <_exit>

0000025e <__bad_interrupt>:
     25e:	d0 ce       	rjmp	.-608    	; 0x0 <__vectors>

00000260 <udi_cdc_comm_disable>:
}

bool udi_cdc_is_tx_ready(void)
{
	return udi_cdc_multi_is_tx_ready(0);
}
     260:	80 91 b2 21 	lds	r24, 0x21B2
     264:	81 50       	subi	r24, 0x01	; 1
     266:	80 93 b2 21 	sts	0x21B2, r24
     26a:	08 95       	ret

0000026c <udi_cdc_data_setup>:
     26c:	80 e0       	ldi	r24, 0x00	; 0
     26e:	08 95       	ret

00000270 <udi_cdc_getsetting>:
     270:	80 e0       	ldi	r24, 0x00	; 0
     272:	08 95       	ret

00000274 <udi_cdc_comm_setup>:
     274:	80 91 4a 23 	lds	r24, 0x234A
     278:	88 23       	and	r24, r24
     27a:	dc f4       	brge	.+54     	; 0x2b2 <udi_cdc_comm_setup+0x3e>
     27c:	80 76       	andi	r24, 0x60	; 96
     27e:	80 32       	cpi	r24, 0x20	; 32
     280:	e9 f5       	brne	.+122    	; 0x2fc <udi_cdc_comm_setup+0x88>
     282:	80 91 4b 23 	lds	r24, 0x234B
     286:	81 32       	cpi	r24, 0x21	; 33
     288:	d9 f5       	brne	.+118    	; 0x300 <udi_cdc_comm_setup+0x8c>
     28a:	80 91 50 23 	lds	r24, 0x2350
     28e:	90 91 51 23 	lds	r25, 0x2351
     292:	07 97       	sbiw	r24, 0x07	; 7
     294:	b9 f5       	brne	.+110    	; 0x304 <udi_cdc_comm_setup+0x90>
     296:	80 ec       	ldi	r24, 0xC0	; 192
     298:	91 e2       	ldi	r25, 0x21	; 33
     29a:	80 93 52 23 	sts	0x2352, r24
     29e:	90 93 53 23 	sts	0x2353, r25
     2a2:	87 e0       	ldi	r24, 0x07	; 7
     2a4:	90 e0       	ldi	r25, 0x00	; 0
     2a6:	80 93 54 23 	sts	0x2354, r24
     2aa:	90 93 55 23 	sts	0x2355, r25
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	08 95       	ret
     2b2:	80 76       	andi	r24, 0x60	; 96
     2b4:	80 32       	cpi	r24, 0x20	; 32
     2b6:	41 f5       	brne	.+80     	; 0x308 <udi_cdc_comm_setup+0x94>
     2b8:	80 91 4b 23 	lds	r24, 0x234B
     2bc:	80 32       	cpi	r24, 0x20	; 32
     2be:	21 f0       	breq	.+8      	; 0x2c8 <udi_cdc_comm_setup+0x54>
     2c0:	82 32       	cpi	r24, 0x22	; 34
     2c2:	21 f5       	brne	.+72     	; 0x30c <udi_cdc_comm_setup+0x98>
     2c4:	81 e0       	ldi	r24, 0x01	; 1
     2c6:	08 95       	ret
     2c8:	80 91 50 23 	lds	r24, 0x2350
     2cc:	90 91 51 23 	lds	r25, 0x2351
     2d0:	07 97       	sbiw	r24, 0x07	; 7
     2d2:	f1 f4       	brne	.+60     	; 0x310 <udi_cdc_comm_setup+0x9c>
     2d4:	8a e8       	ldi	r24, 0x8A	; 138
     2d6:	91 e0       	ldi	r25, 0x01	; 1
     2d8:	80 93 56 23 	sts	0x2356, r24
     2dc:	90 93 57 23 	sts	0x2357, r25
     2e0:	80 ec       	ldi	r24, 0xC0	; 192
     2e2:	91 e2       	ldi	r25, 0x21	; 33
     2e4:	80 93 52 23 	sts	0x2352, r24
     2e8:	90 93 53 23 	sts	0x2353, r25
     2ec:	87 e0       	ldi	r24, 0x07	; 7
     2ee:	90 e0       	ldi	r25, 0x00	; 0
     2f0:	80 93 54 23 	sts	0x2354, r24
     2f4:	90 93 55 23 	sts	0x2355, r25
     2f8:	81 e0       	ldi	r24, 0x01	; 1
     2fa:	08 95       	ret
     2fc:	80 e0       	ldi	r24, 0x00	; 0
     2fe:	08 95       	ret
     300:	80 e0       	ldi	r24, 0x00	; 0
     302:	08 95       	ret
     304:	80 e0       	ldi	r24, 0x00	; 0
     306:	08 95       	ret
     308:	80 e0       	ldi	r24, 0x00	; 0
     30a:	08 95       	ret
     30c:	80 e0       	ldi	r24, 0x00	; 0
     30e:	08 95       	ret
     310:	80 e0       	ldi	r24, 0x00	; 0
     312:	08 95       	ret

00000314 <udi_cdc_line_coding_received>:
     314:	08 95       	ret

00000316 <udi_cdc_comm_enable>:
     316:	10 92 b2 21 	sts	0x21B2, r1
     31a:	10 92 be 21 	sts	0x21BE, r1
     31e:	10 92 bf 21 	sts	0x21BF, r1
     322:	81 ea       	ldi	r24, 0xA1	; 161
     324:	80 93 b4 21 	sts	0x21B4, r24
     328:	80 e2       	ldi	r24, 0x20	; 32
     32a:	80 93 b5 21 	sts	0x21B5, r24
     32e:	10 92 b6 21 	sts	0x21B6, r1
     332:	10 92 b7 21 	sts	0x21B7, r1
     336:	10 92 b8 21 	sts	0x21B8, r1
     33a:	10 92 b9 21 	sts	0x21B9, r1
     33e:	82 e0       	ldi	r24, 0x02	; 2
     340:	90 e0       	ldi	r25, 0x00	; 0
     342:	80 93 ba 21 	sts	0x21BA, r24
     346:	90 93 bb 21 	sts	0x21BB, r25
     34a:	10 92 bc 21 	sts	0x21BC, r1
     34e:	10 92 bd 21 	sts	0x21BD, r1
     352:	80 e0       	ldi	r24, 0x00	; 0
     354:	92 ec       	ldi	r25, 0xC2	; 194
     356:	a1 e0       	ldi	r26, 0x01	; 1
     358:	b0 e0       	ldi	r27, 0x00	; 0
     35a:	80 93 c0 21 	sts	0x21C0, r24
     35e:	90 93 c1 21 	sts	0x21C1, r25
     362:	a0 93 c2 21 	sts	0x21C2, r26
     366:	b0 93 c3 21 	sts	0x21C3, r27
     36a:	10 92 c4 21 	sts	0x21C4, r1
     36e:	10 92 c5 21 	sts	0x21C5, r1
     372:	88 e0       	ldi	r24, 0x08	; 8
     374:	80 93 c6 21 	sts	0x21C6, r24
     378:	0e 94 d5 18 	call	0x31aa	; 0x31aa <callback_cdc_enable>
     37c:	88 23       	and	r24, r24
     37e:	29 f0       	breq	.+10     	; 0x38a <udi_cdc_comm_enable+0x74>
     380:	90 91 b2 21 	lds	r25, 0x21B2
     384:	9f 5f       	subi	r25, 0xFF	; 255
     386:	90 93 b2 21 	sts	0x21B2, r25
     38a:	08 95       	ret

0000038c <udi_cdc_tx_send>:
     38c:	ff 92       	push	r15
     38e:	0f 93       	push	r16
     390:	1f 93       	push	r17
     392:	cf 93       	push	r28
     394:	df 93       	push	r29
     396:	80 91 9f 20 	lds	r24, 0x209F
     39a:	81 11       	cpse	r24, r1
     39c:	9c c0       	rjmp	.+312    	; 0x4d6 <udi_cdc_tx_send+0x14a>
     39e:	0e 94 38 11 	call	0x2270	; 0x2270 <udd_is_high_speed>
     3a2:	88 23       	and	r24, r24
     3a4:	51 f0       	breq	.+20     	; 0x3ba <udi_cdc_tx_send+0x2e>
     3a6:	c0 91 a0 20 	lds	r28, 0x20A0
     3aa:	d0 91 a1 20 	lds	r29, 0x20A1
     3ae:	0e 94 45 11 	call	0x228a	; 0x228a <udd_get_micro_frame_number>
     3b2:	c8 17       	cp	r28, r24
     3b4:	d9 07       	cpc	r29, r25
     3b6:	59 f4       	brne	.+22     	; 0x3ce <udi_cdc_tx_send+0x42>
     3b8:	8e c0       	rjmp	.+284    	; 0x4d6 <udi_cdc_tx_send+0x14a>
     3ba:	c0 91 a0 20 	lds	r28, 0x20A0
     3be:	d0 91 a1 20 	lds	r29, 0x20A1
     3c2:	0e 94 40 11 	call	0x2280	; 0x2280 <udd_get_frame_number>
     3c6:	c8 17       	cp	r28, r24
     3c8:	d9 07       	cpc	r29, r25
     3ca:	09 f4       	brne	.+2      	; 0x3ce <udi_cdc_tx_send+0x42>
     3cc:	84 c0       	rjmp	.+264    	; 0x4d6 <udi_cdc_tx_send+0x14a>
     3ce:	df b7       	in	r29, 0x3f	; 63
     3d0:	f8 94       	cli
     3d2:	c0 91 a2 20 	lds	r28, 0x20A2
     3d6:	ec 2f       	mov	r30, r28
     3d8:	f0 e0       	ldi	r31, 0x00	; 0
     3da:	ee 0f       	add	r30, r30
     3dc:	ff 1f       	adc	r31, r31
     3de:	ed 55       	subi	r30, 0x5D	; 93
     3e0:	ff 4d       	sbci	r31, 0xDF	; 223
     3e2:	80 81       	ld	r24, Z
     3e4:	91 81       	ldd	r25, Z+1	; 0x01
     3e6:	89 2b       	or	r24, r25
     3e8:	09 f5       	brne	.+66     	; 0x42c <udi_cdc_tx_send+0xa0>
     3ea:	80 91 9c 20 	lds	r24, 0x209C
     3ee:	90 91 9d 20 	lds	r25, 0x209D
     3f2:	01 96       	adiw	r24, 0x01	; 1
     3f4:	80 93 9c 20 	sts	0x209C, r24
     3f8:	90 93 9d 20 	sts	0x209D, r25
     3fc:	0e 94 38 11 	call	0x2270	; 0x2270 <udd_is_high_speed>
     400:	81 11       	cpse	r24, r1
     402:	07 c0       	rjmp	.+14     	; 0x412 <udi_cdc_tx_send+0x86>
     404:	80 91 9c 20 	lds	r24, 0x209C
     408:	90 91 9d 20 	lds	r25, 0x209D
     40c:	84 36       	cpi	r24, 0x64	; 100
     40e:	91 05       	cpc	r25, r1
     410:	58 f0       	brcs	.+22     	; 0x428 <udi_cdc_tx_send+0x9c>
     412:	0e 94 38 11 	call	0x2270	; 0x2270 <udd_is_high_speed>
     416:	88 23       	and	r24, r24
     418:	49 f0       	breq	.+18     	; 0x42c <udi_cdc_tx_send+0xa0>
     41a:	80 91 9c 20 	lds	r24, 0x209C
     41e:	90 91 9d 20 	lds	r25, 0x209D
     422:	80 32       	cpi	r24, 0x20	; 32
     424:	93 40       	sbci	r25, 0x03	; 3
     426:	10 f4       	brcc	.+4      	; 0x42c <udi_cdc_tx_send+0xa0>
     428:	df bf       	out	0x3f, r29	; 63
     42a:	55 c0       	rjmp	.+170    	; 0x4d6 <udi_cdc_tx_send+0x14a>
     42c:	10 92 9c 20 	sts	0x209C, r1
     430:	10 92 9d 20 	sts	0x209D, r1
     434:	80 91 9e 20 	lds	r24, 0x209E
     438:	81 11       	cpse	r24, r1
     43a:	06 c0       	rjmp	.+12     	; 0x448 <udi_cdc_tx_send+0xbc>
     43c:	81 e0       	ldi	r24, 0x01	; 1
     43e:	c1 11       	cpse	r28, r1
     440:	80 e0       	ldi	r24, 0x00	; 0
     442:	80 93 a2 20 	sts	0x20A2, r24
     446:	04 c0       	rjmp	.+8      	; 0x450 <udi_cdc_tx_send+0xc4>
     448:	81 e0       	ldi	r24, 0x01	; 1
     44a:	c1 11       	cpse	r28, r1
     44c:	80 e0       	ldi	r24, 0x00	; 0
     44e:	c8 2f       	mov	r28, r24
     450:	81 e0       	ldi	r24, 0x01	; 1
     452:	80 93 9f 20 	sts	0x209F, r24
     456:	df bf       	out	0x3f, r29	; 63
     458:	d0 e0       	ldi	r29, 0x00	; 0
     45a:	fe 01       	movw	r30, r28
     45c:	ee 0f       	add	r30, r30
     45e:	ff 1f       	adc	r31, r31
     460:	ed 55       	subi	r30, 0x5D	; 93
     462:	ff 4d       	sbci	r31, 0xDF	; 223
     464:	ff 24       	eor	r15, r15
     466:	f3 94       	inc	r15
     468:	80 81       	ld	r24, Z
     46a:	91 81       	ldd	r25, Z+1	; 0x01
     46c:	80 34       	cpi	r24, 0x40	; 64
     46e:	91 05       	cpc	r25, r1
     470:	09 f4       	brne	.+2      	; 0x474 <udi_cdc_tx_send+0xe8>
     472:	f1 2c       	mov	r15, r1
     474:	ff 20       	and	r15, r15
     476:	91 f0       	breq	.+36     	; 0x49c <udi_cdc_tx_send+0x110>
     478:	0e 94 38 11 	call	0x2270	; 0x2270 <udd_is_high_speed>
     47c:	88 23       	and	r24, r24
     47e:	39 f0       	breq	.+14     	; 0x48e <udi_cdc_tx_send+0x102>
     480:	0e 94 45 11 	call	0x228a	; 0x228a <udd_get_micro_frame_number>
     484:	80 93 a0 20 	sts	0x20A0, r24
     488:	90 93 a1 20 	sts	0x20A1, r25
     48c:	0b c0       	rjmp	.+22     	; 0x4a4 <udi_cdc_tx_send+0x118>
     48e:	0e 94 40 11 	call	0x2280	; 0x2280 <udd_get_frame_number>
     492:	80 93 a0 20 	sts	0x20A0, r24
     496:	90 93 a1 20 	sts	0x20A1, r25
     49a:	04 c0       	rjmp	.+8      	; 0x4a4 <udi_cdc_tx_send+0x118>
     49c:	10 92 a0 20 	sts	0x20A0, r1
     4a0:	10 92 a1 20 	sts	0x20A1, r1
     4a4:	fe 01       	movw	r30, r28
     4a6:	ee 0f       	add	r30, r30
     4a8:	ff 1f       	adc	r31, r31
     4aa:	ed 55       	subi	r30, 0x5D	; 93
     4ac:	ff 4d       	sbci	r31, 0xDF	; 223
     4ae:	20 81       	ld	r18, Z
     4b0:	31 81       	ldd	r19, Z+1	; 0x01
     4b2:	ae 01       	movw	r20, r28
     4b4:	00 24       	eor	r0, r0
     4b6:	56 95       	lsr	r21
     4b8:	47 95       	ror	r20
     4ba:	07 94       	ror	r0
     4bc:	56 95       	lsr	r21
     4be:	47 95       	ror	r20
     4c0:	07 94       	ror	r0
     4c2:	54 2f       	mov	r21, r20
     4c4:	40 2d       	mov	r20, r0
     4c6:	48 55       	subi	r20, 0x58	; 88
     4c8:	5f 4d       	sbci	r21, 0xDF	; 223
     4ca:	01 e7       	ldi	r16, 0x71	; 113
     4cc:	12 e0       	ldi	r17, 0x02	; 2
     4ce:	6f 2d       	mov	r22, r15
     4d0:	81 e8       	ldi	r24, 0x81	; 129
     4d2:	0e 94 f7 11 	call	0x23ee	; 0x23ee <udd_ep_run>
     4d6:	df 91       	pop	r29
     4d8:	cf 91       	pop	r28
     4da:	1f 91       	pop	r17
     4dc:	0f 91       	pop	r16
     4de:	ff 90       	pop	r15
     4e0:	08 95       	ret

000004e2 <udi_cdc_data_sent>:
     4e2:	81 11       	cpse	r24, r1
     4e4:	15 c0       	rjmp	.+42     	; 0x510 <udi_cdc_data_sent+0x2e>
     4e6:	20 91 a2 20 	lds	r18, 0x20A2
     4ea:	81 e0       	ldi	r24, 0x01	; 1
     4ec:	90 e0       	ldi	r25, 0x00	; 0
     4ee:	22 23       	and	r18, r18
     4f0:	11 f0       	breq	.+4      	; 0x4f6 <udi_cdc_data_sent+0x14>
     4f2:	80 e0       	ldi	r24, 0x00	; 0
     4f4:	90 e0       	ldi	r25, 0x00	; 0
     4f6:	fc 01       	movw	r30, r24
     4f8:	ee 0f       	add	r30, r30
     4fa:	ff 1f       	adc	r31, r31
     4fc:	ed 55       	subi	r30, 0x5D	; 93
     4fe:	ff 4d       	sbci	r31, 0xDF	; 223
     500:	10 82       	st	Z, r1
     502:	11 82       	std	Z+1, r1	; 0x01
     504:	10 92 9e 20 	sts	0x209E, r1
     508:	10 92 9f 20 	sts	0x209F, r1
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	3e cf       	rjmp	.-388    	; 0x38c <udi_cdc_tx_send>
     510:	08 95       	ret

00000512 <udi_cdc_data_sof_notify>:
     512:	80 e0       	ldi	r24, 0x00	; 0
     514:	3b cf       	rjmp	.-394    	; 0x38c <udi_cdc_tx_send>
     516:	08 95       	ret

00000518 <udi_cdc_data_disable>:
     518:	80 91 b1 21 	lds	r24, 0x21B1
     51c:	81 50       	subi	r24, 0x01	; 1
     51e:	80 93 b1 21 	sts	0x21B1, r24
     522:	80 91 b1 21 	lds	r24, 0x21B1
     526:	0e 94 d9 18 	call	0x31b2	; 0x31b2 <callback_cdc_disable>
     52a:	10 92 b0 21 	sts	0x21B0, r1
     52e:	08 95       	ret

00000530 <udi_cdc_multi_get_nb_received_data>:
     530:	4f b7       	in	r20, 0x3f	; 63
     532:	f8 94       	cli
     534:	20 91 29 21 	lds	r18, 0x2129
     538:	30 91 2a 21 	lds	r19, 0x212A
     53c:	e0 91 2b 21 	lds	r30, 0x212B
     540:	f0 e0       	ldi	r31, 0x00	; 0
     542:	ee 0f       	add	r30, r30
     544:	ff 1f       	adc	r31, r31
     546:	e4 5d       	subi	r30, 0xD4	; 212
     548:	fe 4d       	sbci	r31, 0xDE	; 222
     54a:	80 81       	ld	r24, Z
     54c:	91 81       	ldd	r25, Z+1	; 0x01
     54e:	82 1b       	sub	r24, r18
     550:	93 0b       	sbc	r25, r19
     552:	4f bf       	out	0x3f, r20	; 63
     554:	08 95       	ret

00000556 <udi_cdc_multi_is_rx_ready>:
     556:	ec df       	rcall	.-40     	; 0x530 <udi_cdc_multi_get_nb_received_data>
     558:	21 e0       	ldi	r18, 0x01	; 1
     55a:	89 2b       	or	r24, r25
     55c:	09 f4       	brne	.+2      	; 0x560 <udi_cdc_multi_is_rx_ready+0xa>
     55e:	20 e0       	ldi	r18, 0x00	; 0
     560:	82 2f       	mov	r24, r18
     562:	08 95       	ret

00000564 <udi_cdc_rx_start>:
     564:	0f 93       	push	r16
     566:	1f 93       	push	r17
     568:	cf 93       	push	r28
     56a:	df 93       	push	r29
     56c:	4f b7       	in	r20, 0x3f	; 63
     56e:	f8 94       	cli
     570:	50 91 2b 21 	lds	r21, 0x212B
     574:	80 91 28 21 	lds	r24, 0x2128
     578:	81 11       	cpse	r24, r1
     57a:	10 c0       	rjmp	.+32     	; 0x59c <udi_cdc_rx_start+0x38>
     57c:	20 91 29 21 	lds	r18, 0x2129
     580:	30 91 2a 21 	lds	r19, 0x212A
     584:	c5 2f       	mov	r28, r21
     586:	d0 e0       	ldi	r29, 0x00	; 0
     588:	fe 01       	movw	r30, r28
     58a:	ee 0f       	add	r30, r30
     58c:	ff 1f       	adc	r31, r31
     58e:	e4 5d       	subi	r30, 0xD4	; 212
     590:	fe 4d       	sbci	r31, 0xDE	; 222
     592:	80 81       	ld	r24, Z
     594:	91 81       	ldd	r25, Z+1	; 0x01
     596:	28 17       	cp	r18, r24
     598:	39 07       	cpc	r19, r25
     59a:	18 f4       	brcc	.+6      	; 0x5a2 <udi_cdc_rx_start+0x3e>
     59c:	4f bf       	out	0x3f, r20	; 63
     59e:	80 e0       	ldi	r24, 0x00	; 0
     5a0:	23 c0       	rjmp	.+70     	; 0x5e8 <udi_cdc_rx_start+0x84>
     5a2:	10 92 29 21 	sts	0x2129, r1
     5a6:	10 92 2a 21 	sts	0x212A, r1
     5aa:	81 e0       	ldi	r24, 0x01	; 1
     5ac:	51 11       	cpse	r21, r1
     5ae:	80 e0       	ldi	r24, 0x00	; 0
     5b0:	80 93 2b 21 	sts	0x212B, r24
     5b4:	81 e0       	ldi	r24, 0x01	; 1
     5b6:	80 93 28 21 	sts	0x2128, r24
     5ba:	4f bf       	out	0x3f, r20	; 63
     5bc:	80 e0       	ldi	r24, 0x00	; 0
     5be:	cb df       	rcall	.-106    	; 0x556 <udi_cdc_multi_is_rx_ready>
     5c0:	ae 01       	movw	r20, r28
     5c2:	00 24       	eor	r0, r0
     5c4:	56 95       	lsr	r21
     5c6:	47 95       	ror	r20
     5c8:	07 94       	ror	r0
     5ca:	56 95       	lsr	r21
     5cc:	47 95       	ror	r20
     5ce:	07 94       	ror	r0
     5d0:	54 2f       	mov	r21, r20
     5d2:	40 2d       	mov	r20, r0
     5d4:	40 5d       	subi	r20, 0xD0	; 208
     5d6:	5e 4d       	sbci	r21, 0xDE	; 222
     5d8:	0b e2       	ldi	r16, 0x2B	; 43
     5da:	13 e0       	ldi	r17, 0x03	; 3
     5dc:	20 e4       	ldi	r18, 0x40	; 64
     5de:	30 e0       	ldi	r19, 0x00	; 0
     5e0:	61 e0       	ldi	r22, 0x01	; 1
     5e2:	82 e0       	ldi	r24, 0x02	; 2
     5e4:	0e 94 f7 11 	call	0x23ee	; 0x23ee <udd_ep_run>
     5e8:	df 91       	pop	r29
     5ea:	cf 91       	pop	r28
     5ec:	1f 91       	pop	r17
     5ee:	0f 91       	pop	r16
     5f0:	08 95       	ret

000005f2 <udi_cdc_data_enable>:
     5f2:	10 92 b1 21 	sts	0x21B1, r1
     5f6:	10 92 9f 20 	sts	0x209F, r1
     5fa:	10 92 9e 20 	sts	0x209E, r1
     5fe:	10 92 a2 20 	sts	0x20A2, r1
     602:	10 92 a3 20 	sts	0x20A3, r1
     606:	10 92 a4 20 	sts	0x20A4, r1
     60a:	10 92 a5 20 	sts	0x20A5, r1
     60e:	10 92 a6 20 	sts	0x20A6, r1
     612:	10 92 a0 20 	sts	0x20A0, r1
     616:	10 92 a1 20 	sts	0x20A1, r1
     61a:	80 e0       	ldi	r24, 0x00	; 0
     61c:	b7 de       	rcall	.-658    	; 0x38c <udi_cdc_tx_send>
     61e:	10 92 28 21 	sts	0x2128, r1
     622:	10 92 2b 21 	sts	0x212B, r1
     626:	10 92 2c 21 	sts	0x212C, r1
     62a:	10 92 2d 21 	sts	0x212D, r1
     62e:	10 92 29 21 	sts	0x2129, r1
     632:	10 92 2a 21 	sts	0x212A, r1
     636:	80 e0       	ldi	r24, 0x00	; 0
     638:	95 df       	rcall	.-214    	; 0x564 <udi_cdc_rx_start>
     63a:	88 23       	and	r24, r24
     63c:	59 f0       	breq	.+22     	; 0x654 <udi_cdc_data_enable+0x62>
     63e:	90 91 b1 21 	lds	r25, 0x21B1
     642:	9f 5f       	subi	r25, 0xFF	; 255
     644:	90 93 b1 21 	sts	0x21B1, r25
     648:	90 91 b1 21 	lds	r25, 0x21B1
     64c:	91 30       	cpi	r25, 0x01	; 1
     64e:	11 f4       	brne	.+4      	; 0x654 <udi_cdc_data_enable+0x62>
     650:	90 93 b0 21 	sts	0x21B0, r25
     654:	08 95       	ret

00000656 <udi_cdc_data_received>:
     656:	0f 93       	push	r16
     658:	1f 93       	push	r17
     65a:	94 2f       	mov	r25, r20
     65c:	81 11       	cpse	r24, r1
     65e:	29 c0       	rjmp	.+82     	; 0x6b2 <udi_cdc_data_received+0x5c>
     660:	80 91 2b 21 	lds	r24, 0x212B
     664:	e1 e0       	ldi	r30, 0x01	; 1
     666:	81 11       	cpse	r24, r1
     668:	e0 e0       	ldi	r30, 0x00	; 0
     66a:	61 15       	cp	r22, r1
     66c:	71 05       	cpc	r23, r1
     66e:	b1 f4       	brne	.+44     	; 0x69c <udi_cdc_data_received+0x46>
     670:	f0 e0       	ldi	r31, 0x00	; 0
     672:	00 24       	eor	r0, r0
     674:	f6 95       	lsr	r31
     676:	e7 95       	ror	r30
     678:	07 94       	ror	r0
     67a:	f6 95       	lsr	r31
     67c:	e7 95       	ror	r30
     67e:	07 94       	ror	r0
     680:	fe 2f       	mov	r31, r30
     682:	e0 2d       	mov	r30, r0
     684:	af 01       	movw	r20, r30
     686:	40 5d       	subi	r20, 0xD0	; 208
     688:	5e 4d       	sbci	r21, 0xDE	; 222
     68a:	0b e2       	ldi	r16, 0x2B	; 43
     68c:	13 e0       	ldi	r17, 0x03	; 3
     68e:	20 e4       	ldi	r18, 0x40	; 64
     690:	30 e0       	ldi	r19, 0x00	; 0
     692:	61 e0       	ldi	r22, 0x01	; 1
     694:	89 2f       	mov	r24, r25
     696:	0e 94 f7 11 	call	0x23ee	; 0x23ee <udd_ep_run>
     69a:	0b c0       	rjmp	.+22     	; 0x6b2 <udi_cdc_data_received+0x5c>
     69c:	f0 e0       	ldi	r31, 0x00	; 0
     69e:	ee 0f       	add	r30, r30
     6a0:	ff 1f       	adc	r31, r31
     6a2:	e4 5d       	subi	r30, 0xD4	; 212
     6a4:	fe 4d       	sbci	r31, 0xDE	; 222
     6a6:	60 83       	st	Z, r22
     6a8:	71 83       	std	Z+1, r23	; 0x01
     6aa:	10 92 28 21 	sts	0x2128, r1
     6ae:	80 e0       	ldi	r24, 0x00	; 0
     6b0:	59 df       	rcall	.-334    	; 0x564 <udi_cdc_rx_start>
     6b2:	1f 91       	pop	r17
     6b4:	0f 91       	pop	r16
     6b6:	08 95       	ret

000006b8 <udi_cdc_multi_get_free_tx_buffer>:
     6b8:	9f b7       	in	r25, 0x3f	; 63
     6ba:	f8 94       	cli
     6bc:	80 91 a2 20 	lds	r24, 0x20A2
     6c0:	e8 2f       	mov	r30, r24
     6c2:	f0 e0       	ldi	r31, 0x00	; 0
     6c4:	ee 0f       	add	r30, r30
     6c6:	ff 1f       	adc	r31, r31
     6c8:	ed 55       	subi	r30, 0x5D	; 93
     6ca:	ff 4d       	sbci	r31, 0xDF	; 223
     6cc:	20 81       	ld	r18, Z
     6ce:	31 81       	ldd	r19, Z+1	; 0x01
     6d0:	20 34       	cpi	r18, 0x40	; 64
     6d2:	31 05       	cpc	r19, r1
     6d4:	89 f4       	brne	.+34     	; 0x6f8 <udi_cdc_multi_get_free_tx_buffer+0x40>
     6d6:	40 91 9f 20 	lds	r20, 0x209F
     6da:	41 11       	cpse	r20, r1
     6dc:	0d c0       	rjmp	.+26     	; 0x6f8 <udi_cdc_multi_get_free_tx_buffer+0x40>
     6de:	40 91 9e 20 	lds	r20, 0x209E
     6e2:	41 11       	cpse	r20, r1
     6e4:	09 c0       	rjmp	.+18     	; 0x6f8 <udi_cdc_multi_get_free_tx_buffer+0x40>
     6e6:	21 e0       	ldi	r18, 0x01	; 1
     6e8:	20 93 9e 20 	sts	0x209E, r18
     6ec:	81 11       	cpse	r24, r1
     6ee:	20 e0       	ldi	r18, 0x00	; 0
     6f0:	20 93 a2 20 	sts	0x20A2, r18
     6f4:	20 e0       	ldi	r18, 0x00	; 0
     6f6:	30 e0       	ldi	r19, 0x00	; 0
     6f8:	9f bf       	out	0x3f, r25	; 63
     6fa:	80 e4       	ldi	r24, 0x40	; 64
     6fc:	90 e0       	ldi	r25, 0x00	; 0
     6fe:	82 1b       	sub	r24, r18
     700:	93 0b       	sbc	r25, r19
     702:	08 95       	ret

00000704 <udi_cdc_multi_is_tx_ready>:
     704:	d9 df       	rcall	.-78     	; 0x6b8 <udi_cdc_multi_get_free_tx_buffer>
     706:	21 e0       	ldi	r18, 0x01	; 1
     708:	89 2b       	or	r24, r25
     70a:	09 f4       	brne	.+2      	; 0x70e <udi_cdc_multi_is_tx_ready+0xa>
     70c:	20 e0       	ldi	r18, 0x00	; 0
     70e:	82 2f       	mov	r24, r18
     710:	08 95       	ret

00000712 <udi_cdc_multi_putc>:

int udi_cdc_multi_putc(uint8_t port, int value)
{
     712:	1f 93       	push	r17
     714:	cf 93       	push	r28
     716:	df 93       	push	r29
     718:	16 2f       	mov	r17, r22
     71a:	c7 2f       	mov	r28, r23

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);
     71c:	d1 e0       	ldi	r29, 0x01	; 1
     71e:	80 91 c6 21 	lds	r24, 0x21C6
     722:	89 30       	cpi	r24, 0x09	; 9
     724:	09 f0       	breq	.+2      	; 0x728 <udi_cdc_multi_putc+0x16>
     726:	d0 e0       	ldi	r29, 0x00	; 0

udi_cdc_putc_process_one_byte:
	// Check available space
	if (!udi_cdc_multi_is_tx_ready(port)) {
     728:	80 e0       	ldi	r24, 0x00	; 0
     72a:	ec df       	rcall	.-40     	; 0x704 <udi_cdc_multi_is_tx_ready>
     72c:	81 11       	cpse	r24, r1
     72e:	07 c0       	rjmp	.+14     	; 0x73e <udi_cdc_multi_putc+0x2c>
		if (!udi_cdc_data_running) {
     730:	80 91 b0 21 	lds	r24, 0x21B0
     734:	81 11       	cpse	r24, r1
     736:	f8 cf       	rjmp	.-16     	; 0x728 <udi_cdc_multi_putc+0x16>
			return false;
     738:	80 e0       	ldi	r24, 0x00	; 0
     73a:	90 e0       	ldi	r25, 0x00	; 0
     73c:	2b c0       	rjmp	.+86     	; 0x794 <udi_cdc_multi_putc+0x82>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     73e:	6f b7       	in	r22, 0x3f	; 63
	cpu_irq_disable();
     740:	f8 94       	cli
		goto udi_cdc_putc_process_one_byte;
	}

	// Write value
	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
     742:	20 91 a2 20 	lds	r18, 0x20A2
	udi_cdc_tx_buf[port][buf_sel][udi_cdc_tx_buf_nb[port][buf_sel]++] = value;
     746:	30 e0       	ldi	r19, 0x00	; 0
     748:	f9 01       	movw	r30, r18
     74a:	ee 0f       	add	r30, r30
     74c:	ff 1f       	adc	r31, r31
     74e:	ed 55       	subi	r30, 0x5D	; 93
     750:	ff 4d       	sbci	r31, 0xDF	; 223
     752:	80 81       	ld	r24, Z
     754:	91 81       	ldd	r25, Z+1	; 0x01
     756:	ac 01       	movw	r20, r24
     758:	4f 5f       	subi	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	40 83       	st	Z, r20
     75e:	51 83       	std	Z+1, r21	; 0x01
     760:	f9 01       	movw	r30, r18
     762:	00 24       	eor	r0, r0
     764:	f6 95       	lsr	r31
     766:	e7 95       	ror	r30
     768:	07 94       	ror	r0
     76a:	f6 95       	lsr	r31
     76c:	e7 95       	ror	r30
     76e:	07 94       	ror	r0
     770:	fe 2f       	mov	r31, r30
     772:	e0 2d       	mov	r30, r0
     774:	8e 0f       	add	r24, r30
     776:	9f 1f       	adc	r25, r31
     778:	fc 01       	movw	r30, r24
     77a:	e8 55       	subi	r30, 0x58	; 88
     77c:	ff 4d       	sbci	r31, 0xDF	; 223
     77e:	10 83       	st	Z, r17
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     780:	6f bf       	out	0x3f, r22	; 63
	cpu_irq_restore(flags);

	if (b_databit_9) {
     782:	dd 23       	and	r29, r29
     784:	29 f0       	breq	.+10     	; 0x790 <udi_cdc_multi_putc+0x7e>
		// Send MSB
		b_databit_9 = false;
		value = value >> 8;
     786:	1c 2f       	mov	r17, r28
     788:	cc 0f       	add	r28, r28
     78a:	cc 0b       	sbc	r28, r28
	udi_cdc_tx_buf[port][buf_sel][udi_cdc_tx_buf_nb[port][buf_sel]++] = value;
	cpu_irq_restore(flags);

	if (b_databit_9) {
		// Send MSB
		b_databit_9 = false;
     78c:	d0 e0       	ldi	r29, 0x00	; 0
		value = value >> 8;
		goto udi_cdc_putc_process_one_byte;
     78e:	cc cf       	rjmp	.-104    	; 0x728 <udi_cdc_multi_putc+0x16>
	}
	return true;
     790:	81 e0       	ldi	r24, 0x01	; 1
     792:	90 e0       	ldi	r25, 0x00	; 0
}
     794:	df 91       	pop	r29
     796:	cf 91       	pop	r28
     798:	1f 91       	pop	r17
     79a:	08 95       	ret

0000079c <udi_cdc_putc>:

int udi_cdc_putc(int value)
{
	return udi_cdc_multi_putc(0, value);
     79c:	bc 01       	movw	r22, r24
     79e:	80 e0       	ldi	r24, 0x00	; 0
     7a0:	b8 cf       	rjmp	.-144    	; 0x712 <udi_cdc_multi_putc>
}
     7a2:	08 95       	ret

000007a4 <udc_next_desc_in_iface>:
/*! \brief Stop the USB Device stack
 */
void udc_stop(void)
{
	udd_disable();
	udc_reset();
     7a4:	e0 91 cc 21 	lds	r30, 0x21CC
     7a8:	f0 91 cd 21 	lds	r31, 0x21CD
     7ac:	01 90       	ld	r0, Z+
     7ae:	f0 81       	ld	r31, Z
     7b0:	e0 2d       	mov	r30, r0
     7b2:	22 81       	ldd	r18, Z+2	; 0x02
     7b4:	33 81       	ldd	r19, Z+3	; 0x03
     7b6:	2e 0f       	add	r18, r30
     7b8:	3f 1f       	adc	r19, r31
     7ba:	fc 01       	movw	r30, r24
     7bc:	40 81       	ld	r20, Z
     7be:	e4 0f       	add	r30, r20
     7c0:	f1 1d       	adc	r31, r1
     7c2:	e2 17       	cp	r30, r18
     7c4:	f3 07       	cpc	r31, r19
     7c6:	a0 f4       	brcc	.+40     	; 0x7f0 <udc_next_desc_in_iface+0x4c>
     7c8:	81 81       	ldd	r24, Z+1	; 0x01
     7ca:	84 30       	cpi	r24, 0x04	; 4
     7cc:	a1 f0       	breq	.+40     	; 0x7f6 <udc_next_desc_in_iface+0x52>
     7ce:	86 13       	cpse	r24, r22
     7d0:	06 c0       	rjmp	.+12     	; 0x7de <udc_next_desc_in_iface+0x3a>
     7d2:	14 c0       	rjmp	.+40     	; 0x7fc <udc_next_desc_in_iface+0x58>
     7d4:	81 81       	ldd	r24, Z+1	; 0x01
     7d6:	84 30       	cpi	r24, 0x04	; 4
     7d8:	a1 f0       	breq	.+40     	; 0x802 <udc_next_desc_in_iface+0x5e>
     7da:	86 17       	cp	r24, r22
     7dc:	a9 f0       	breq	.+42     	; 0x808 <udc_next_desc_in_iface+0x64>
     7de:	80 81       	ld	r24, Z
     7e0:	e8 0f       	add	r30, r24
     7e2:	f1 1d       	adc	r31, r1
     7e4:	e2 17       	cp	r30, r18
     7e6:	f3 07       	cpc	r31, r19
     7e8:	a8 f3       	brcs	.-22     	; 0x7d4 <udc_next_desc_in_iface+0x30>
     7ea:	80 e0       	ldi	r24, 0x00	; 0
     7ec:	90 e0       	ldi	r25, 0x00	; 0
     7ee:	08 95       	ret
     7f0:	80 e0       	ldi	r24, 0x00	; 0
     7f2:	90 e0       	ldi	r25, 0x00	; 0
     7f4:	08 95       	ret
     7f6:	80 e0       	ldi	r24, 0x00	; 0
     7f8:	90 e0       	ldi	r25, 0x00	; 0
     7fa:	08 95       	ret
     7fc:	8e 2f       	mov	r24, r30
     7fe:	9f 2f       	mov	r25, r31
     800:	08 95       	ret
     802:	80 e0       	ldi	r24, 0x00	; 0
     804:	90 e0       	ldi	r25, 0x00	; 0
     806:	08 95       	ret
     808:	8e 2f       	mov	r24, r30
     80a:	9f 2f       	mov	r25, r31
     80c:	08 95       	ret

0000080e <udc_valid_address>:
     80e:	80 91 4c 23 	lds	r24, 0x234C
     812:	8f 77       	andi	r24, 0x7F	; 127
     814:	0c 94 3a 11 	jmp	0x2274	; 0x2274 <udd_set_address>
     818:	08 95       	ret

0000081a <udc_update_iface_desc>:
     81a:	90 91 ce 21 	lds	r25, 0x21CE
     81e:	99 23       	and	r25, r25
     820:	81 f1       	breq	.+96     	; 0x882 <udc_update_iface_desc+0x68>
     822:	e0 91 cc 21 	lds	r30, 0x21CC
     826:	f0 91 cd 21 	lds	r31, 0x21CD
     82a:	01 90       	ld	r0, Z+
     82c:	f0 81       	ld	r31, Z
     82e:	e0 2d       	mov	r30, r0
     830:	94 81       	ldd	r25, Z+4	; 0x04
     832:	89 17       	cp	r24, r25
     834:	40 f5       	brcc	.+80     	; 0x886 <udc_update_iface_desc+0x6c>
     836:	e0 93 ca 21 	sts	0x21CA, r30
     83a:	f0 93 cb 21 	sts	0x21CB, r31
     83e:	22 81       	ldd	r18, Z+2	; 0x02
     840:	33 81       	ldd	r19, Z+3	; 0x03
     842:	2e 0f       	add	r18, r30
     844:	3f 1f       	adc	r19, r31
     846:	e2 17       	cp	r30, r18
     848:	f3 07       	cpc	r31, r19
     84a:	f8 f4       	brcc	.+62     	; 0x88a <udc_update_iface_desc+0x70>
     84c:	91 81       	ldd	r25, Z+1	; 0x01
     84e:	94 30       	cpi	r25, 0x04	; 4
     850:	61 f4       	brne	.+24     	; 0x86a <udc_update_iface_desc+0x50>
     852:	92 81       	ldd	r25, Z+2	; 0x02
     854:	98 13       	cpse	r25, r24
     856:	09 c0       	rjmp	.+18     	; 0x86a <udc_update_iface_desc+0x50>
     858:	93 81       	ldd	r25, Z+3	; 0x03
     85a:	96 13       	cpse	r25, r22
     85c:	06 c0       	rjmp	.+12     	; 0x86a <udc_update_iface_desc+0x50>
     85e:	e0 93 ca 21 	sts	0x21CA, r30
     862:	f0 93 cb 21 	sts	0x21CB, r31
     866:	81 e0       	ldi	r24, 0x01	; 1
     868:	08 95       	ret
     86a:	90 81       	ld	r25, Z
     86c:	e9 0f       	add	r30, r25
     86e:	f1 1d       	adc	r31, r1
     870:	e2 17       	cp	r30, r18
     872:	f3 07       	cpc	r31, r19
     874:	58 f3       	brcs	.-42     	; 0x84c <udc_update_iface_desc+0x32>
     876:	e0 93 ca 21 	sts	0x21CA, r30
     87a:	f0 93 cb 21 	sts	0x21CB, r31
     87e:	80 e0       	ldi	r24, 0x00	; 0
     880:	08 95       	ret
     882:	80 e0       	ldi	r24, 0x00	; 0
     884:	08 95       	ret
     886:	80 e0       	ldi	r24, 0x00	; 0
     888:	08 95       	ret
     88a:	80 e0       	ldi	r24, 0x00	; 0
     88c:	08 95       	ret

0000088e <udc_iface_disable>:
     88e:	ff 92       	push	r15
     890:	0f 93       	push	r16
     892:	1f 93       	push	r17
     894:	cf 93       	push	r28
     896:	df 93       	push	r29
     898:	c8 2f       	mov	r28, r24
     89a:	60 e0       	ldi	r22, 0x00	; 0
     89c:	be df       	rcall	.-132    	; 0x81a <udc_update_iface_desc>
     89e:	f8 2e       	mov	r15, r24
     8a0:	88 23       	and	r24, r24
     8a2:	81 f1       	breq	.+96     	; 0x904 <udc_iface_disable+0x76>
     8a4:	a0 91 cc 21 	lds	r26, 0x21CC
     8a8:	b0 91 cd 21 	lds	r27, 0x21CD
     8ac:	ec 2f       	mov	r30, r28
     8ae:	f0 e0       	ldi	r31, 0x00	; 0
     8b0:	ee 0f       	add	r30, r30
     8b2:	ff 1f       	adc	r31, r31
     8b4:	12 96       	adiw	r26, 0x02	; 2
     8b6:	2d 91       	ld	r18, X+
     8b8:	3c 91       	ld	r19, X
     8ba:	13 97       	sbiw	r26, 0x03	; 3
     8bc:	e2 0f       	add	r30, r18
     8be:	f3 1f       	adc	r31, r19
     8c0:	00 81       	ld	r16, Z
     8c2:	11 81       	ldd	r17, Z+1	; 0x01
     8c4:	d8 01       	movw	r26, r16
     8c6:	16 96       	adiw	r26, 0x06	; 6
     8c8:	ed 91       	ld	r30, X+
     8ca:	fc 91       	ld	r31, X
     8cc:	17 97       	sbiw	r26, 0x07	; 7
     8ce:	19 95       	eicall
     8d0:	68 2f       	mov	r22, r24
     8d2:	8c 2f       	mov	r24, r28
     8d4:	a2 df       	rcall	.-188    	; 0x81a <udc_update_iface_desc>
     8d6:	f8 2e       	mov	r15, r24
     8d8:	88 23       	and	r24, r24
     8da:	a1 f0       	breq	.+40     	; 0x904 <udc_iface_disable+0x76>
     8dc:	c0 91 ca 21 	lds	r28, 0x21CA
     8e0:	d0 91 cb 21 	lds	r29, 0x21CB
     8e4:	65 e0       	ldi	r22, 0x05	; 5
     8e6:	ce 01       	movw	r24, r28
     8e8:	5d df       	rcall	.-326    	; 0x7a4 <udc_next_desc_in_iface>
     8ea:	ec 01       	movw	r28, r24
     8ec:	00 97       	sbiw	r24, 0x00	; 0
     8ee:	21 f0       	breq	.+8      	; 0x8f8 <udc_iface_disable+0x6a>
     8f0:	8a 81       	ldd	r24, Y+2	; 0x02
     8f2:	0e 94 b7 12 	call	0x256e	; 0x256e <udd_ep_free>
     8f6:	f6 cf       	rjmp	.-20     	; 0x8e4 <udc_iface_disable+0x56>
     8f8:	d8 01       	movw	r26, r16
     8fa:	12 96       	adiw	r26, 0x02	; 2
     8fc:	ed 91       	ld	r30, X+
     8fe:	fc 91       	ld	r31, X
     900:	13 97       	sbiw	r26, 0x03	; 3
     902:	19 95       	eicall
     904:	8f 2d       	mov	r24, r15
     906:	df 91       	pop	r29
     908:	cf 91       	pop	r28
     90a:	1f 91       	pop	r17
     90c:	0f 91       	pop	r16
     90e:	ff 90       	pop	r15
     910:	08 95       	ret

00000912 <udc_iface_enable>:
     912:	1f 93       	push	r17
     914:	cf 93       	push	r28
     916:	df 93       	push	r29
     918:	18 2f       	mov	r17, r24
     91a:	7f df       	rcall	.-258    	; 0x81a <udc_update_iface_desc>
     91c:	88 23       	and	r24, r24
     91e:	41 f1       	breq	.+80     	; 0x970 <udc_iface_enable+0x5e>
     920:	c0 91 ca 21 	lds	r28, 0x21CA
     924:	d0 91 cb 21 	lds	r29, 0x21CB
     928:	65 e0       	ldi	r22, 0x05	; 5
     92a:	ce 01       	movw	r24, r28
     92c:	3b df       	rcall	.-394    	; 0x7a4 <udc_next_desc_in_iface>
     92e:	ec 01       	movw	r28, r24
     930:	00 97       	sbiw	r24, 0x00	; 0
     932:	49 f0       	breq	.+18     	; 0x946 <udc_iface_enable+0x34>
     934:	4c 81       	ldd	r20, Y+4	; 0x04
     936:	5d 81       	ldd	r21, Y+5	; 0x05
     938:	6b 81       	ldd	r22, Y+3	; 0x03
     93a:	8a 81       	ldd	r24, Y+2	; 0x02
     93c:	0e 94 51 11 	call	0x22a2	; 0x22a2 <udd_ep_alloc>
     940:	81 11       	cpse	r24, r1
     942:	f2 cf       	rjmp	.-28     	; 0x928 <udc_iface_enable+0x16>
     944:	15 c0       	rjmp	.+42     	; 0x970 <udc_iface_enable+0x5e>
     946:	a0 91 cc 21 	lds	r26, 0x21CC
     94a:	b0 91 cd 21 	lds	r27, 0x21CD
     94e:	81 2f       	mov	r24, r17
     950:	90 e0       	ldi	r25, 0x00	; 0
     952:	88 0f       	add	r24, r24
     954:	99 1f       	adc	r25, r25
     956:	12 96       	adiw	r26, 0x02	; 2
     958:	ed 91       	ld	r30, X+
     95a:	fc 91       	ld	r31, X
     95c:	13 97       	sbiw	r26, 0x03	; 3
     95e:	e8 0f       	add	r30, r24
     960:	f9 1f       	adc	r31, r25
     962:	01 90       	ld	r0, Z+
     964:	f0 81       	ld	r31, Z
     966:	e0 2d       	mov	r30, r0
     968:	01 90       	ld	r0, Z+
     96a:	f0 81       	ld	r31, Z
     96c:	e0 2d       	mov	r30, r0
     96e:	19 95       	eicall
     970:	df 91       	pop	r29
     972:	cf 91       	pop	r28
     974:	1f 91       	pop	r17
     976:	08 95       	ret

00000978 <udc_start>:
     978:	0c 94 c7 10 	jmp	0x218e	; 0x218e <udd_enable>
     97c:	08 95       	ret

0000097e <udc_reset>:
     97e:	cf 93       	push	r28
     980:	80 91 ce 21 	lds	r24, 0x21CE
     984:	88 23       	and	r24, r24
     986:	c1 f0       	breq	.+48     	; 0x9b8 <udc_reset+0x3a>
     988:	e0 91 cc 21 	lds	r30, 0x21CC
     98c:	f0 91 cd 21 	lds	r31, 0x21CD
     990:	01 90       	ld	r0, Z+
     992:	f0 81       	ld	r31, Z
     994:	e0 2d       	mov	r30, r0
     996:	84 81       	ldd	r24, Z+4	; 0x04
     998:	88 23       	and	r24, r24
     99a:	71 f0       	breq	.+28     	; 0x9b8 <udc_reset+0x3a>
     99c:	c0 e0       	ldi	r28, 0x00	; 0
     99e:	8c 2f       	mov	r24, r28
     9a0:	76 df       	rcall	.-276    	; 0x88e <udc_iface_disable>
     9a2:	cf 5f       	subi	r28, 0xFF	; 255
     9a4:	e0 91 cc 21 	lds	r30, 0x21CC
     9a8:	f0 91 cd 21 	lds	r31, 0x21CD
     9ac:	01 90       	ld	r0, Z+
     9ae:	f0 81       	ld	r31, Z
     9b0:	e0 2d       	mov	r30, r0
     9b2:	84 81       	ldd	r24, Z+4	; 0x04
     9b4:	c8 17       	cp	r28, r24
     9b6:	98 f3       	brcs	.-26     	; 0x99e <udc_reset+0x20>
     9b8:	10 92 ce 21 	sts	0x21CE, r1
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	80 93 d2 21 	sts	0x21D2, r24
     9c4:	90 93 d3 21 	sts	0x21D3, r25
     9c8:	cf 91       	pop	r28
     9ca:	08 95       	ret

000009cc <udc_sof_notify>:
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}

void udc_sof_notify(void)
{
     9cc:	cf 93       	push	r28
	uint8_t iface_num;

	if (udc_num_configuration) {
     9ce:	80 91 ce 21 	lds	r24, 0x21CE
     9d2:	88 23       	and	r24, r24
     9d4:	41 f1       	breq	.+80     	; 0xa26 <udc_sof_notify+0x5a>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     9d6:	e0 91 cc 21 	lds	r30, 0x21CC
     9da:	f0 91 cd 21 	lds	r31, 0x21CD
     9de:	a0 81       	ld	r26, Z
     9e0:	b1 81       	ldd	r27, Z+1	; 0x01
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
     9e2:	14 96       	adiw	r26, 0x04	; 4
     9e4:	8c 91       	ld	r24, X
     9e6:	88 23       	and	r24, r24
     9e8:	f1 f0       	breq	.+60     	; 0xa26 <udc_sof_notify+0x5a>
     9ea:	c0 e0       	ldi	r28, 0x00	; 0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
     9ec:	8c 2f       	mov	r24, r28
     9ee:	90 e0       	ldi	r25, 0x00	; 0
     9f0:	88 0f       	add	r24, r24
     9f2:	99 1f       	adc	r25, r25
     9f4:	02 80       	ldd	r0, Z+2	; 0x02
     9f6:	f3 81       	ldd	r31, Z+3	; 0x03
     9f8:	e0 2d       	mov	r30, r0
     9fa:	e8 0f       	add	r30, r24
     9fc:	f9 1f       	adc	r31, r25
     9fe:	01 90       	ld	r0, Z+
     a00:	f0 81       	ld	r31, Z
     a02:	e0 2d       	mov	r30, r0
     a04:	00 84       	ldd	r0, Z+8	; 0x08
     a06:	f1 85       	ldd	r31, Z+9	; 0x09
     a08:	e0 2d       	mov	r30, r0
     a0a:	30 97       	sbiw	r30, 0x00	; 0
     a0c:	09 f0       	breq	.+2      	; 0xa10 <udc_sof_notify+0x44>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
     a0e:	19 95       	eicall
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
     a10:	cf 5f       	subi	r28, 0xFF	; 255
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     a12:	e0 91 cc 21 	lds	r30, 0x21CC
     a16:	f0 91 cd 21 	lds	r31, 0x21CD
     a1a:	a0 81       	ld	r26, Z
     a1c:	b1 81       	ldd	r27, Z+1	; 0x01
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
     a1e:	14 96       	adiw	r26, 0x04	; 4
     a20:	8c 91       	ld	r24, X
     a22:	c8 17       	cp	r28, r24
     a24:	18 f3       	brcs	.-58     	; 0x9ec <udc_sof_notify+0x20>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
			}
		}
	}
}
     a26:	cf 91       	pop	r28
     a28:	08 95       	ret

00000a2a <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
     a2a:	ef 92       	push	r14
     a2c:	ff 92       	push	r15
     a2e:	0f 93       	push	r16
     a30:	1f 93       	push	r17
     a32:	cf 93       	push	r28
     a34:	df 93       	push	r29
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
     a36:	10 92 54 23 	sts	0x2354, r1
     a3a:	10 92 55 23 	sts	0x2355, r1
	udd_g_ctrlreq.callback = NULL;
     a3e:	10 92 56 23 	sts	0x2356, r1
     a42:	10 92 57 23 	sts	0x2357, r1
	udd_g_ctrlreq.over_under_run = NULL;
     a46:	10 92 58 23 	sts	0x2358, r1
     a4a:	10 92 59 23 	sts	0x2359, r1

	if (Udd_setup_is_in()) {
     a4e:	20 91 4a 23 	lds	r18, 0x234A
     a52:	22 23       	and	r18, r18
     a54:	0c f0       	brlt	.+2      	; 0xa58 <udc_process_setup+0x2e>
     a56:	72 c2       	rjmp	.+1252   	; 0xf3c <udc_process_setup+0x512>
		if (udd_g_ctrlreq.req.wLength == 0) {
     a58:	80 91 50 23 	lds	r24, 0x2350
     a5c:	90 91 51 23 	lds	r25, 0x2351
     a60:	00 97       	sbiw	r24, 0x00	; 0
     a62:	09 f0       	breq	.+2      	; 0xa66 <udc_process_setup+0x3c>
     a64:	70 c2       	rjmp	.+1248   	; 0xf46 <udc_process_setup+0x51c>
     a66:	66 c2       	rjmp	.+1228   	; 0xf34 <udc_process_setup+0x50a>
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error for USB host
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
     a68:	2f 71       	andi	r18, 0x1F	; 31
     a6a:	09 f0       	breq	.+2      	; 0xa6e <udc_process_setup+0x44>
     a6c:	91 c0       	rjmp	.+290    	; 0xb90 <udc_process_setup+0x166>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
     a6e:	30 91 4b 23 	lds	r19, 0x234B
     a72:	36 30       	cpi	r19, 0x06	; 6
     a74:	89 f0       	breq	.+34     	; 0xa98 <udc_process_setup+0x6e>
     a76:	38 30       	cpi	r19, 0x08	; 8
     a78:	09 f4       	brne	.+2      	; 0xa7c <udc_process_setup+0x52>
     a7a:	7e c0       	rjmp	.+252    	; 0xb78 <udc_process_setup+0x14e>
     a7c:	31 11       	cpse	r19, r1
     a7e:	88 c0       	rjmp	.+272    	; 0xb90 <udc_process_setup+0x166>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
     a80:	02 97       	sbiw	r24, 0x02	; 2
     a82:	41 f4       	brne	.+16     	; 0xa94 <udc_process_setup+0x6a>
		return false;
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
     a84:	62 e0       	ldi	r22, 0x02	; 2
     a86:	70 e0       	ldi	r23, 0x00	; 0
     a88:	82 ed       	ldi	r24, 0xD2	; 210
     a8a:	91 e2       	ldi	r25, 0x21	; 33
     a8c:	0e 94 48 11 	call	0x2290	; 0x2290 <udd_set_setup_payload>
			sizeof(udc_device_status));
	return true;
     a90:	01 e0       	ldi	r16, 0x01	; 1
     a92:	d3 c1       	rjmp	.+934    	; 0xe3a <udc_process_setup+0x410>
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
		return false;
     a94:	00 e0       	ldi	r16, 0x00	; 0
     a96:	d1 c1       	rjmp	.+930    	; 0xe3a <udc_process_setup+0x410>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
     a98:	20 91 4c 23 	lds	r18, 0x234C
     a9c:	30 91 4d 23 	lds	r19, 0x234D

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
     aa0:	83 2f       	mov	r24, r19
     aa2:	99 27       	eor	r25, r25
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	91 05       	cpc	r25, r1
     aa8:	a1 f0       	breq	.+40     	; 0xad2 <udc_process_setup+0xa8>
     aaa:	1c f4       	brge	.+6      	; 0xab2 <udc_process_setup+0x88>
     aac:	01 97       	sbiw	r24, 0x01	; 1
     aae:	39 f0       	breq	.+14     	; 0xabe <udc_process_setup+0x94>
     ab0:	59 c0       	rjmp	.+178    	; 0xb64 <udc_process_setup+0x13a>
     ab2:	83 30       	cpi	r24, 0x03	; 3
     ab4:	91 05       	cpc	r25, r1
     ab6:	e9 f1       	breq	.+122    	; 0xb32 <udc_process_setup+0x108>
     ab8:	0f 97       	sbiw	r24, 0x0f	; 15
     aba:	69 f1       	breq	.+90     	; 0xb16 <udc_process_setup+0xec>
     abc:	53 c0       	rjmp	.+166    	; 0xb64 <udc_process_setup+0x13a>
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
     abe:	80 91 18 20 	lds	r24, 0x2018
     ac2:	90 91 19 20 	lds	r25, 0x2019
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
     ac6:	dc 01       	movw	r26, r24
     ac8:	6c 91       	ld	r22, X
     aca:	70 e0       	ldi	r23, 0x00	; 0
     acc:	0e 94 48 11 	call	0x2290	; 0x2290 <udd_set_setup_payload>
     ad0:	38 c0       	rjmp	.+112    	; 0xb42 <udc_process_setup+0x118>
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
     ad2:	e0 91 18 20 	lds	r30, 0x2018
     ad6:	f0 91 19 20 	lds	r31, 0x2019
     ada:	81 89       	ldd	r24, Z+17	; 0x11
     adc:	28 17       	cp	r18, r24
     ade:	08 f0       	brcs	.+2      	; 0xae2 <udc_process_setup+0xb8>
     ae0:	43 c0       	rjmp	.+134    	; 0xb68 <udc_process_setup+0x13e>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
     ae2:	c9 01       	movw	r24, r18
     ae4:	99 27       	eor	r25, r25
     ae6:	88 0f       	add	r24, r24
     ae8:	99 1f       	adc	r25, r25
     aea:	88 0f       	add	r24, r24
     aec:	99 1f       	adc	r25, r25
     aee:	e0 91 1a 20 	lds	r30, 0x201A
     af2:	f0 91 1b 20 	lds	r31, 0x201B
     af6:	e8 0f       	add	r30, r24
     af8:	f9 1f       	adc	r31, r25
     afa:	80 81       	ld	r24, Z
     afc:	91 81       	ldd	r25, Z+1	; 0x01
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
     afe:	fc 01       	movw	r30, r24
     b00:	62 81       	ldd	r22, Z+2	; 0x02
     b02:	73 81       	ldd	r23, Z+3	; 0x03
     b04:	0e 94 48 11 	call	0x2290	; 0x2290 <udd_set_setup_payload>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
     b08:	e0 91 52 23 	lds	r30, 0x2352
     b0c:	f0 91 53 23 	lds	r31, 0x2353
     b10:	82 e0       	ldi	r24, 0x02	; 2
     b12:	81 83       	std	Z+1, r24	; 0x01
     b14:	16 c0       	rjmp	.+44     	; 0xb42 <udc_process_setup+0x118>
		break;
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
     b16:	80 91 1c 20 	lds	r24, 0x201C
     b1a:	90 91 1d 20 	lds	r25, 0x201D
     b1e:	00 97       	sbiw	r24, 0x00	; 0
     b20:	29 f1       	breq	.+74     	; 0xb6c <udc_process_setup+0x142>
			return false;
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
     b22:	dc 01       	movw	r26, r24
     b24:	12 96       	adiw	r26, 0x02	; 2
     b26:	6d 91       	ld	r22, X+
     b28:	7c 91       	ld	r23, X
     b2a:	13 97       	sbiw	r26, 0x03	; 3
     b2c:	0e 94 48 11 	call	0x2290	; 0x2290 <udd_set_setup_payload>
     b30:	08 c0       	rjmp	.+16     	; 0xb42 <udc_process_setup+0x118>
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
     b32:	21 11       	cpse	r18, r1
     b34:	1d c0       	rjmp	.+58     	; 0xb70 <udc_process_setup+0x146>
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
     b36:	64 e0       	ldi	r22, 0x04	; 4
     b38:	70 e0       	ldi	r23, 0x00	; 0
     b3a:	84 e1       	ldi	r24, 0x14	; 20
     b3c:	90 e2       	ldi	r25, 0x20	; 32
     b3e:	0e 94 48 11 	call	0x2290	; 0x2290 <udd_set_setup_payload>
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
     b42:	80 91 50 23 	lds	r24, 0x2350
     b46:	90 91 51 23 	lds	r25, 0x2351
     b4a:	20 91 54 23 	lds	r18, 0x2354
     b4e:	30 91 55 23 	lds	r19, 0x2355
     b52:	82 17       	cp	r24, r18
     b54:	93 07       	cpc	r25, r19
     b56:	70 f4       	brcc	.+28     	; 0xb74 <udc_process_setup+0x14a>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
     b58:	80 93 54 23 	sts	0x2354, r24
     b5c:	90 93 55 23 	sts	0x2355, r25
	}
	return true;
     b60:	01 e0       	ldi	r16, 0x01	; 1
     b62:	6b c1       	rjmp	.+726    	; 0xe3a <udc_process_setup+0x410>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
     b64:	00 e0       	ldi	r16, 0x00	; 0
     b66:	69 c1       	rjmp	.+722    	; 0xe3a <udc_process_setup+0x410>
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
     b68:	00 e0       	ldi	r16, 0x00	; 0
     b6a:	67 c1       	rjmp	.+718    	; 0xe3a <udc_process_setup+0x410>
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
			return false;
     b6c:	00 e0       	ldi	r16, 0x00	; 0
     b6e:	65 c1       	rjmp	.+714    	; 0xe3a <udc_process_setup+0x410>
		break;

	case USB_DT_STRING:
		// String descriptor requested
		if (!udc_req_std_dev_get_str_desc()) {
			return false;
     b70:	00 e0       	ldi	r16, 0x00	; 0
     b72:	63 c1       	rjmp	.+710    	; 0xe3a <udc_process_setup+0x410>
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
	}
	return true;
     b74:	01 e0       	ldi	r16, 0x01	; 1
     b76:	61 c1       	rjmp	.+706    	; 0xe3a <udc_process_setup+0x410>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
     b78:	01 97       	sbiw	r24, 0x01	; 1
     b7a:	41 f4       	brne	.+16     	; 0xb8c <udc_process_setup+0x162>
		return false;
	}

	udd_set_setup_payload(&udc_num_configuration,1);
     b7c:	61 e0       	ldi	r22, 0x01	; 1
     b7e:	70 e0       	ldi	r23, 0x00	; 0
     b80:	8e ec       	ldi	r24, 0xCE	; 206
     b82:	91 e2       	ldi	r25, 0x21	; 33
     b84:	0e 94 48 11 	call	0x2290	; 0x2290 <udd_set_setup_payload>
	return true;
     b88:	01 e0       	ldi	r16, 0x01	; 1
     b8a:	57 c1       	rjmp	.+686    	; 0xe3a <udc_process_setup+0x410>
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
		return false;
     b8c:	00 e0       	ldi	r16, 0x00	; 0
     b8e:	55 c1       	rjmp	.+682    	; 0xe3a <udc_process_setup+0x410>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
     b90:	21 30       	cpi	r18, 0x01	; 1
     b92:	09 f0       	breq	.+2      	; 0xb96 <udc_process_setup+0x16c>
     b94:	40 c0       	rjmp	.+128    	; 0xc16 <udc_process_setup+0x1ec>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
     b96:	30 91 4b 23 	lds	r19, 0x234B
     b9a:	3a 30       	cpi	r19, 0x0A	; 10
     b9c:	e1 f5       	brne	.+120    	; 0xc16 <udc_process_setup+0x1ec>
static bool udc_req_std_iface_get_setting(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
     b9e:	01 97       	sbiw	r24, 0x01	; 1
     ba0:	a1 f5       	brne	.+104    	; 0xc0a <udc_process_setup+0x1e0>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
     ba2:	80 91 ce 21 	lds	r24, 0x21CE
     ba6:	88 23       	and	r24, r24
     ba8:	91 f1       	breq	.+100    	; 0xc0e <udc_process_setup+0x1e4>
		return false; // The device is not is configured state yet
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
     baa:	c0 91 4e 23 	lds	r28, 0x234E
     bae:	d0 91 4f 23 	lds	r29, 0x234F
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
     bb2:	e0 90 cc 21 	lds	r14, 0x21CC
     bb6:	f0 90 cd 21 	lds	r15, 0x21CD
     bba:	d7 01       	movw	r26, r14
     bbc:	ed 91       	ld	r30, X+
     bbe:	fc 91       	ld	r31, X
     bc0:	84 81       	ldd	r24, Z+4	; 0x04
     bc2:	c8 17       	cp	r28, r24
     bc4:	30 f5       	brcc	.+76     	; 0xc12 <udc_process_setup+0x1e8>
		return false;
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
     bc6:	60 e0       	ldi	r22, 0x00	; 0
     bc8:	8c 2f       	mov	r24, r28
     bca:	27 de       	rcall	.-946    	; 0x81a <udc_update_iface_desc>
     bcc:	08 2f       	mov	r16, r24
     bce:	88 23       	and	r24, r24
     bd0:	09 f4       	brne	.+2      	; 0xbd4 <udc_process_setup+0x1aa>
     bd2:	33 c1       	rjmp	.+614    	; 0xe3a <udc_process_setup+0x410>
		return false;
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
     bd4:	ce 01       	movw	r24, r28
     bd6:	99 27       	eor	r25, r25
     bd8:	88 0f       	add	r24, r24
     bda:	99 1f       	adc	r25, r25
     bdc:	d7 01       	movw	r26, r14
     bde:	12 96       	adiw	r26, 0x02	; 2
     be0:	ed 91       	ld	r30, X+
     be2:	fc 91       	ld	r31, X
     be4:	13 97       	sbiw	r26, 0x03	; 3
     be6:	e8 0f       	add	r30, r24
     be8:	f9 1f       	adc	r31, r25
	udc_iface_setting = udi_api->getsetting();
     bea:	01 90       	ld	r0, Z+
     bec:	f0 81       	ld	r31, Z
     bee:	e0 2d       	mov	r30, r0
     bf0:	06 80       	ldd	r0, Z+6	; 0x06
     bf2:	f7 81       	ldd	r31, Z+7	; 0x07
     bf4:	e0 2d       	mov	r30, r0
     bf6:	19 95       	eicall
     bf8:	80 93 d0 21 	sts	0x21D0, r24

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
     bfc:	61 e0       	ldi	r22, 0x01	; 1
     bfe:	70 e0       	ldi	r23, 0x00	; 0
     c00:	80 ed       	ldi	r24, 0xD0	; 208
     c02:	91 e2       	ldi	r25, 0x21	; 33
     c04:	0e 94 48 11 	call	0x2290	; 0x2290 <udd_set_setup_payload>
     c08:	18 c1       	rjmp	.+560    	; 0xe3a <udc_process_setup+0x410>
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
		return false; // Error in request
     c0a:	00 e0       	ldi	r16, 0x00	; 0
     c0c:	16 c1       	rjmp	.+556    	; 0xe3a <udc_process_setup+0x410>
	}
	if (!udc_num_configuration) {
		return false; // The device is not is configured state yet
     c0e:	00 e0       	ldi	r16, 0x00	; 0
     c10:	14 c1       	rjmp	.+552    	; 0xe3a <udc_process_setup+0x410>
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
		return false;
     c12:	00 e0       	ldi	r16, 0x00	; 0
     c14:	12 c1       	rjmp	.+548    	; 0xe3a <udc_process_setup+0x410>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
     c16:	22 30       	cpi	r18, 0x02	; 2
     c18:	09 f0       	breq	.+2      	; 0xc1c <udc_process_setup+0x1f2>
     c1a:	11 c1       	rjmp	.+546    	; 0xe3e <udc_process_setup+0x414>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
     c1c:	20 91 4b 23 	lds	r18, 0x234B
     c20:	21 11       	cpse	r18, r1
     c22:	06 c1       	rjmp	.+524    	; 0xe30 <udc_process_setup+0x406>
 */
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
     c24:	02 97       	sbiw	r24, 0x02	; 2
     c26:	89 f4       	brne	.+34     	; 0xc4a <udc_process_setup+0x220>
		return false;
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
     c28:	80 91 4e 23 	lds	r24, 0x234E
     c2c:	0e 94 b2 11 	call	0x2364	; 0x2364 <udd_ep_is_halted>
     c30:	90 e0       	ldi	r25, 0x00	; 0
     c32:	80 93 c8 21 	sts	0x21C8, r24
     c36:	90 93 c9 21 	sts	0x21C9, r25
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
     c3a:	62 e0       	ldi	r22, 0x02	; 2
     c3c:	70 e0       	ldi	r23, 0x00	; 0
     c3e:	88 ec       	ldi	r24, 0xC8	; 200
     c40:	91 e2       	ldi	r25, 0x21	; 33
     c42:	0e 94 48 11 	call	0x2290	; 0x2290 <udd_set_setup_payload>
			sizeof(udc_ep_status));
	return true;
     c46:	01 e0       	ldi	r16, 0x01	; 1
     c48:	f8 c0       	rjmp	.+496    	; 0xe3a <udc_process_setup+0x410>
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
		return false;
     c4a:	00 e0       	ldi	r16, 0x00	; 0
     c4c:	f6 c0       	rjmp	.+492    	; 0xe3a <udc_process_setup+0x410>
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
     c4e:	2f 71       	andi	r18, 0x1F	; 31
     c50:	09 f0       	breq	.+2      	; 0xc54 <udc_process_setup+0x22a>
     c52:	91 c0       	rjmp	.+290    	; 0xd76 <udc_process_setup+0x34c>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
     c54:	80 91 4b 23 	lds	r24, 0x234B
     c58:	83 30       	cpi	r24, 0x03	; 3
     c5a:	09 f4       	brne	.+2      	; 0xc5e <udc_process_setup+0x234>
     c5c:	eb c0       	rjmp	.+470    	; 0xe34 <udc_process_setup+0x40a>
     c5e:	18 f4       	brcc	.+6      	; 0xc66 <udc_process_setup+0x23c>
     c60:	81 30       	cpi	r24, 0x01	; 1
     c62:	b1 f0       	breq	.+44     	; 0xc90 <udc_process_setup+0x266>
     c64:	88 c0       	rjmp	.+272    	; 0xd76 <udc_process_setup+0x34c>
     c66:	85 30       	cpi	r24, 0x05	; 5
     c68:	19 f0       	breq	.+6      	; 0xc70 <udc_process_setup+0x246>
     c6a:	89 30       	cpi	r24, 0x09	; 9
     c6c:	61 f1       	breq	.+88     	; 0xcc6 <udc_process_setup+0x29c>
     c6e:	83 c0       	rjmp	.+262    	; 0xd76 <udc_process_setup+0x34c>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
     c70:	80 91 50 23 	lds	r24, 0x2350
     c74:	90 91 51 23 	lds	r25, 0x2351
     c78:	89 2b       	or	r24, r25
     c7a:	41 f4       	brne	.+16     	; 0xc8c <udc_process_setup+0x262>
		return false;
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
     c7c:	87 e0       	ldi	r24, 0x07	; 7
     c7e:	94 e0       	ldi	r25, 0x04	; 4
     c80:	80 93 56 23 	sts	0x2356, r24
     c84:	90 93 57 23 	sts	0x2357, r25
	return true;
     c88:	01 e0       	ldi	r16, 0x01	; 1
     c8a:	d7 c0       	rjmp	.+430    	; 0xe3a <udc_process_setup+0x410>
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
     c8c:	00 e0       	ldi	r16, 0x00	; 0
     c8e:	d5 c0       	rjmp	.+426    	; 0xe3a <udc_process_setup+0x410>
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
     c90:	80 91 50 23 	lds	r24, 0x2350
     c94:	90 91 51 23 	lds	r25, 0x2351
     c98:	89 2b       	or	r24, r25
     c9a:	89 f4       	brne	.+34     	; 0xcbe <udc_process_setup+0x294>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
     c9c:	80 91 4c 23 	lds	r24, 0x234C
     ca0:	90 91 4d 23 	lds	r25, 0x234D
     ca4:	01 97       	sbiw	r24, 0x01	; 1
     ca6:	69 f4       	brne	.+26     	; 0xcc2 <udc_process_setup+0x298>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
     ca8:	80 91 d2 21 	lds	r24, 0x21D2
     cac:	90 91 d3 21 	lds	r25, 0x21D3
     cb0:	8d 7f       	andi	r24, 0xFD	; 253
     cb2:	80 93 d2 21 	sts	0x21D2, r24
     cb6:	90 93 d3 21 	sts	0x21D3, r25
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
#endif
		return true;
     cba:	01 e0       	ldi	r16, 0x01	; 1
     cbc:	be c0       	rjmp	.+380    	; 0xe3a <udc_process_setup+0x410>
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
     cbe:	00 e0       	ldi	r16, 0x00	; 0
     cc0:	bc c0       	rjmp	.+376    	; 0xe3a <udc_process_setup+0x410>
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
#endif
		return true;
	}
	return false;
     cc2:	00 e0       	ldi	r16, 0x00	; 0
     cc4:	ba c0       	rjmp	.+372    	; 0xe3a <udc_process_setup+0x410>
static bool udc_req_std_dev_set_configuration(void)
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
     cc6:	80 91 50 23 	lds	r24, 0x2350
     cca:	90 91 51 23 	lds	r25, 0x2351
     cce:	89 2b       	or	r24, r25
     cd0:	09 f0       	breq	.+2      	; 0xcd4 <udc_process_setup+0x2aa>
     cd2:	47 c0       	rjmp	.+142    	; 0xd62 <udc_process_setup+0x338>
		return false;
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
     cd4:	0e 94 3d 11 	call	0x227a	; 0x227a <udd_getaddress>
     cd8:	88 23       	and	r24, r24
     cda:	09 f4       	brne	.+2      	; 0xcde <udc_process_setup+0x2b4>
     cdc:	44 c0       	rjmp	.+136    	; 0xd66 <udc_process_setup+0x33c>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
     cde:	20 91 4c 23 	lds	r18, 0x234C
     ce2:	30 91 4d 23 	lds	r19, 0x234D
     ce6:	33 27       	eor	r19, r19
				udc_config.confdev_lsfs->bNumConfigurations) {
     ce8:	e0 91 18 20 	lds	r30, 0x2018
     cec:	f0 91 19 20 	lds	r31, 0x2019
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
     cf0:	81 89       	ldd	r24, Z+17	; 0x11
     cf2:	90 e0       	ldi	r25, 0x00	; 0
     cf4:	82 17       	cp	r24, r18
     cf6:	93 07       	cpc	r25, r19
     cf8:	c0 f1       	brcs	.+112    	; 0xd6a <udc_process_setup+0x340>
			return false;
		}
	}

	// Reset current configuration
	udc_reset();
     cfa:	41 de       	rcall	.-894    	; 0x97e <udc_reset>

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
     cfc:	80 91 4c 23 	lds	r24, 0x234C
     d00:	90 91 4d 23 	lds	r25, 0x234D
     d04:	80 93 ce 21 	sts	0x21CE, r24
	if (udc_num_configuration == 0) {
     d08:	88 23       	and	r24, r24
     d0a:	89 f1       	breq	.+98     	; 0xd6e <udc_process_setup+0x344>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
     d0c:	99 27       	eor	r25, r25
     d0e:	81 50       	subi	r24, 0x01	; 1
     d10:	90 4c       	sbci	r25, 0xC0	; 192
     d12:	88 0f       	add	r24, r24
     d14:	99 1f       	adc	r25, r25
     d16:	88 0f       	add	r24, r24
     d18:	99 1f       	adc	r25, r25
     d1a:	e0 91 1a 20 	lds	r30, 0x201A
     d1e:	f0 91 1b 20 	lds	r31, 0x201B
     d22:	e8 0f       	add	r30, r24
     d24:	f9 1f       	adc	r31, r25
     d26:	e0 93 cc 21 	sts	0x21CC, r30
     d2a:	f0 93 cd 21 	sts	0x21CD, r31
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
     d2e:	01 90       	ld	r0, Z+
     d30:	f0 81       	ld	r31, Z
     d32:	e0 2d       	mov	r30, r0
     d34:	84 81       	ldd	r24, Z+4	; 0x04
     d36:	88 23       	and	r24, r24
     d38:	e1 f0       	breq	.+56     	; 0xd72 <udc_process_setup+0x348>
     d3a:	c0 e0       	ldi	r28, 0x00	; 0
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
     d3c:	60 e0       	ldi	r22, 0x00	; 0
     d3e:	8c 2f       	mov	r24, r28
     d40:	e8 dd       	rcall	.-1072   	; 0x912 <udc_iface_enable>
     d42:	08 2f       	mov	r16, r24
     d44:	88 23       	and	r24, r24
     d46:	09 f4       	brne	.+2      	; 0xd4a <udc_process_setup+0x320>
     d48:	78 c0       	rjmp	.+240    	; 0xe3a <udc_process_setup+0x410>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
     d4a:	cf 5f       	subi	r28, 0xFF	; 255
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
     d4c:	e0 91 cc 21 	lds	r30, 0x21CC
     d50:	f0 91 cd 21 	lds	r31, 0x21CD
     d54:	01 90       	ld	r0, Z+
     d56:	f0 81       	ld	r31, Z
     d58:	e0 2d       	mov	r30, r0
     d5a:	84 81       	ldd	r24, Z+4	; 0x04
     d5c:	c8 17       	cp	r28, r24
     d5e:	70 f3       	brcs	.-36     	; 0xd3c <udc_process_setup+0x312>
     d60:	6c c0       	rjmp	.+216    	; 0xe3a <udc_process_setup+0x410>
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
		return false;
     d62:	00 e0       	ldi	r16, 0x00	; 0
     d64:	6a c0       	rjmp	.+212    	; 0xe3a <udc_process_setup+0x410>
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
		return false;
     d66:	00 e0       	ldi	r16, 0x00	; 0
     d68:	68 c0       	rjmp	.+208    	; 0xe3a <udc_process_setup+0x410>
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
				udc_config.confdev_lsfs->bNumConfigurations) {
			return false;
     d6a:	00 e0       	ldi	r16, 0x00	; 0
     d6c:	66 c0       	rjmp	.+204    	; 0xe3a <udc_process_setup+0x410>
	udc_reset();

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
	if (udc_num_configuration == 0) {
		return true; // Default empty configuration requested
     d6e:	01 e0       	ldi	r16, 0x01	; 1
     d70:	64 c0       	rjmp	.+200    	; 0xe3a <udc_process_setup+0x410>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
			return false;
		}
	}
	return true;
     d72:	01 e0       	ldi	r16, 0x01	; 1
     d74:	62 c0       	rjmp	.+196    	; 0xe3a <udc_process_setup+0x410>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
     d76:	21 30       	cpi	r18, 0x01	; 1
     d78:	09 f5       	brne	.+66     	; 0xdbc <udc_process_setup+0x392>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
     d7a:	80 91 4b 23 	lds	r24, 0x234B
     d7e:	8b 30       	cpi	r24, 0x0B	; 11
     d80:	e9 f4       	brne	.+58     	; 0xdbc <udc_process_setup+0x392>
 */
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
     d82:	80 91 50 23 	lds	r24, 0x2350
     d86:	90 91 51 23 	lds	r25, 0x2351
     d8a:	89 2b       	or	r24, r25
     d8c:	99 f4       	brne	.+38     	; 0xdb4 <udc_process_setup+0x38a>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
     d8e:	80 91 ce 21 	lds	r24, 0x21CE
     d92:	88 23       	and	r24, r24
     d94:	89 f0       	breq	.+34     	; 0xdb8 <udc_process_setup+0x38e>
		return false; // The device is not is configured state yet
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
     d96:	c0 91 4e 23 	lds	r28, 0x234E
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
     d9a:	d0 91 4c 23 	lds	r29, 0x234C

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
     d9e:	8c 2f       	mov	r24, r28
     da0:	76 dd       	rcall	.-1300   	; 0x88e <udc_iface_disable>
     da2:	08 2f       	mov	r16, r24
     da4:	88 23       	and	r24, r24
     da6:	09 f4       	brne	.+2      	; 0xdaa <udc_process_setup+0x380>
     da8:	48 c0       	rjmp	.+144    	; 0xe3a <udc_process_setup+0x410>
		return false;
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
     daa:	6d 2f       	mov	r22, r29
     dac:	8c 2f       	mov	r24, r28
     dae:	b1 dd       	rcall	.-1182   	; 0x912 <udc_iface_enable>
     db0:	08 2f       	mov	r16, r24
     db2:	43 c0       	rjmp	.+134    	; 0xe3a <udc_process_setup+0x410>
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
		return false; // Error in request
     db4:	00 e0       	ldi	r16, 0x00	; 0
     db6:	41 c0       	rjmp	.+130    	; 0xe3a <udc_process_setup+0x410>
	}
	if (!udc_num_configuration) {
		return false; // The device is not is configured state yet
     db8:	00 e0       	ldi	r16, 0x00	; 0
     dba:	3f c0       	rjmp	.+126    	; 0xe3a <udc_process_setup+0x410>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
     dbc:	22 30       	cpi	r18, 0x02	; 2
     dbe:	09 f0       	breq	.+2      	; 0xdc2 <udc_process_setup+0x398>
     dc0:	3e c0       	rjmp	.+124    	; 0xe3e <udc_process_setup+0x414>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
     dc2:	80 91 4b 23 	lds	r24, 0x234B
     dc6:	81 30       	cpi	r24, 0x01	; 1
     dc8:	19 f0       	breq	.+6      	; 0xdd0 <udc_process_setup+0x3a6>
     dca:	83 30       	cpi	r24, 0x03	; 3
     dcc:	b9 f0       	breq	.+46     	; 0xdfc <udc_process_setup+0x3d2>
     dce:	34 c0       	rjmp	.+104    	; 0xe38 <udc_process_setup+0x40e>
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
     dd0:	80 91 50 23 	lds	r24, 0x2350
     dd4:	90 91 51 23 	lds	r25, 0x2351
     dd8:	89 2b       	or	r24, r25
     dda:	61 f4       	brne	.+24     	; 0xdf4 <udc_process_setup+0x3ca>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
     ddc:	80 91 4c 23 	lds	r24, 0x234C
     de0:	90 91 4d 23 	lds	r25, 0x234D
     de4:	89 2b       	or	r24, r25
     de6:	41 f4       	brne	.+16     	; 0xdf8 <udc_process_setup+0x3ce>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
     de8:	80 91 4e 23 	lds	r24, 0x234E
     dec:	0e 94 cd 11 	call	0x239a	; 0x239a <udd_ep_clear_halt>
     df0:	08 2f       	mov	r16, r24
     df2:	23 c0       	rjmp	.+70     	; 0xe3a <udc_process_setup+0x410>
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
     df4:	00 e0       	ldi	r16, 0x00	; 0
     df6:	21 c0       	rjmp	.+66     	; 0xe3a <udc_process_setup+0x410>
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
	}
	return false;
     df8:	00 e0       	ldi	r16, 0x00	; 0
     dfa:	1f c0       	rjmp	.+62     	; 0xe3a <udc_process_setup+0x410>
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
     dfc:	80 91 50 23 	lds	r24, 0x2350
     e00:	90 91 51 23 	lds	r25, 0x2351
     e04:	89 2b       	or	r24, r25
     e06:	81 f4       	brne	.+32     	; 0xe28 <udc_process_setup+0x3fe>
		return false;
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
     e08:	80 91 4c 23 	lds	r24, 0x234C
     e0c:	90 91 4d 23 	lds	r25, 0x234D
     e10:	89 2b       	or	r24, r25
     e12:	61 f4       	brne	.+24     	; 0xe2c <udc_process_setup+0x402>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
     e14:	ce e4       	ldi	r28, 0x4E	; 78
     e16:	d3 e2       	ldi	r29, 0x23	; 35
     e18:	88 81       	ld	r24, Y
     e1a:	0e 94 7e 12 	call	0x24fc	; 0x24fc <udd_ep_abort>
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
     e1e:	88 81       	ld	r24, Y
     e20:	0e 94 d4 12 	call	0x25a8	; 0x25a8 <udd_ep_set_halt>
     e24:	08 2f       	mov	r16, r24
     e26:	09 c0       	rjmp	.+18     	; 0xe3a <udc_process_setup+0x410>
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
     e28:	00 e0       	ldi	r16, 0x00	; 0
     e2a:	07 c0       	rjmp	.+14     	; 0xe3a <udc_process_setup+0x410>
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
	}
	return false;
     e2c:	00 e0       	ldi	r16, 0x00	; 0
     e2e:	05 c0       	rjmp	.+10     	; 0xe3a <udc_process_setup+0x410>
				break;
			}
		}
#endif
	}
	return false;
     e30:	00 e0       	ldi	r16, 0x00	; 0
     e32:	03 c0       	rjmp	.+6      	; 0xe3a <udc_process_setup+0x410>
			case USB_REQ_SET_ADDRESS:
				return udc_req_std_dev_set_address();
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_dev_clear_feature();
			case USB_REQ_SET_FEATURE:
				return udc_req_std_dev_set_feature();
     e34:	00 e0       	ldi	r16, 0x00	; 0
     e36:	01 c0       	rjmp	.+2      	; 0xe3a <udc_process_setup+0x410>
				break;
			}
		}
#endif
	}
	return false;
     e38:	00 e0       	ldi	r16, 0x00	; 0
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
     e3a:	01 11       	cpse	r16, r1
     e3c:	89 c0       	rjmp	.+274    	; 0xf50 <udc_process_setup+0x526>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
     e3e:	80 91 4a 23 	lds	r24, 0x234A
     e42:	8f 71       	andi	r24, 0x1F	; 31
     e44:	81 30       	cpi	r24, 0x01	; 1
     e46:	c1 f5       	brne	.+112    	; 0xeb8 <udc_process_setup+0x48e>
static bool udc_req_iface(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
     e48:	80 91 ce 21 	lds	r24, 0x21CE
     e4c:	88 23       	and	r24, r24
     e4e:	a1 f1       	breq	.+104    	; 0xeb8 <udc_process_setup+0x48e>
		return false; // The device is not is configured state yet
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
     e50:	c0 91 4e 23 	lds	r28, 0x234E
     e54:	d0 91 4f 23 	lds	r29, 0x234F
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
     e58:	00 91 cc 21 	lds	r16, 0x21CC
     e5c:	10 91 cd 21 	lds	r17, 0x21CD
     e60:	d8 01       	movw	r26, r16
     e62:	ed 91       	ld	r30, X+
     e64:	fc 91       	ld	r31, X
     e66:	84 81       	ldd	r24, Z+4	; 0x04
     e68:	c8 17       	cp	r28, r24
     e6a:	30 f5       	brcc	.+76     	; 0xeb8 <udc_process_setup+0x48e>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
     e6c:	60 e0       	ldi	r22, 0x00	; 0
     e6e:	8c 2f       	mov	r24, r28
     e70:	d4 dc       	rcall	.-1624   	; 0x81a <udc_update_iface_desc>
     e72:	88 23       	and	r24, r24
     e74:	09 f1       	breq	.+66     	; 0xeb8 <udc_process_setup+0x48e>
		return false;
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
     e76:	ce 01       	movw	r24, r28
     e78:	99 27       	eor	r25, r25
     e7a:	88 0f       	add	r24, r24
     e7c:	99 1f       	adc	r25, r25
     e7e:	d8 01       	movw	r26, r16
     e80:	12 96       	adiw	r26, 0x02	; 2
     e82:	ed 91       	ld	r30, X+
     e84:	fc 91       	ld	r31, X
     e86:	13 97       	sbiw	r26, 0x03	; 3
     e88:	e8 0f       	add	r30, r24
     e8a:	f9 1f       	adc	r31, r25
     e8c:	00 81       	ld	r16, Z
     e8e:	11 81       	ldd	r17, Z+1	; 0x01
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
     e90:	d8 01       	movw	r26, r16
     e92:	16 96       	adiw	r26, 0x06	; 6
     e94:	ed 91       	ld	r30, X+
     e96:	fc 91       	ld	r31, X
     e98:	17 97       	sbiw	r26, 0x07	; 7
     e9a:	19 95       	eicall
     e9c:	68 2f       	mov	r22, r24
     e9e:	8c 2f       	mov	r24, r28
     ea0:	bc dc       	rcall	.-1672   	; 0x81a <udc_update_iface_desc>
     ea2:	88 23       	and	r24, r24
     ea4:	49 f0       	breq	.+18     	; 0xeb8 <udc_process_setup+0x48e>
		return false;
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
     ea6:	d8 01       	movw	r26, r16
     ea8:	14 96       	adiw	r26, 0x04	; 4
     eaa:	ed 91       	ld	r30, X+
     eac:	fc 91       	ld	r31, X
     eae:	15 97       	sbiw	r26, 0x05	; 5
     eb0:	19 95       	eicall
     eb2:	08 2f       	mov	r16, r24
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
		if (udc_req_iface()) {
     eb4:	81 11       	cpse	r24, r1
     eb6:	4c c0       	rjmp	.+152    	; 0xf50 <udc_process_setup+0x526>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
     eb8:	80 91 4a 23 	lds	r24, 0x234A
     ebc:	8f 71       	andi	r24, 0x1F	; 31
     ebe:	82 30       	cpi	r24, 0x02	; 2
     ec0:	d9 f5       	brne	.+118    	; 0xf38 <udc_process_setup+0x50e>
static bool udc_req_ep(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
     ec2:	80 91 ce 21 	lds	r24, 0x21CE
     ec6:	88 23       	and	r24, r24
     ec8:	89 f1       	breq	.+98     	; 0xf2c <udc_process_setup+0x502>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
     eca:	e0 91 cc 21 	lds	r30, 0x21CC
     ece:	f0 91 cd 21 	lds	r31, 0x21CD
     ed2:	a0 81       	ld	r26, Z
     ed4:	b1 81       	ldd	r27, Z+1	; 0x01
     ed6:	14 96       	adiw	r26, 0x04	; 4
     ed8:	8c 91       	ld	r24, X
     eda:	88 23       	and	r24, r24
     edc:	49 f1       	breq	.+82     	; 0xf30 <udc_process_setup+0x506>
     ede:	10 e0       	ldi	r17, 0x00	; 0
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
     ee0:	21 2f       	mov	r18, r17
     ee2:	30 e0       	ldi	r19, 0x00	; 0
     ee4:	22 0f       	add	r18, r18
     ee6:	33 1f       	adc	r19, r19
     ee8:	02 80       	ldd	r0, Z+2	; 0x02
     eea:	f3 81       	ldd	r31, Z+3	; 0x03
     eec:	e0 2d       	mov	r30, r0
     eee:	e2 0f       	add	r30, r18
     ef0:	f3 1f       	adc	r31, r19
     ef2:	c0 81       	ld	r28, Z
     ef4:	d1 81       	ldd	r29, Z+1	; 0x01
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
     ef6:	ee 81       	ldd	r30, Y+6	; 0x06
     ef8:	ff 81       	ldd	r31, Y+7	; 0x07
     efa:	19 95       	eicall
     efc:	68 2f       	mov	r22, r24
     efe:	81 2f       	mov	r24, r17
     f00:	8c dc       	rcall	.-1768   	; 0x81a <udc_update_iface_desc>
     f02:	08 2f       	mov	r16, r24
     f04:	88 23       	and	r24, r24
     f06:	21 f1       	breq	.+72     	; 0xf50 <udc_process_setup+0x526>
			return false;
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
     f08:	ec 81       	ldd	r30, Y+4	; 0x04
     f0a:	fd 81       	ldd	r31, Y+5	; 0x05
     f0c:	19 95       	eicall
     f0e:	08 2f       	mov	r16, r24
     f10:	81 11       	cpse	r24, r1
     f12:	1e c0       	rjmp	.+60     	; 0xf50 <udc_process_setup+0x526>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
     f14:	1f 5f       	subi	r17, 0xFF	; 255
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
     f16:	e0 91 cc 21 	lds	r30, 0x21CC
     f1a:	f0 91 cd 21 	lds	r31, 0x21CD
     f1e:	a0 81       	ld	r26, Z
     f20:	b1 81       	ldd	r27, Z+1	; 0x01
     f22:	14 96       	adiw	r26, 0x04	; 4
     f24:	8c 91       	ld	r24, X
     f26:	18 17       	cp	r17, r24
     f28:	d8 f2       	brcs	.-74     	; 0xee0 <udc_process_setup+0x4b6>
     f2a:	12 c0       	rjmp	.+36     	; 0xf50 <udc_process_setup+0x526>
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
     f2c:	00 e0       	ldi	r16, 0x00	; 0
     f2e:	10 c0       	rjmp	.+32     	; 0xf50 <udc_process_setup+0x526>
		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
		}
	}
	return false;
     f30:	00 e0       	ldi	r16, 0x00	; 0
     f32:	0e c0       	rjmp	.+28     	; 0xf50 <udc_process_setup+0x526>
	udd_g_ctrlreq.callback = NULL;
	udd_g_ctrlreq.over_under_run = NULL;

	if (Udd_setup_is_in()) {
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error from USB host
     f34:	00 e0       	ldi	r16, 0x00	; 0
     f36:	0c c0       	rjmp	.+24     	; 0xf50 <udc_process_setup+0x526>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
     f38:	00 e0       	ldi	r16, 0x00	; 0
     f3a:	0a c0       	rjmp	.+20     	; 0xf50 <udc_process_setup+0x526>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
     f3c:	82 2f       	mov	r24, r18
     f3e:	80 76       	andi	r24, 0x60	; 96
     f40:	09 f0       	breq	.+2      	; 0xf44 <udc_process_setup+0x51a>
     f42:	7d cf       	rjmp	.-262    	; 0xe3e <udc_process_setup+0x414>
     f44:	84 ce       	rjmp	.-760    	; 0xc4e <udc_process_setup+0x224>
     f46:	32 2f       	mov	r19, r18
     f48:	30 76       	andi	r19, 0x60	; 96
     f4a:	09 f0       	breq	.+2      	; 0xf4e <udc_process_setup+0x524>
     f4c:	78 cf       	rjmp	.-272    	; 0xe3e <udc_process_setup+0x414>
     f4e:	8c cd       	rjmp	.-1256   	; 0xa68 <udc_process_setup+0x3e>
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
#endif
}
     f50:	80 2f       	mov	r24, r16
     f52:	df 91       	pop	r29
     f54:	cf 91       	pop	r28
     f56:	1f 91       	pop	r17
     f58:	0f 91       	pop	r16
     f5a:	ff 90       	pop	r15
     f5c:	ef 90       	pop	r14
     f5e:	08 95       	ret

00000f60 <__vector_14>:
 *
 * This function will handle interrupt on Timer Counter CO overflow and
 * call the callback function.
 */
ISR(TCC0_OVF_vect)
{
     f60:	1f 92       	push	r1
     f62:	0f 92       	push	r0
     f64:	0f b6       	in	r0, 0x3f	; 63
     f66:	0f 92       	push	r0
     f68:	11 24       	eor	r1, r1
     f6a:	0b b6       	in	r0, 0x3b	; 59
     f6c:	0f 92       	push	r0
     f6e:	2f 93       	push	r18
     f70:	3f 93       	push	r19
     f72:	4f 93       	push	r20
     f74:	5f 93       	push	r21
     f76:	6f 93       	push	r22
     f78:	7f 93       	push	r23
     f7a:	8f 93       	push	r24
     f7c:	9f 93       	push	r25
     f7e:	af 93       	push	r26
     f80:	bf 93       	push	r27
     f82:	ef 93       	push	r30
     f84:	ff 93       	push	r31
	if (tc_tcc0_ovf_callback) {
     f86:	e0 91 1a 22 	lds	r30, 0x221A
     f8a:	f0 91 1b 22 	lds	r31, 0x221B
     f8e:	30 97       	sbiw	r30, 0x00	; 0
     f90:	09 f0       	breq	.+2      	; 0xf94 <__vector_14+0x34>
		tc_tcc0_ovf_callback();
     f92:	19 95       	eicall
	}
}
     f94:	ff 91       	pop	r31
     f96:	ef 91       	pop	r30
     f98:	bf 91       	pop	r27
     f9a:	af 91       	pop	r26
     f9c:	9f 91       	pop	r25
     f9e:	8f 91       	pop	r24
     fa0:	7f 91       	pop	r23
     fa2:	6f 91       	pop	r22
     fa4:	5f 91       	pop	r21
     fa6:	4f 91       	pop	r20
     fa8:	3f 91       	pop	r19
     faa:	2f 91       	pop	r18
     fac:	0f 90       	pop	r0
     fae:	0b be       	out	0x3b, r0	; 59
     fb0:	0f 90       	pop	r0
     fb2:	0f be       	out	0x3f, r0	; 63
     fb4:	0f 90       	pop	r0
     fb6:	1f 90       	pop	r1
     fb8:	18 95       	reti

00000fba <__vector_15>:
 *
 * This function will handle interrupt on Timer Counter CO error and
 * call the callback function.
 */
ISR(TCC0_ERR_vect)
{
     fba:	1f 92       	push	r1
     fbc:	0f 92       	push	r0
     fbe:	0f b6       	in	r0, 0x3f	; 63
     fc0:	0f 92       	push	r0
     fc2:	11 24       	eor	r1, r1
     fc4:	0b b6       	in	r0, 0x3b	; 59
     fc6:	0f 92       	push	r0
     fc8:	2f 93       	push	r18
     fca:	3f 93       	push	r19
     fcc:	4f 93       	push	r20
     fce:	5f 93       	push	r21
     fd0:	6f 93       	push	r22
     fd2:	7f 93       	push	r23
     fd4:	8f 93       	push	r24
     fd6:	9f 93       	push	r25
     fd8:	af 93       	push	r26
     fda:	bf 93       	push	r27
     fdc:	ef 93       	push	r30
     fde:	ff 93       	push	r31
	if (tc_tcc0_err_callback) {
     fe0:	e0 91 18 22 	lds	r30, 0x2218
     fe4:	f0 91 19 22 	lds	r31, 0x2219
     fe8:	30 97       	sbiw	r30, 0x00	; 0
     fea:	09 f0       	breq	.+2      	; 0xfee <__vector_15+0x34>
		tc_tcc0_err_callback();
     fec:	19 95       	eicall
	}
}
     fee:	ff 91       	pop	r31
     ff0:	ef 91       	pop	r30
     ff2:	bf 91       	pop	r27
     ff4:	af 91       	pop	r26
     ff6:	9f 91       	pop	r25
     ff8:	8f 91       	pop	r24
     ffa:	7f 91       	pop	r23
     ffc:	6f 91       	pop	r22
     ffe:	5f 91       	pop	r21
    1000:	4f 91       	pop	r20
    1002:	3f 91       	pop	r19
    1004:	2f 91       	pop	r18
    1006:	0f 90       	pop	r0
    1008:	0b be       	out	0x3b, r0	; 59
    100a:	0f 90       	pop	r0
    100c:	0f be       	out	0x3f, r0	; 63
    100e:	0f 90       	pop	r0
    1010:	1f 90       	pop	r1
    1012:	18 95       	reti

00001014 <__vector_16>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC0_CCA_vect)
{
    1014:	1f 92       	push	r1
    1016:	0f 92       	push	r0
    1018:	0f b6       	in	r0, 0x3f	; 63
    101a:	0f 92       	push	r0
    101c:	11 24       	eor	r1, r1
    101e:	0b b6       	in	r0, 0x3b	; 59
    1020:	0f 92       	push	r0
    1022:	2f 93       	push	r18
    1024:	3f 93       	push	r19
    1026:	4f 93       	push	r20
    1028:	5f 93       	push	r21
    102a:	6f 93       	push	r22
    102c:	7f 93       	push	r23
    102e:	8f 93       	push	r24
    1030:	9f 93       	push	r25
    1032:	af 93       	push	r26
    1034:	bf 93       	push	r27
    1036:	ef 93       	push	r30
    1038:	ff 93       	push	r31
	if (tc_tcc0_cca_callback) {
    103a:	e0 91 16 22 	lds	r30, 0x2216
    103e:	f0 91 17 22 	lds	r31, 0x2217
    1042:	30 97       	sbiw	r30, 0x00	; 0
    1044:	09 f0       	breq	.+2      	; 0x1048 <__vector_16+0x34>
		tc_tcc0_cca_callback();
    1046:	19 95       	eicall
	}
}
    1048:	ff 91       	pop	r31
    104a:	ef 91       	pop	r30
    104c:	bf 91       	pop	r27
    104e:	af 91       	pop	r26
    1050:	9f 91       	pop	r25
    1052:	8f 91       	pop	r24
    1054:	7f 91       	pop	r23
    1056:	6f 91       	pop	r22
    1058:	5f 91       	pop	r21
    105a:	4f 91       	pop	r20
    105c:	3f 91       	pop	r19
    105e:	2f 91       	pop	r18
    1060:	0f 90       	pop	r0
    1062:	0b be       	out	0x3b, r0	; 59
    1064:	0f 90       	pop	r0
    1066:	0f be       	out	0x3f, r0	; 63
    1068:	0f 90       	pop	r0
    106a:	1f 90       	pop	r1
    106c:	18 95       	reti

0000106e <__vector_17>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC0_CCB_vect)
{
    106e:	1f 92       	push	r1
    1070:	0f 92       	push	r0
    1072:	0f b6       	in	r0, 0x3f	; 63
    1074:	0f 92       	push	r0
    1076:	11 24       	eor	r1, r1
    1078:	0b b6       	in	r0, 0x3b	; 59
    107a:	0f 92       	push	r0
    107c:	2f 93       	push	r18
    107e:	3f 93       	push	r19
    1080:	4f 93       	push	r20
    1082:	5f 93       	push	r21
    1084:	6f 93       	push	r22
    1086:	7f 93       	push	r23
    1088:	8f 93       	push	r24
    108a:	9f 93       	push	r25
    108c:	af 93       	push	r26
    108e:	bf 93       	push	r27
    1090:	ef 93       	push	r30
    1092:	ff 93       	push	r31
	if (tc_tcc0_ccb_callback) {
    1094:	e0 91 14 22 	lds	r30, 0x2214
    1098:	f0 91 15 22 	lds	r31, 0x2215
    109c:	30 97       	sbiw	r30, 0x00	; 0
    109e:	09 f0       	breq	.+2      	; 0x10a2 <__vector_17+0x34>
		tc_tcc0_ccb_callback();
    10a0:	19 95       	eicall
	}
}
    10a2:	ff 91       	pop	r31
    10a4:	ef 91       	pop	r30
    10a6:	bf 91       	pop	r27
    10a8:	af 91       	pop	r26
    10aa:	9f 91       	pop	r25
    10ac:	8f 91       	pop	r24
    10ae:	7f 91       	pop	r23
    10b0:	6f 91       	pop	r22
    10b2:	5f 91       	pop	r21
    10b4:	4f 91       	pop	r20
    10b6:	3f 91       	pop	r19
    10b8:	2f 91       	pop	r18
    10ba:	0f 90       	pop	r0
    10bc:	0b be       	out	0x3b, r0	; 59
    10be:	0f 90       	pop	r0
    10c0:	0f be       	out	0x3f, r0	; 63
    10c2:	0f 90       	pop	r0
    10c4:	1f 90       	pop	r1
    10c6:	18 95       	reti

000010c8 <__vector_18>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureC and
 * call the callback function.
 */
ISR(TCC0_CCC_vect)
{
    10c8:	1f 92       	push	r1
    10ca:	0f 92       	push	r0
    10cc:	0f b6       	in	r0, 0x3f	; 63
    10ce:	0f 92       	push	r0
    10d0:	11 24       	eor	r1, r1
    10d2:	0b b6       	in	r0, 0x3b	; 59
    10d4:	0f 92       	push	r0
    10d6:	2f 93       	push	r18
    10d8:	3f 93       	push	r19
    10da:	4f 93       	push	r20
    10dc:	5f 93       	push	r21
    10de:	6f 93       	push	r22
    10e0:	7f 93       	push	r23
    10e2:	8f 93       	push	r24
    10e4:	9f 93       	push	r25
    10e6:	af 93       	push	r26
    10e8:	bf 93       	push	r27
    10ea:	ef 93       	push	r30
    10ec:	ff 93       	push	r31
	if (tc_tcc0_ccc_callback) {
    10ee:	e0 91 12 22 	lds	r30, 0x2212
    10f2:	f0 91 13 22 	lds	r31, 0x2213
    10f6:	30 97       	sbiw	r30, 0x00	; 0
    10f8:	09 f0       	breq	.+2      	; 0x10fc <__vector_18+0x34>
		tc_tcc0_ccc_callback();
    10fa:	19 95       	eicall
	}
}
    10fc:	ff 91       	pop	r31
    10fe:	ef 91       	pop	r30
    1100:	bf 91       	pop	r27
    1102:	af 91       	pop	r26
    1104:	9f 91       	pop	r25
    1106:	8f 91       	pop	r24
    1108:	7f 91       	pop	r23
    110a:	6f 91       	pop	r22
    110c:	5f 91       	pop	r21
    110e:	4f 91       	pop	r20
    1110:	3f 91       	pop	r19
    1112:	2f 91       	pop	r18
    1114:	0f 90       	pop	r0
    1116:	0b be       	out	0x3b, r0	; 59
    1118:	0f 90       	pop	r0
    111a:	0f be       	out	0x3f, r0	; 63
    111c:	0f 90       	pop	r0
    111e:	1f 90       	pop	r1
    1120:	18 95       	reti

00001122 <__vector_19>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureD and
 * call the callback function.
 */
ISR(TCC0_CCD_vect)
{
    1122:	1f 92       	push	r1
    1124:	0f 92       	push	r0
    1126:	0f b6       	in	r0, 0x3f	; 63
    1128:	0f 92       	push	r0
    112a:	11 24       	eor	r1, r1
    112c:	0b b6       	in	r0, 0x3b	; 59
    112e:	0f 92       	push	r0
    1130:	2f 93       	push	r18
    1132:	3f 93       	push	r19
    1134:	4f 93       	push	r20
    1136:	5f 93       	push	r21
    1138:	6f 93       	push	r22
    113a:	7f 93       	push	r23
    113c:	8f 93       	push	r24
    113e:	9f 93       	push	r25
    1140:	af 93       	push	r26
    1142:	bf 93       	push	r27
    1144:	ef 93       	push	r30
    1146:	ff 93       	push	r31
	if (tc_tcc0_ccd_callback) {
    1148:	e0 91 10 22 	lds	r30, 0x2210
    114c:	f0 91 11 22 	lds	r31, 0x2211
    1150:	30 97       	sbiw	r30, 0x00	; 0
    1152:	09 f0       	breq	.+2      	; 0x1156 <__vector_19+0x34>
		tc_tcc0_ccd_callback();
    1154:	19 95       	eicall
	}
}
    1156:	ff 91       	pop	r31
    1158:	ef 91       	pop	r30
    115a:	bf 91       	pop	r27
    115c:	af 91       	pop	r26
    115e:	9f 91       	pop	r25
    1160:	8f 91       	pop	r24
    1162:	7f 91       	pop	r23
    1164:	6f 91       	pop	r22
    1166:	5f 91       	pop	r21
    1168:	4f 91       	pop	r20
    116a:	3f 91       	pop	r19
    116c:	2f 91       	pop	r18
    116e:	0f 90       	pop	r0
    1170:	0b be       	out	0x3b, r0	; 59
    1172:	0f 90       	pop	r0
    1174:	0f be       	out	0x3f, r0	; 63
    1176:	0f 90       	pop	r0
    1178:	1f 90       	pop	r1
    117a:	18 95       	reti

0000117c <__vector_20>:
 *
 * This function will handle interrupt on Timer Counter C1 overflow and
 * call the callback function.
 */
ISR(TCC1_OVF_vect)
{
    117c:	1f 92       	push	r1
    117e:	0f 92       	push	r0
    1180:	0f b6       	in	r0, 0x3f	; 63
    1182:	0f 92       	push	r0
    1184:	11 24       	eor	r1, r1
    1186:	0b b6       	in	r0, 0x3b	; 59
    1188:	0f 92       	push	r0
    118a:	2f 93       	push	r18
    118c:	3f 93       	push	r19
    118e:	4f 93       	push	r20
    1190:	5f 93       	push	r21
    1192:	6f 93       	push	r22
    1194:	7f 93       	push	r23
    1196:	8f 93       	push	r24
    1198:	9f 93       	push	r25
    119a:	af 93       	push	r26
    119c:	bf 93       	push	r27
    119e:	ef 93       	push	r30
    11a0:	ff 93       	push	r31
	if (tc_tcc1_ovf_callback) {
    11a2:	e0 91 0e 22 	lds	r30, 0x220E
    11a6:	f0 91 0f 22 	lds	r31, 0x220F
    11aa:	30 97       	sbiw	r30, 0x00	; 0
    11ac:	09 f0       	breq	.+2      	; 0x11b0 <__vector_20+0x34>
		tc_tcc1_ovf_callback();
    11ae:	19 95       	eicall
	}
}
    11b0:	ff 91       	pop	r31
    11b2:	ef 91       	pop	r30
    11b4:	bf 91       	pop	r27
    11b6:	af 91       	pop	r26
    11b8:	9f 91       	pop	r25
    11ba:	8f 91       	pop	r24
    11bc:	7f 91       	pop	r23
    11be:	6f 91       	pop	r22
    11c0:	5f 91       	pop	r21
    11c2:	4f 91       	pop	r20
    11c4:	3f 91       	pop	r19
    11c6:	2f 91       	pop	r18
    11c8:	0f 90       	pop	r0
    11ca:	0b be       	out	0x3b, r0	; 59
    11cc:	0f 90       	pop	r0
    11ce:	0f be       	out	0x3f, r0	; 63
    11d0:	0f 90       	pop	r0
    11d2:	1f 90       	pop	r1
    11d4:	18 95       	reti

000011d6 <__vector_21>:
 *
 * This function will handle interrupt on Timer Counter C1 error and
 * call the callback function.
 */
ISR(TCC1_ERR_vect)
{
    11d6:	1f 92       	push	r1
    11d8:	0f 92       	push	r0
    11da:	0f b6       	in	r0, 0x3f	; 63
    11dc:	0f 92       	push	r0
    11de:	11 24       	eor	r1, r1
    11e0:	0b b6       	in	r0, 0x3b	; 59
    11e2:	0f 92       	push	r0
    11e4:	2f 93       	push	r18
    11e6:	3f 93       	push	r19
    11e8:	4f 93       	push	r20
    11ea:	5f 93       	push	r21
    11ec:	6f 93       	push	r22
    11ee:	7f 93       	push	r23
    11f0:	8f 93       	push	r24
    11f2:	9f 93       	push	r25
    11f4:	af 93       	push	r26
    11f6:	bf 93       	push	r27
    11f8:	ef 93       	push	r30
    11fa:	ff 93       	push	r31
	if (tc_tcc1_err_callback) {
    11fc:	e0 91 0c 22 	lds	r30, 0x220C
    1200:	f0 91 0d 22 	lds	r31, 0x220D
    1204:	30 97       	sbiw	r30, 0x00	; 0
    1206:	09 f0       	breq	.+2      	; 0x120a <__vector_21+0x34>
		tc_tcc1_err_callback();
    1208:	19 95       	eicall
	}
}
    120a:	ff 91       	pop	r31
    120c:	ef 91       	pop	r30
    120e:	bf 91       	pop	r27
    1210:	af 91       	pop	r26
    1212:	9f 91       	pop	r25
    1214:	8f 91       	pop	r24
    1216:	7f 91       	pop	r23
    1218:	6f 91       	pop	r22
    121a:	5f 91       	pop	r21
    121c:	4f 91       	pop	r20
    121e:	3f 91       	pop	r19
    1220:	2f 91       	pop	r18
    1222:	0f 90       	pop	r0
    1224:	0b be       	out	0x3b, r0	; 59
    1226:	0f 90       	pop	r0
    1228:	0f be       	out	0x3f, r0	; 63
    122a:	0f 90       	pop	r0
    122c:	1f 90       	pop	r1
    122e:	18 95       	reti

00001230 <__vector_22>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC1_CCA_vect)
{
    1230:	1f 92       	push	r1
    1232:	0f 92       	push	r0
    1234:	0f b6       	in	r0, 0x3f	; 63
    1236:	0f 92       	push	r0
    1238:	11 24       	eor	r1, r1
    123a:	0b b6       	in	r0, 0x3b	; 59
    123c:	0f 92       	push	r0
    123e:	2f 93       	push	r18
    1240:	3f 93       	push	r19
    1242:	4f 93       	push	r20
    1244:	5f 93       	push	r21
    1246:	6f 93       	push	r22
    1248:	7f 93       	push	r23
    124a:	8f 93       	push	r24
    124c:	9f 93       	push	r25
    124e:	af 93       	push	r26
    1250:	bf 93       	push	r27
    1252:	ef 93       	push	r30
    1254:	ff 93       	push	r31
	if (tc_tcc1_cca_callback) {
    1256:	e0 91 0a 22 	lds	r30, 0x220A
    125a:	f0 91 0b 22 	lds	r31, 0x220B
    125e:	30 97       	sbiw	r30, 0x00	; 0
    1260:	09 f0       	breq	.+2      	; 0x1264 <__vector_22+0x34>
		tc_tcc1_cca_callback();
    1262:	19 95       	eicall
	}
}
    1264:	ff 91       	pop	r31
    1266:	ef 91       	pop	r30
    1268:	bf 91       	pop	r27
    126a:	af 91       	pop	r26
    126c:	9f 91       	pop	r25
    126e:	8f 91       	pop	r24
    1270:	7f 91       	pop	r23
    1272:	6f 91       	pop	r22
    1274:	5f 91       	pop	r21
    1276:	4f 91       	pop	r20
    1278:	3f 91       	pop	r19
    127a:	2f 91       	pop	r18
    127c:	0f 90       	pop	r0
    127e:	0b be       	out	0x3b, r0	; 59
    1280:	0f 90       	pop	r0
    1282:	0f be       	out	0x3f, r0	; 63
    1284:	0f 90       	pop	r0
    1286:	1f 90       	pop	r1
    1288:	18 95       	reti

0000128a <__vector_23>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC1_CCB_vect)
{
    128a:	1f 92       	push	r1
    128c:	0f 92       	push	r0
    128e:	0f b6       	in	r0, 0x3f	; 63
    1290:	0f 92       	push	r0
    1292:	11 24       	eor	r1, r1
    1294:	0b b6       	in	r0, 0x3b	; 59
    1296:	0f 92       	push	r0
    1298:	2f 93       	push	r18
    129a:	3f 93       	push	r19
    129c:	4f 93       	push	r20
    129e:	5f 93       	push	r21
    12a0:	6f 93       	push	r22
    12a2:	7f 93       	push	r23
    12a4:	8f 93       	push	r24
    12a6:	9f 93       	push	r25
    12a8:	af 93       	push	r26
    12aa:	bf 93       	push	r27
    12ac:	ef 93       	push	r30
    12ae:	ff 93       	push	r31
	if (tc_tcc1_ccb_callback) {
    12b0:	e0 91 08 22 	lds	r30, 0x2208
    12b4:	f0 91 09 22 	lds	r31, 0x2209
    12b8:	30 97       	sbiw	r30, 0x00	; 0
    12ba:	09 f0       	breq	.+2      	; 0x12be <__vector_23+0x34>
		tc_tcc1_ccb_callback();
    12bc:	19 95       	eicall
	}
}
    12be:	ff 91       	pop	r31
    12c0:	ef 91       	pop	r30
    12c2:	bf 91       	pop	r27
    12c4:	af 91       	pop	r26
    12c6:	9f 91       	pop	r25
    12c8:	8f 91       	pop	r24
    12ca:	7f 91       	pop	r23
    12cc:	6f 91       	pop	r22
    12ce:	5f 91       	pop	r21
    12d0:	4f 91       	pop	r20
    12d2:	3f 91       	pop	r19
    12d4:	2f 91       	pop	r18
    12d6:	0f 90       	pop	r0
    12d8:	0b be       	out	0x3b, r0	; 59
    12da:	0f 90       	pop	r0
    12dc:	0f be       	out	0x3f, r0	; 63
    12de:	0f 90       	pop	r0
    12e0:	1f 90       	pop	r1
    12e2:	18 95       	reti

000012e4 <__vector_77>:
 *
 * This function will handle interrupt on Timer Counter D0 overflow and
 * call the callback function.
 */
ISR(TCD0_OVF_vect)
{
    12e4:	1f 92       	push	r1
    12e6:	0f 92       	push	r0
    12e8:	0f b6       	in	r0, 0x3f	; 63
    12ea:	0f 92       	push	r0
    12ec:	11 24       	eor	r1, r1
    12ee:	0b b6       	in	r0, 0x3b	; 59
    12f0:	0f 92       	push	r0
    12f2:	2f 93       	push	r18
    12f4:	3f 93       	push	r19
    12f6:	4f 93       	push	r20
    12f8:	5f 93       	push	r21
    12fa:	6f 93       	push	r22
    12fc:	7f 93       	push	r23
    12fe:	8f 93       	push	r24
    1300:	9f 93       	push	r25
    1302:	af 93       	push	r26
    1304:	bf 93       	push	r27
    1306:	ef 93       	push	r30
    1308:	ff 93       	push	r31
	if (tc_tcd0_ovf_callback) {
    130a:	e0 91 06 22 	lds	r30, 0x2206
    130e:	f0 91 07 22 	lds	r31, 0x2207
    1312:	30 97       	sbiw	r30, 0x00	; 0
    1314:	09 f0       	breq	.+2      	; 0x1318 <__vector_77+0x34>
		tc_tcd0_ovf_callback();
    1316:	19 95       	eicall
	}
}
    1318:	ff 91       	pop	r31
    131a:	ef 91       	pop	r30
    131c:	bf 91       	pop	r27
    131e:	af 91       	pop	r26
    1320:	9f 91       	pop	r25
    1322:	8f 91       	pop	r24
    1324:	7f 91       	pop	r23
    1326:	6f 91       	pop	r22
    1328:	5f 91       	pop	r21
    132a:	4f 91       	pop	r20
    132c:	3f 91       	pop	r19
    132e:	2f 91       	pop	r18
    1330:	0f 90       	pop	r0
    1332:	0b be       	out	0x3b, r0	; 59
    1334:	0f 90       	pop	r0
    1336:	0f be       	out	0x3f, r0	; 63
    1338:	0f 90       	pop	r0
    133a:	1f 90       	pop	r1
    133c:	18 95       	reti

0000133e <__vector_78>:
 *
 * This function will handle interrupt on Timer Counter D0 error and
 * call the callback function.
 */
ISR(TCD0_ERR_vect)
{
    133e:	1f 92       	push	r1
    1340:	0f 92       	push	r0
    1342:	0f b6       	in	r0, 0x3f	; 63
    1344:	0f 92       	push	r0
    1346:	11 24       	eor	r1, r1
    1348:	0b b6       	in	r0, 0x3b	; 59
    134a:	0f 92       	push	r0
    134c:	2f 93       	push	r18
    134e:	3f 93       	push	r19
    1350:	4f 93       	push	r20
    1352:	5f 93       	push	r21
    1354:	6f 93       	push	r22
    1356:	7f 93       	push	r23
    1358:	8f 93       	push	r24
    135a:	9f 93       	push	r25
    135c:	af 93       	push	r26
    135e:	bf 93       	push	r27
    1360:	ef 93       	push	r30
    1362:	ff 93       	push	r31
	if (tc_tcd0_err_callback) {
    1364:	e0 91 04 22 	lds	r30, 0x2204
    1368:	f0 91 05 22 	lds	r31, 0x2205
    136c:	30 97       	sbiw	r30, 0x00	; 0
    136e:	09 f0       	breq	.+2      	; 0x1372 <__vector_78+0x34>
		tc_tcd0_err_callback();
    1370:	19 95       	eicall
	}
}
    1372:	ff 91       	pop	r31
    1374:	ef 91       	pop	r30
    1376:	bf 91       	pop	r27
    1378:	af 91       	pop	r26
    137a:	9f 91       	pop	r25
    137c:	8f 91       	pop	r24
    137e:	7f 91       	pop	r23
    1380:	6f 91       	pop	r22
    1382:	5f 91       	pop	r21
    1384:	4f 91       	pop	r20
    1386:	3f 91       	pop	r19
    1388:	2f 91       	pop	r18
    138a:	0f 90       	pop	r0
    138c:	0b be       	out	0x3b, r0	; 59
    138e:	0f 90       	pop	r0
    1390:	0f be       	out	0x3f, r0	; 63
    1392:	0f 90       	pop	r0
    1394:	1f 90       	pop	r1
    1396:	18 95       	reti

00001398 <__vector_79>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD0_CCA_vect)
{
    1398:	1f 92       	push	r1
    139a:	0f 92       	push	r0
    139c:	0f b6       	in	r0, 0x3f	; 63
    139e:	0f 92       	push	r0
    13a0:	11 24       	eor	r1, r1
    13a2:	0b b6       	in	r0, 0x3b	; 59
    13a4:	0f 92       	push	r0
    13a6:	2f 93       	push	r18
    13a8:	3f 93       	push	r19
    13aa:	4f 93       	push	r20
    13ac:	5f 93       	push	r21
    13ae:	6f 93       	push	r22
    13b0:	7f 93       	push	r23
    13b2:	8f 93       	push	r24
    13b4:	9f 93       	push	r25
    13b6:	af 93       	push	r26
    13b8:	bf 93       	push	r27
    13ba:	ef 93       	push	r30
    13bc:	ff 93       	push	r31
	if (tc_tcd0_cca_callback) {
    13be:	e0 91 02 22 	lds	r30, 0x2202
    13c2:	f0 91 03 22 	lds	r31, 0x2203
    13c6:	30 97       	sbiw	r30, 0x00	; 0
    13c8:	09 f0       	breq	.+2      	; 0x13cc <__vector_79+0x34>
		tc_tcd0_cca_callback();
    13ca:	19 95       	eicall
	}
}
    13cc:	ff 91       	pop	r31
    13ce:	ef 91       	pop	r30
    13d0:	bf 91       	pop	r27
    13d2:	af 91       	pop	r26
    13d4:	9f 91       	pop	r25
    13d6:	8f 91       	pop	r24
    13d8:	7f 91       	pop	r23
    13da:	6f 91       	pop	r22
    13dc:	5f 91       	pop	r21
    13de:	4f 91       	pop	r20
    13e0:	3f 91       	pop	r19
    13e2:	2f 91       	pop	r18
    13e4:	0f 90       	pop	r0
    13e6:	0b be       	out	0x3b, r0	; 59
    13e8:	0f 90       	pop	r0
    13ea:	0f be       	out	0x3f, r0	; 63
    13ec:	0f 90       	pop	r0
    13ee:	1f 90       	pop	r1
    13f0:	18 95       	reti

000013f2 <__vector_80>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD0_CCB_vect)
{
    13f2:	1f 92       	push	r1
    13f4:	0f 92       	push	r0
    13f6:	0f b6       	in	r0, 0x3f	; 63
    13f8:	0f 92       	push	r0
    13fa:	11 24       	eor	r1, r1
    13fc:	0b b6       	in	r0, 0x3b	; 59
    13fe:	0f 92       	push	r0
    1400:	2f 93       	push	r18
    1402:	3f 93       	push	r19
    1404:	4f 93       	push	r20
    1406:	5f 93       	push	r21
    1408:	6f 93       	push	r22
    140a:	7f 93       	push	r23
    140c:	8f 93       	push	r24
    140e:	9f 93       	push	r25
    1410:	af 93       	push	r26
    1412:	bf 93       	push	r27
    1414:	ef 93       	push	r30
    1416:	ff 93       	push	r31
	if (tc_tcd0_ccb_callback) {
    1418:	e0 91 00 22 	lds	r30, 0x2200
    141c:	f0 91 01 22 	lds	r31, 0x2201
    1420:	30 97       	sbiw	r30, 0x00	; 0
    1422:	09 f0       	breq	.+2      	; 0x1426 <__vector_80+0x34>
		tc_tcd0_ccb_callback();
    1424:	19 95       	eicall
	}
}
    1426:	ff 91       	pop	r31
    1428:	ef 91       	pop	r30
    142a:	bf 91       	pop	r27
    142c:	af 91       	pop	r26
    142e:	9f 91       	pop	r25
    1430:	8f 91       	pop	r24
    1432:	7f 91       	pop	r23
    1434:	6f 91       	pop	r22
    1436:	5f 91       	pop	r21
    1438:	4f 91       	pop	r20
    143a:	3f 91       	pop	r19
    143c:	2f 91       	pop	r18
    143e:	0f 90       	pop	r0
    1440:	0b be       	out	0x3b, r0	; 59
    1442:	0f 90       	pop	r0
    1444:	0f be       	out	0x3f, r0	; 63
    1446:	0f 90       	pop	r0
    1448:	1f 90       	pop	r1
    144a:	18 95       	reti

0000144c <__vector_81>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCD0_CCC_vect)
{
    144c:	1f 92       	push	r1
    144e:	0f 92       	push	r0
    1450:	0f b6       	in	r0, 0x3f	; 63
    1452:	0f 92       	push	r0
    1454:	11 24       	eor	r1, r1
    1456:	0b b6       	in	r0, 0x3b	; 59
    1458:	0f 92       	push	r0
    145a:	2f 93       	push	r18
    145c:	3f 93       	push	r19
    145e:	4f 93       	push	r20
    1460:	5f 93       	push	r21
    1462:	6f 93       	push	r22
    1464:	7f 93       	push	r23
    1466:	8f 93       	push	r24
    1468:	9f 93       	push	r25
    146a:	af 93       	push	r26
    146c:	bf 93       	push	r27
    146e:	ef 93       	push	r30
    1470:	ff 93       	push	r31
	if (tc_tcd0_ccc_callback) {
    1472:	e0 91 fe 21 	lds	r30, 0x21FE
    1476:	f0 91 ff 21 	lds	r31, 0x21FF
    147a:	30 97       	sbiw	r30, 0x00	; 0
    147c:	09 f0       	breq	.+2      	; 0x1480 <__vector_81+0x34>
		tc_tcd0_ccc_callback();
    147e:	19 95       	eicall
	}
}
    1480:	ff 91       	pop	r31
    1482:	ef 91       	pop	r30
    1484:	bf 91       	pop	r27
    1486:	af 91       	pop	r26
    1488:	9f 91       	pop	r25
    148a:	8f 91       	pop	r24
    148c:	7f 91       	pop	r23
    148e:	6f 91       	pop	r22
    1490:	5f 91       	pop	r21
    1492:	4f 91       	pop	r20
    1494:	3f 91       	pop	r19
    1496:	2f 91       	pop	r18
    1498:	0f 90       	pop	r0
    149a:	0b be       	out	0x3b, r0	; 59
    149c:	0f 90       	pop	r0
    149e:	0f be       	out	0x3f, r0	; 63
    14a0:	0f 90       	pop	r0
    14a2:	1f 90       	pop	r1
    14a4:	18 95       	reti

000014a6 <__vector_82>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCD0_CCD_vect)
{
    14a6:	1f 92       	push	r1
    14a8:	0f 92       	push	r0
    14aa:	0f b6       	in	r0, 0x3f	; 63
    14ac:	0f 92       	push	r0
    14ae:	11 24       	eor	r1, r1
    14b0:	0b b6       	in	r0, 0x3b	; 59
    14b2:	0f 92       	push	r0
    14b4:	2f 93       	push	r18
    14b6:	3f 93       	push	r19
    14b8:	4f 93       	push	r20
    14ba:	5f 93       	push	r21
    14bc:	6f 93       	push	r22
    14be:	7f 93       	push	r23
    14c0:	8f 93       	push	r24
    14c2:	9f 93       	push	r25
    14c4:	af 93       	push	r26
    14c6:	bf 93       	push	r27
    14c8:	ef 93       	push	r30
    14ca:	ff 93       	push	r31
	if (tc_tcd0_ccd_callback) {
    14cc:	e0 91 fc 21 	lds	r30, 0x21FC
    14d0:	f0 91 fd 21 	lds	r31, 0x21FD
    14d4:	30 97       	sbiw	r30, 0x00	; 0
    14d6:	09 f0       	breq	.+2      	; 0x14da <__vector_82+0x34>
		tc_tcd0_ccd_callback();
    14d8:	19 95       	eicall
	}
}
    14da:	ff 91       	pop	r31
    14dc:	ef 91       	pop	r30
    14de:	bf 91       	pop	r27
    14e0:	af 91       	pop	r26
    14e2:	9f 91       	pop	r25
    14e4:	8f 91       	pop	r24
    14e6:	7f 91       	pop	r23
    14e8:	6f 91       	pop	r22
    14ea:	5f 91       	pop	r21
    14ec:	4f 91       	pop	r20
    14ee:	3f 91       	pop	r19
    14f0:	2f 91       	pop	r18
    14f2:	0f 90       	pop	r0
    14f4:	0b be       	out	0x3b, r0	; 59
    14f6:	0f 90       	pop	r0
    14f8:	0f be       	out	0x3f, r0	; 63
    14fa:	0f 90       	pop	r0
    14fc:	1f 90       	pop	r1
    14fe:	18 95       	reti

00001500 <__vector_83>:
 *
 * This function will handle interrupt on Timer Counter D1 overflow and
 * call the callback function.
 */
ISR(TCD1_OVF_vect)
{
    1500:	1f 92       	push	r1
    1502:	0f 92       	push	r0
    1504:	0f b6       	in	r0, 0x3f	; 63
    1506:	0f 92       	push	r0
    1508:	11 24       	eor	r1, r1
    150a:	0b b6       	in	r0, 0x3b	; 59
    150c:	0f 92       	push	r0
    150e:	2f 93       	push	r18
    1510:	3f 93       	push	r19
    1512:	4f 93       	push	r20
    1514:	5f 93       	push	r21
    1516:	6f 93       	push	r22
    1518:	7f 93       	push	r23
    151a:	8f 93       	push	r24
    151c:	9f 93       	push	r25
    151e:	af 93       	push	r26
    1520:	bf 93       	push	r27
    1522:	ef 93       	push	r30
    1524:	ff 93       	push	r31
	if (tc_tcd1_ovf_callback) {
    1526:	e0 91 fa 21 	lds	r30, 0x21FA
    152a:	f0 91 fb 21 	lds	r31, 0x21FB
    152e:	30 97       	sbiw	r30, 0x00	; 0
    1530:	09 f0       	breq	.+2      	; 0x1534 <__vector_83+0x34>
		tc_tcd1_ovf_callback();
    1532:	19 95       	eicall
	}
}
    1534:	ff 91       	pop	r31
    1536:	ef 91       	pop	r30
    1538:	bf 91       	pop	r27
    153a:	af 91       	pop	r26
    153c:	9f 91       	pop	r25
    153e:	8f 91       	pop	r24
    1540:	7f 91       	pop	r23
    1542:	6f 91       	pop	r22
    1544:	5f 91       	pop	r21
    1546:	4f 91       	pop	r20
    1548:	3f 91       	pop	r19
    154a:	2f 91       	pop	r18
    154c:	0f 90       	pop	r0
    154e:	0b be       	out	0x3b, r0	; 59
    1550:	0f 90       	pop	r0
    1552:	0f be       	out	0x3f, r0	; 63
    1554:	0f 90       	pop	r0
    1556:	1f 90       	pop	r1
    1558:	18 95       	reti

0000155a <__vector_84>:
 *
 * This function will handle interrupt on Timer Counter D1 error and
 * call the callback function.
 */
ISR(TCD1_ERR_vect)
{
    155a:	1f 92       	push	r1
    155c:	0f 92       	push	r0
    155e:	0f b6       	in	r0, 0x3f	; 63
    1560:	0f 92       	push	r0
    1562:	11 24       	eor	r1, r1
    1564:	0b b6       	in	r0, 0x3b	; 59
    1566:	0f 92       	push	r0
    1568:	2f 93       	push	r18
    156a:	3f 93       	push	r19
    156c:	4f 93       	push	r20
    156e:	5f 93       	push	r21
    1570:	6f 93       	push	r22
    1572:	7f 93       	push	r23
    1574:	8f 93       	push	r24
    1576:	9f 93       	push	r25
    1578:	af 93       	push	r26
    157a:	bf 93       	push	r27
    157c:	ef 93       	push	r30
    157e:	ff 93       	push	r31
	if (tc_tcd1_err_callback) {
    1580:	e0 91 f8 21 	lds	r30, 0x21F8
    1584:	f0 91 f9 21 	lds	r31, 0x21F9
    1588:	30 97       	sbiw	r30, 0x00	; 0
    158a:	09 f0       	breq	.+2      	; 0x158e <__vector_84+0x34>
		tc_tcd1_err_callback();
    158c:	19 95       	eicall
	}
}
    158e:	ff 91       	pop	r31
    1590:	ef 91       	pop	r30
    1592:	bf 91       	pop	r27
    1594:	af 91       	pop	r26
    1596:	9f 91       	pop	r25
    1598:	8f 91       	pop	r24
    159a:	7f 91       	pop	r23
    159c:	6f 91       	pop	r22
    159e:	5f 91       	pop	r21
    15a0:	4f 91       	pop	r20
    15a2:	3f 91       	pop	r19
    15a4:	2f 91       	pop	r18
    15a6:	0f 90       	pop	r0
    15a8:	0b be       	out	0x3b, r0	; 59
    15aa:	0f 90       	pop	r0
    15ac:	0f be       	out	0x3f, r0	; 63
    15ae:	0f 90       	pop	r0
    15b0:	1f 90       	pop	r1
    15b2:	18 95       	reti

000015b4 <__vector_85>:
 *
 * This function will handle interrupt on Timer Counter D1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD1_CCA_vect)
{
    15b4:	1f 92       	push	r1
    15b6:	0f 92       	push	r0
    15b8:	0f b6       	in	r0, 0x3f	; 63
    15ba:	0f 92       	push	r0
    15bc:	11 24       	eor	r1, r1
    15be:	0b b6       	in	r0, 0x3b	; 59
    15c0:	0f 92       	push	r0
    15c2:	2f 93       	push	r18
    15c4:	3f 93       	push	r19
    15c6:	4f 93       	push	r20
    15c8:	5f 93       	push	r21
    15ca:	6f 93       	push	r22
    15cc:	7f 93       	push	r23
    15ce:	8f 93       	push	r24
    15d0:	9f 93       	push	r25
    15d2:	af 93       	push	r26
    15d4:	bf 93       	push	r27
    15d6:	ef 93       	push	r30
    15d8:	ff 93       	push	r31
	if (tc_tcd1_cca_callback) {
    15da:	e0 91 f6 21 	lds	r30, 0x21F6
    15de:	f0 91 f7 21 	lds	r31, 0x21F7
    15e2:	30 97       	sbiw	r30, 0x00	; 0
    15e4:	09 f0       	breq	.+2      	; 0x15e8 <__vector_85+0x34>
		tc_tcd1_cca_callback();
    15e6:	19 95       	eicall
	}
}
    15e8:	ff 91       	pop	r31
    15ea:	ef 91       	pop	r30
    15ec:	bf 91       	pop	r27
    15ee:	af 91       	pop	r26
    15f0:	9f 91       	pop	r25
    15f2:	8f 91       	pop	r24
    15f4:	7f 91       	pop	r23
    15f6:	6f 91       	pop	r22
    15f8:	5f 91       	pop	r21
    15fa:	4f 91       	pop	r20
    15fc:	3f 91       	pop	r19
    15fe:	2f 91       	pop	r18
    1600:	0f 90       	pop	r0
    1602:	0b be       	out	0x3b, r0	; 59
    1604:	0f 90       	pop	r0
    1606:	0f be       	out	0x3f, r0	; 63
    1608:	0f 90       	pop	r0
    160a:	1f 90       	pop	r1
    160c:	18 95       	reti

0000160e <__vector_86>:
 *
 * This function will handle interrupt on Timer Counter D1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD1_CCB_vect)
{
    160e:	1f 92       	push	r1
    1610:	0f 92       	push	r0
    1612:	0f b6       	in	r0, 0x3f	; 63
    1614:	0f 92       	push	r0
    1616:	11 24       	eor	r1, r1
    1618:	0b b6       	in	r0, 0x3b	; 59
    161a:	0f 92       	push	r0
    161c:	2f 93       	push	r18
    161e:	3f 93       	push	r19
    1620:	4f 93       	push	r20
    1622:	5f 93       	push	r21
    1624:	6f 93       	push	r22
    1626:	7f 93       	push	r23
    1628:	8f 93       	push	r24
    162a:	9f 93       	push	r25
    162c:	af 93       	push	r26
    162e:	bf 93       	push	r27
    1630:	ef 93       	push	r30
    1632:	ff 93       	push	r31
	if (tc_tcd1_ccb_callback) {
    1634:	e0 91 f4 21 	lds	r30, 0x21F4
    1638:	f0 91 f5 21 	lds	r31, 0x21F5
    163c:	30 97       	sbiw	r30, 0x00	; 0
    163e:	09 f0       	breq	.+2      	; 0x1642 <__vector_86+0x34>
		tc_tcd1_ccb_callback();
    1640:	19 95       	eicall
	}
}
    1642:	ff 91       	pop	r31
    1644:	ef 91       	pop	r30
    1646:	bf 91       	pop	r27
    1648:	af 91       	pop	r26
    164a:	9f 91       	pop	r25
    164c:	8f 91       	pop	r24
    164e:	7f 91       	pop	r23
    1650:	6f 91       	pop	r22
    1652:	5f 91       	pop	r21
    1654:	4f 91       	pop	r20
    1656:	3f 91       	pop	r19
    1658:	2f 91       	pop	r18
    165a:	0f 90       	pop	r0
    165c:	0b be       	out	0x3b, r0	; 59
    165e:	0f 90       	pop	r0
    1660:	0f be       	out	0x3f, r0	; 63
    1662:	0f 90       	pop	r0
    1664:	1f 90       	pop	r1
    1666:	18 95       	reti

00001668 <__vector_47>:
 *
 * This function will handle interrupt on Timer Counter E0 overflow and
 * call the callback function.
 */
ISR(TCE0_OVF_vect)
{
    1668:	1f 92       	push	r1
    166a:	0f 92       	push	r0
    166c:	0f b6       	in	r0, 0x3f	; 63
    166e:	0f 92       	push	r0
    1670:	11 24       	eor	r1, r1
    1672:	0b b6       	in	r0, 0x3b	; 59
    1674:	0f 92       	push	r0
    1676:	2f 93       	push	r18
    1678:	3f 93       	push	r19
    167a:	4f 93       	push	r20
    167c:	5f 93       	push	r21
    167e:	6f 93       	push	r22
    1680:	7f 93       	push	r23
    1682:	8f 93       	push	r24
    1684:	9f 93       	push	r25
    1686:	af 93       	push	r26
    1688:	bf 93       	push	r27
    168a:	ef 93       	push	r30
    168c:	ff 93       	push	r31
	if (tc_tce0_ovf_callback) {
    168e:	e0 91 f2 21 	lds	r30, 0x21F2
    1692:	f0 91 f3 21 	lds	r31, 0x21F3
    1696:	30 97       	sbiw	r30, 0x00	; 0
    1698:	09 f0       	breq	.+2      	; 0x169c <__vector_47+0x34>
		tc_tce0_ovf_callback();
    169a:	19 95       	eicall
	}
}
    169c:	ff 91       	pop	r31
    169e:	ef 91       	pop	r30
    16a0:	bf 91       	pop	r27
    16a2:	af 91       	pop	r26
    16a4:	9f 91       	pop	r25
    16a6:	8f 91       	pop	r24
    16a8:	7f 91       	pop	r23
    16aa:	6f 91       	pop	r22
    16ac:	5f 91       	pop	r21
    16ae:	4f 91       	pop	r20
    16b0:	3f 91       	pop	r19
    16b2:	2f 91       	pop	r18
    16b4:	0f 90       	pop	r0
    16b6:	0b be       	out	0x3b, r0	; 59
    16b8:	0f 90       	pop	r0
    16ba:	0f be       	out	0x3f, r0	; 63
    16bc:	0f 90       	pop	r0
    16be:	1f 90       	pop	r1
    16c0:	18 95       	reti

000016c2 <__vector_48>:
 *
 * This function will handle interrupt on Timer Counter E0 error and
 * call the callback function.
 */
ISR(TCE0_ERR_vect)
{
    16c2:	1f 92       	push	r1
    16c4:	0f 92       	push	r0
    16c6:	0f b6       	in	r0, 0x3f	; 63
    16c8:	0f 92       	push	r0
    16ca:	11 24       	eor	r1, r1
    16cc:	0b b6       	in	r0, 0x3b	; 59
    16ce:	0f 92       	push	r0
    16d0:	2f 93       	push	r18
    16d2:	3f 93       	push	r19
    16d4:	4f 93       	push	r20
    16d6:	5f 93       	push	r21
    16d8:	6f 93       	push	r22
    16da:	7f 93       	push	r23
    16dc:	8f 93       	push	r24
    16de:	9f 93       	push	r25
    16e0:	af 93       	push	r26
    16e2:	bf 93       	push	r27
    16e4:	ef 93       	push	r30
    16e6:	ff 93       	push	r31
	if (tc_tce0_err_callback) {
    16e8:	e0 91 f0 21 	lds	r30, 0x21F0
    16ec:	f0 91 f1 21 	lds	r31, 0x21F1
    16f0:	30 97       	sbiw	r30, 0x00	; 0
    16f2:	09 f0       	breq	.+2      	; 0x16f6 <__vector_48+0x34>
		tc_tce0_err_callback();
    16f4:	19 95       	eicall
	}
}
    16f6:	ff 91       	pop	r31
    16f8:	ef 91       	pop	r30
    16fa:	bf 91       	pop	r27
    16fc:	af 91       	pop	r26
    16fe:	9f 91       	pop	r25
    1700:	8f 91       	pop	r24
    1702:	7f 91       	pop	r23
    1704:	6f 91       	pop	r22
    1706:	5f 91       	pop	r21
    1708:	4f 91       	pop	r20
    170a:	3f 91       	pop	r19
    170c:	2f 91       	pop	r18
    170e:	0f 90       	pop	r0
    1710:	0b be       	out	0x3b, r0	; 59
    1712:	0f 90       	pop	r0
    1714:	0f be       	out	0x3f, r0	; 63
    1716:	0f 90       	pop	r0
    1718:	1f 90       	pop	r1
    171a:	18 95       	reti

0000171c <__vector_49>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCE0_CCA_vect)
{
    171c:	1f 92       	push	r1
    171e:	0f 92       	push	r0
    1720:	0f b6       	in	r0, 0x3f	; 63
    1722:	0f 92       	push	r0
    1724:	11 24       	eor	r1, r1
    1726:	0b b6       	in	r0, 0x3b	; 59
    1728:	0f 92       	push	r0
    172a:	2f 93       	push	r18
    172c:	3f 93       	push	r19
    172e:	4f 93       	push	r20
    1730:	5f 93       	push	r21
    1732:	6f 93       	push	r22
    1734:	7f 93       	push	r23
    1736:	8f 93       	push	r24
    1738:	9f 93       	push	r25
    173a:	af 93       	push	r26
    173c:	bf 93       	push	r27
    173e:	ef 93       	push	r30
    1740:	ff 93       	push	r31
	if (tc_tce0_cca_callback) {
    1742:	e0 91 ee 21 	lds	r30, 0x21EE
    1746:	f0 91 ef 21 	lds	r31, 0x21EF
    174a:	30 97       	sbiw	r30, 0x00	; 0
    174c:	09 f0       	breq	.+2      	; 0x1750 <__vector_49+0x34>
		tc_tce0_cca_callback();
    174e:	19 95       	eicall
	}
}
    1750:	ff 91       	pop	r31
    1752:	ef 91       	pop	r30
    1754:	bf 91       	pop	r27
    1756:	af 91       	pop	r26
    1758:	9f 91       	pop	r25
    175a:	8f 91       	pop	r24
    175c:	7f 91       	pop	r23
    175e:	6f 91       	pop	r22
    1760:	5f 91       	pop	r21
    1762:	4f 91       	pop	r20
    1764:	3f 91       	pop	r19
    1766:	2f 91       	pop	r18
    1768:	0f 90       	pop	r0
    176a:	0b be       	out	0x3b, r0	; 59
    176c:	0f 90       	pop	r0
    176e:	0f be       	out	0x3f, r0	; 63
    1770:	0f 90       	pop	r0
    1772:	1f 90       	pop	r1
    1774:	18 95       	reti

00001776 <__vector_50>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCE0_CCB_vect)
{
    1776:	1f 92       	push	r1
    1778:	0f 92       	push	r0
    177a:	0f b6       	in	r0, 0x3f	; 63
    177c:	0f 92       	push	r0
    177e:	11 24       	eor	r1, r1
    1780:	0b b6       	in	r0, 0x3b	; 59
    1782:	0f 92       	push	r0
    1784:	2f 93       	push	r18
    1786:	3f 93       	push	r19
    1788:	4f 93       	push	r20
    178a:	5f 93       	push	r21
    178c:	6f 93       	push	r22
    178e:	7f 93       	push	r23
    1790:	8f 93       	push	r24
    1792:	9f 93       	push	r25
    1794:	af 93       	push	r26
    1796:	bf 93       	push	r27
    1798:	ef 93       	push	r30
    179a:	ff 93       	push	r31
	if (tc_tce0_ccb_callback) {
    179c:	e0 91 ec 21 	lds	r30, 0x21EC
    17a0:	f0 91 ed 21 	lds	r31, 0x21ED
    17a4:	30 97       	sbiw	r30, 0x00	; 0
    17a6:	09 f0       	breq	.+2      	; 0x17aa <__vector_50+0x34>
		tc_tce0_ccb_callback();
    17a8:	19 95       	eicall
	}
}
    17aa:	ff 91       	pop	r31
    17ac:	ef 91       	pop	r30
    17ae:	bf 91       	pop	r27
    17b0:	af 91       	pop	r26
    17b2:	9f 91       	pop	r25
    17b4:	8f 91       	pop	r24
    17b6:	7f 91       	pop	r23
    17b8:	6f 91       	pop	r22
    17ba:	5f 91       	pop	r21
    17bc:	4f 91       	pop	r20
    17be:	3f 91       	pop	r19
    17c0:	2f 91       	pop	r18
    17c2:	0f 90       	pop	r0
    17c4:	0b be       	out	0x3b, r0	; 59
    17c6:	0f 90       	pop	r0
    17c8:	0f be       	out	0x3f, r0	; 63
    17ca:	0f 90       	pop	r0
    17cc:	1f 90       	pop	r1
    17ce:	18 95       	reti

000017d0 <__vector_51>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCE0_CCC_vect)
{
    17d0:	1f 92       	push	r1
    17d2:	0f 92       	push	r0
    17d4:	0f b6       	in	r0, 0x3f	; 63
    17d6:	0f 92       	push	r0
    17d8:	11 24       	eor	r1, r1
    17da:	0b b6       	in	r0, 0x3b	; 59
    17dc:	0f 92       	push	r0
    17de:	2f 93       	push	r18
    17e0:	3f 93       	push	r19
    17e2:	4f 93       	push	r20
    17e4:	5f 93       	push	r21
    17e6:	6f 93       	push	r22
    17e8:	7f 93       	push	r23
    17ea:	8f 93       	push	r24
    17ec:	9f 93       	push	r25
    17ee:	af 93       	push	r26
    17f0:	bf 93       	push	r27
    17f2:	ef 93       	push	r30
    17f4:	ff 93       	push	r31
	if (tc_tce0_ccc_callback) {
    17f6:	e0 91 ea 21 	lds	r30, 0x21EA
    17fa:	f0 91 eb 21 	lds	r31, 0x21EB
    17fe:	30 97       	sbiw	r30, 0x00	; 0
    1800:	09 f0       	breq	.+2      	; 0x1804 <__vector_51+0x34>
		tc_tce0_ccc_callback();
    1802:	19 95       	eicall
	}
}
    1804:	ff 91       	pop	r31
    1806:	ef 91       	pop	r30
    1808:	bf 91       	pop	r27
    180a:	af 91       	pop	r26
    180c:	9f 91       	pop	r25
    180e:	8f 91       	pop	r24
    1810:	7f 91       	pop	r23
    1812:	6f 91       	pop	r22
    1814:	5f 91       	pop	r21
    1816:	4f 91       	pop	r20
    1818:	3f 91       	pop	r19
    181a:	2f 91       	pop	r18
    181c:	0f 90       	pop	r0
    181e:	0b be       	out	0x3b, r0	; 59
    1820:	0f 90       	pop	r0
    1822:	0f be       	out	0x3f, r0	; 63
    1824:	0f 90       	pop	r0
    1826:	1f 90       	pop	r1
    1828:	18 95       	reti

0000182a <__vector_52>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCE0_CCD_vect)
{
    182a:	1f 92       	push	r1
    182c:	0f 92       	push	r0
    182e:	0f b6       	in	r0, 0x3f	; 63
    1830:	0f 92       	push	r0
    1832:	11 24       	eor	r1, r1
    1834:	0b b6       	in	r0, 0x3b	; 59
    1836:	0f 92       	push	r0
    1838:	2f 93       	push	r18
    183a:	3f 93       	push	r19
    183c:	4f 93       	push	r20
    183e:	5f 93       	push	r21
    1840:	6f 93       	push	r22
    1842:	7f 93       	push	r23
    1844:	8f 93       	push	r24
    1846:	9f 93       	push	r25
    1848:	af 93       	push	r26
    184a:	bf 93       	push	r27
    184c:	ef 93       	push	r30
    184e:	ff 93       	push	r31
	if (tc_tce0_ccd_callback) {
    1850:	e0 91 e8 21 	lds	r30, 0x21E8
    1854:	f0 91 e9 21 	lds	r31, 0x21E9
    1858:	30 97       	sbiw	r30, 0x00	; 0
    185a:	09 f0       	breq	.+2      	; 0x185e <__vector_52+0x34>
		tc_tce0_ccd_callback();
    185c:	19 95       	eicall
	}
}
    185e:	ff 91       	pop	r31
    1860:	ef 91       	pop	r30
    1862:	bf 91       	pop	r27
    1864:	af 91       	pop	r26
    1866:	9f 91       	pop	r25
    1868:	8f 91       	pop	r24
    186a:	7f 91       	pop	r23
    186c:	6f 91       	pop	r22
    186e:	5f 91       	pop	r21
    1870:	4f 91       	pop	r20
    1872:	3f 91       	pop	r19
    1874:	2f 91       	pop	r18
    1876:	0f 90       	pop	r0
    1878:	0b be       	out	0x3b, r0	; 59
    187a:	0f 90       	pop	r0
    187c:	0f be       	out	0x3f, r0	; 63
    187e:	0f 90       	pop	r0
    1880:	1f 90       	pop	r1
    1882:	18 95       	reti

00001884 <__vector_53>:
 *
 * This function will handle interrupt on Timer Counter E1 overflow and
 * call the callback function.
 */
ISR(TCE1_OVF_vect)
{
    1884:	1f 92       	push	r1
    1886:	0f 92       	push	r0
    1888:	0f b6       	in	r0, 0x3f	; 63
    188a:	0f 92       	push	r0
    188c:	11 24       	eor	r1, r1
    188e:	0b b6       	in	r0, 0x3b	; 59
    1890:	0f 92       	push	r0
    1892:	2f 93       	push	r18
    1894:	3f 93       	push	r19
    1896:	4f 93       	push	r20
    1898:	5f 93       	push	r21
    189a:	6f 93       	push	r22
    189c:	7f 93       	push	r23
    189e:	8f 93       	push	r24
    18a0:	9f 93       	push	r25
    18a2:	af 93       	push	r26
    18a4:	bf 93       	push	r27
    18a6:	ef 93       	push	r30
    18a8:	ff 93       	push	r31
	if (tc_tce1_ovf_callback) {
    18aa:	e0 91 e6 21 	lds	r30, 0x21E6
    18ae:	f0 91 e7 21 	lds	r31, 0x21E7
    18b2:	30 97       	sbiw	r30, 0x00	; 0
    18b4:	09 f0       	breq	.+2      	; 0x18b8 <__vector_53+0x34>
		tc_tce1_ovf_callback();
    18b6:	19 95       	eicall
	}
}
    18b8:	ff 91       	pop	r31
    18ba:	ef 91       	pop	r30
    18bc:	bf 91       	pop	r27
    18be:	af 91       	pop	r26
    18c0:	9f 91       	pop	r25
    18c2:	8f 91       	pop	r24
    18c4:	7f 91       	pop	r23
    18c6:	6f 91       	pop	r22
    18c8:	5f 91       	pop	r21
    18ca:	4f 91       	pop	r20
    18cc:	3f 91       	pop	r19
    18ce:	2f 91       	pop	r18
    18d0:	0f 90       	pop	r0
    18d2:	0b be       	out	0x3b, r0	; 59
    18d4:	0f 90       	pop	r0
    18d6:	0f be       	out	0x3f, r0	; 63
    18d8:	0f 90       	pop	r0
    18da:	1f 90       	pop	r1
    18dc:	18 95       	reti

000018de <__vector_54>:
 *
 * This function will handle interrupt on Timer Counter E1 error and
 * call the callback function.
 */
ISR(TCE1_ERR_vect)
{
    18de:	1f 92       	push	r1
    18e0:	0f 92       	push	r0
    18e2:	0f b6       	in	r0, 0x3f	; 63
    18e4:	0f 92       	push	r0
    18e6:	11 24       	eor	r1, r1
    18e8:	0b b6       	in	r0, 0x3b	; 59
    18ea:	0f 92       	push	r0
    18ec:	2f 93       	push	r18
    18ee:	3f 93       	push	r19
    18f0:	4f 93       	push	r20
    18f2:	5f 93       	push	r21
    18f4:	6f 93       	push	r22
    18f6:	7f 93       	push	r23
    18f8:	8f 93       	push	r24
    18fa:	9f 93       	push	r25
    18fc:	af 93       	push	r26
    18fe:	bf 93       	push	r27
    1900:	ef 93       	push	r30
    1902:	ff 93       	push	r31
	if (tc_tce1_err_callback) {
    1904:	e0 91 e4 21 	lds	r30, 0x21E4
    1908:	f0 91 e5 21 	lds	r31, 0x21E5
    190c:	30 97       	sbiw	r30, 0x00	; 0
    190e:	09 f0       	breq	.+2      	; 0x1912 <__vector_54+0x34>
		tc_tce1_err_callback();
    1910:	19 95       	eicall
	}
}
    1912:	ff 91       	pop	r31
    1914:	ef 91       	pop	r30
    1916:	bf 91       	pop	r27
    1918:	af 91       	pop	r26
    191a:	9f 91       	pop	r25
    191c:	8f 91       	pop	r24
    191e:	7f 91       	pop	r23
    1920:	6f 91       	pop	r22
    1922:	5f 91       	pop	r21
    1924:	4f 91       	pop	r20
    1926:	3f 91       	pop	r19
    1928:	2f 91       	pop	r18
    192a:	0f 90       	pop	r0
    192c:	0b be       	out	0x3b, r0	; 59
    192e:	0f 90       	pop	r0
    1930:	0f be       	out	0x3f, r0	; 63
    1932:	0f 90       	pop	r0
    1934:	1f 90       	pop	r1
    1936:	18 95       	reti

00001938 <__vector_55>:
 *
 * This function will handle interrupt on Timer Counter E1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCE1_CCA_vect)
{
    1938:	1f 92       	push	r1
    193a:	0f 92       	push	r0
    193c:	0f b6       	in	r0, 0x3f	; 63
    193e:	0f 92       	push	r0
    1940:	11 24       	eor	r1, r1
    1942:	0b b6       	in	r0, 0x3b	; 59
    1944:	0f 92       	push	r0
    1946:	2f 93       	push	r18
    1948:	3f 93       	push	r19
    194a:	4f 93       	push	r20
    194c:	5f 93       	push	r21
    194e:	6f 93       	push	r22
    1950:	7f 93       	push	r23
    1952:	8f 93       	push	r24
    1954:	9f 93       	push	r25
    1956:	af 93       	push	r26
    1958:	bf 93       	push	r27
    195a:	ef 93       	push	r30
    195c:	ff 93       	push	r31
	if (tc_tce1_cca_callback) {
    195e:	e0 91 e2 21 	lds	r30, 0x21E2
    1962:	f0 91 e3 21 	lds	r31, 0x21E3
    1966:	30 97       	sbiw	r30, 0x00	; 0
    1968:	09 f0       	breq	.+2      	; 0x196c <__vector_55+0x34>
		tc_tce1_cca_callback();
    196a:	19 95       	eicall
	}
}
    196c:	ff 91       	pop	r31
    196e:	ef 91       	pop	r30
    1970:	bf 91       	pop	r27
    1972:	af 91       	pop	r26
    1974:	9f 91       	pop	r25
    1976:	8f 91       	pop	r24
    1978:	7f 91       	pop	r23
    197a:	6f 91       	pop	r22
    197c:	5f 91       	pop	r21
    197e:	4f 91       	pop	r20
    1980:	3f 91       	pop	r19
    1982:	2f 91       	pop	r18
    1984:	0f 90       	pop	r0
    1986:	0b be       	out	0x3b, r0	; 59
    1988:	0f 90       	pop	r0
    198a:	0f be       	out	0x3f, r0	; 63
    198c:	0f 90       	pop	r0
    198e:	1f 90       	pop	r1
    1990:	18 95       	reti

00001992 <__vector_56>:
 *
 * This function will handle interrupt on Timer Counter E1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCE1_CCB_vect)
{
    1992:	1f 92       	push	r1
    1994:	0f 92       	push	r0
    1996:	0f b6       	in	r0, 0x3f	; 63
    1998:	0f 92       	push	r0
    199a:	11 24       	eor	r1, r1
    199c:	0b b6       	in	r0, 0x3b	; 59
    199e:	0f 92       	push	r0
    19a0:	2f 93       	push	r18
    19a2:	3f 93       	push	r19
    19a4:	4f 93       	push	r20
    19a6:	5f 93       	push	r21
    19a8:	6f 93       	push	r22
    19aa:	7f 93       	push	r23
    19ac:	8f 93       	push	r24
    19ae:	9f 93       	push	r25
    19b0:	af 93       	push	r26
    19b2:	bf 93       	push	r27
    19b4:	ef 93       	push	r30
    19b6:	ff 93       	push	r31
	if (tc_tce1_ccb_callback) {
    19b8:	e0 91 e0 21 	lds	r30, 0x21E0
    19bc:	f0 91 e1 21 	lds	r31, 0x21E1
    19c0:	30 97       	sbiw	r30, 0x00	; 0
    19c2:	09 f0       	breq	.+2      	; 0x19c6 <__vector_56+0x34>
		tc_tce1_ccb_callback();
    19c4:	19 95       	eicall
	}
}
    19c6:	ff 91       	pop	r31
    19c8:	ef 91       	pop	r30
    19ca:	bf 91       	pop	r27
    19cc:	af 91       	pop	r26
    19ce:	9f 91       	pop	r25
    19d0:	8f 91       	pop	r24
    19d2:	7f 91       	pop	r23
    19d4:	6f 91       	pop	r22
    19d6:	5f 91       	pop	r21
    19d8:	4f 91       	pop	r20
    19da:	3f 91       	pop	r19
    19dc:	2f 91       	pop	r18
    19de:	0f 90       	pop	r0
    19e0:	0b be       	out	0x3b, r0	; 59
    19e2:	0f 90       	pop	r0
    19e4:	0f be       	out	0x3f, r0	; 63
    19e6:	0f 90       	pop	r0
    19e8:	1f 90       	pop	r1
    19ea:	18 95       	reti

000019ec <__vector_108>:
 *
 * This function will handle interrupt on Timer Counter F0 overflow and
 * call the callback function.
 */
ISR(TCF0_OVF_vect)
{
    19ec:	1f 92       	push	r1
    19ee:	0f 92       	push	r0
    19f0:	0f b6       	in	r0, 0x3f	; 63
    19f2:	0f 92       	push	r0
    19f4:	11 24       	eor	r1, r1
    19f6:	0b b6       	in	r0, 0x3b	; 59
    19f8:	0f 92       	push	r0
    19fa:	2f 93       	push	r18
    19fc:	3f 93       	push	r19
    19fe:	4f 93       	push	r20
    1a00:	5f 93       	push	r21
    1a02:	6f 93       	push	r22
    1a04:	7f 93       	push	r23
    1a06:	8f 93       	push	r24
    1a08:	9f 93       	push	r25
    1a0a:	af 93       	push	r26
    1a0c:	bf 93       	push	r27
    1a0e:	ef 93       	push	r30
    1a10:	ff 93       	push	r31
	if (tc_tcf0_ovf_callback) {
    1a12:	e0 91 de 21 	lds	r30, 0x21DE
    1a16:	f0 91 df 21 	lds	r31, 0x21DF
    1a1a:	30 97       	sbiw	r30, 0x00	; 0
    1a1c:	09 f0       	breq	.+2      	; 0x1a20 <__vector_108+0x34>
		tc_tcf0_ovf_callback();
    1a1e:	19 95       	eicall
	}
}
    1a20:	ff 91       	pop	r31
    1a22:	ef 91       	pop	r30
    1a24:	bf 91       	pop	r27
    1a26:	af 91       	pop	r26
    1a28:	9f 91       	pop	r25
    1a2a:	8f 91       	pop	r24
    1a2c:	7f 91       	pop	r23
    1a2e:	6f 91       	pop	r22
    1a30:	5f 91       	pop	r21
    1a32:	4f 91       	pop	r20
    1a34:	3f 91       	pop	r19
    1a36:	2f 91       	pop	r18
    1a38:	0f 90       	pop	r0
    1a3a:	0b be       	out	0x3b, r0	; 59
    1a3c:	0f 90       	pop	r0
    1a3e:	0f be       	out	0x3f, r0	; 63
    1a40:	0f 90       	pop	r0
    1a42:	1f 90       	pop	r1
    1a44:	18 95       	reti

00001a46 <__vector_109>:
 *
 * This function will handle interrupt on Timer Counter F0 error and
 * call the callback function.
 */
ISR(TCF0_ERR_vect)
{
    1a46:	1f 92       	push	r1
    1a48:	0f 92       	push	r0
    1a4a:	0f b6       	in	r0, 0x3f	; 63
    1a4c:	0f 92       	push	r0
    1a4e:	11 24       	eor	r1, r1
    1a50:	0b b6       	in	r0, 0x3b	; 59
    1a52:	0f 92       	push	r0
    1a54:	2f 93       	push	r18
    1a56:	3f 93       	push	r19
    1a58:	4f 93       	push	r20
    1a5a:	5f 93       	push	r21
    1a5c:	6f 93       	push	r22
    1a5e:	7f 93       	push	r23
    1a60:	8f 93       	push	r24
    1a62:	9f 93       	push	r25
    1a64:	af 93       	push	r26
    1a66:	bf 93       	push	r27
    1a68:	ef 93       	push	r30
    1a6a:	ff 93       	push	r31
	if (tc_tcf0_err_callback) {
    1a6c:	e0 91 dc 21 	lds	r30, 0x21DC
    1a70:	f0 91 dd 21 	lds	r31, 0x21DD
    1a74:	30 97       	sbiw	r30, 0x00	; 0
    1a76:	09 f0       	breq	.+2      	; 0x1a7a <__vector_109+0x34>
		tc_tcf0_err_callback();
    1a78:	19 95       	eicall
	}
}
    1a7a:	ff 91       	pop	r31
    1a7c:	ef 91       	pop	r30
    1a7e:	bf 91       	pop	r27
    1a80:	af 91       	pop	r26
    1a82:	9f 91       	pop	r25
    1a84:	8f 91       	pop	r24
    1a86:	7f 91       	pop	r23
    1a88:	6f 91       	pop	r22
    1a8a:	5f 91       	pop	r21
    1a8c:	4f 91       	pop	r20
    1a8e:	3f 91       	pop	r19
    1a90:	2f 91       	pop	r18
    1a92:	0f 90       	pop	r0
    1a94:	0b be       	out	0x3b, r0	; 59
    1a96:	0f 90       	pop	r0
    1a98:	0f be       	out	0x3f, r0	; 63
    1a9a:	0f 90       	pop	r0
    1a9c:	1f 90       	pop	r1
    1a9e:	18 95       	reti

00001aa0 <__vector_110>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCF0_CCA_vect)
{
    1aa0:	1f 92       	push	r1
    1aa2:	0f 92       	push	r0
    1aa4:	0f b6       	in	r0, 0x3f	; 63
    1aa6:	0f 92       	push	r0
    1aa8:	11 24       	eor	r1, r1
    1aaa:	0b b6       	in	r0, 0x3b	; 59
    1aac:	0f 92       	push	r0
    1aae:	2f 93       	push	r18
    1ab0:	3f 93       	push	r19
    1ab2:	4f 93       	push	r20
    1ab4:	5f 93       	push	r21
    1ab6:	6f 93       	push	r22
    1ab8:	7f 93       	push	r23
    1aba:	8f 93       	push	r24
    1abc:	9f 93       	push	r25
    1abe:	af 93       	push	r26
    1ac0:	bf 93       	push	r27
    1ac2:	ef 93       	push	r30
    1ac4:	ff 93       	push	r31
	if (tc_tcf0_cca_callback) {
    1ac6:	e0 91 da 21 	lds	r30, 0x21DA
    1aca:	f0 91 db 21 	lds	r31, 0x21DB
    1ace:	30 97       	sbiw	r30, 0x00	; 0
    1ad0:	09 f0       	breq	.+2      	; 0x1ad4 <__vector_110+0x34>
		tc_tcf0_cca_callback();
    1ad2:	19 95       	eicall
	}
}
    1ad4:	ff 91       	pop	r31
    1ad6:	ef 91       	pop	r30
    1ad8:	bf 91       	pop	r27
    1ada:	af 91       	pop	r26
    1adc:	9f 91       	pop	r25
    1ade:	8f 91       	pop	r24
    1ae0:	7f 91       	pop	r23
    1ae2:	6f 91       	pop	r22
    1ae4:	5f 91       	pop	r21
    1ae6:	4f 91       	pop	r20
    1ae8:	3f 91       	pop	r19
    1aea:	2f 91       	pop	r18
    1aec:	0f 90       	pop	r0
    1aee:	0b be       	out	0x3b, r0	; 59
    1af0:	0f 90       	pop	r0
    1af2:	0f be       	out	0x3f, r0	; 63
    1af4:	0f 90       	pop	r0
    1af6:	1f 90       	pop	r1
    1af8:	18 95       	reti

00001afa <__vector_111>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCF0_CCB_vect)
{
    1afa:	1f 92       	push	r1
    1afc:	0f 92       	push	r0
    1afe:	0f b6       	in	r0, 0x3f	; 63
    1b00:	0f 92       	push	r0
    1b02:	11 24       	eor	r1, r1
    1b04:	0b b6       	in	r0, 0x3b	; 59
    1b06:	0f 92       	push	r0
    1b08:	2f 93       	push	r18
    1b0a:	3f 93       	push	r19
    1b0c:	4f 93       	push	r20
    1b0e:	5f 93       	push	r21
    1b10:	6f 93       	push	r22
    1b12:	7f 93       	push	r23
    1b14:	8f 93       	push	r24
    1b16:	9f 93       	push	r25
    1b18:	af 93       	push	r26
    1b1a:	bf 93       	push	r27
    1b1c:	ef 93       	push	r30
    1b1e:	ff 93       	push	r31
	if (tc_tcf0_ccb_callback) {
    1b20:	e0 91 d8 21 	lds	r30, 0x21D8
    1b24:	f0 91 d9 21 	lds	r31, 0x21D9
    1b28:	30 97       	sbiw	r30, 0x00	; 0
    1b2a:	09 f0       	breq	.+2      	; 0x1b2e <__vector_111+0x34>
		tc_tcf0_ccb_callback();
    1b2c:	19 95       	eicall
	}
}
    1b2e:	ff 91       	pop	r31
    1b30:	ef 91       	pop	r30
    1b32:	bf 91       	pop	r27
    1b34:	af 91       	pop	r26
    1b36:	9f 91       	pop	r25
    1b38:	8f 91       	pop	r24
    1b3a:	7f 91       	pop	r23
    1b3c:	6f 91       	pop	r22
    1b3e:	5f 91       	pop	r21
    1b40:	4f 91       	pop	r20
    1b42:	3f 91       	pop	r19
    1b44:	2f 91       	pop	r18
    1b46:	0f 90       	pop	r0
    1b48:	0b be       	out	0x3b, r0	; 59
    1b4a:	0f 90       	pop	r0
    1b4c:	0f be       	out	0x3f, r0	; 63
    1b4e:	0f 90       	pop	r0
    1b50:	1f 90       	pop	r1
    1b52:	18 95       	reti

00001b54 <__vector_112>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCF0_CCC_vect)
{
    1b54:	1f 92       	push	r1
    1b56:	0f 92       	push	r0
    1b58:	0f b6       	in	r0, 0x3f	; 63
    1b5a:	0f 92       	push	r0
    1b5c:	11 24       	eor	r1, r1
    1b5e:	0b b6       	in	r0, 0x3b	; 59
    1b60:	0f 92       	push	r0
    1b62:	2f 93       	push	r18
    1b64:	3f 93       	push	r19
    1b66:	4f 93       	push	r20
    1b68:	5f 93       	push	r21
    1b6a:	6f 93       	push	r22
    1b6c:	7f 93       	push	r23
    1b6e:	8f 93       	push	r24
    1b70:	9f 93       	push	r25
    1b72:	af 93       	push	r26
    1b74:	bf 93       	push	r27
    1b76:	ef 93       	push	r30
    1b78:	ff 93       	push	r31
	if (tc_tcf0_ccc_callback) {
    1b7a:	e0 91 d6 21 	lds	r30, 0x21D6
    1b7e:	f0 91 d7 21 	lds	r31, 0x21D7
    1b82:	30 97       	sbiw	r30, 0x00	; 0
    1b84:	09 f0       	breq	.+2      	; 0x1b88 <__vector_112+0x34>
		tc_tcf0_ccc_callback();
    1b86:	19 95       	eicall
	}
}
    1b88:	ff 91       	pop	r31
    1b8a:	ef 91       	pop	r30
    1b8c:	bf 91       	pop	r27
    1b8e:	af 91       	pop	r26
    1b90:	9f 91       	pop	r25
    1b92:	8f 91       	pop	r24
    1b94:	7f 91       	pop	r23
    1b96:	6f 91       	pop	r22
    1b98:	5f 91       	pop	r21
    1b9a:	4f 91       	pop	r20
    1b9c:	3f 91       	pop	r19
    1b9e:	2f 91       	pop	r18
    1ba0:	0f 90       	pop	r0
    1ba2:	0b be       	out	0x3b, r0	; 59
    1ba4:	0f 90       	pop	r0
    1ba6:	0f be       	out	0x3f, r0	; 63
    1ba8:	0f 90       	pop	r0
    1baa:	1f 90       	pop	r1
    1bac:	18 95       	reti

00001bae <__vector_113>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCF0_CCD_vect)
{
    1bae:	1f 92       	push	r1
    1bb0:	0f 92       	push	r0
    1bb2:	0f b6       	in	r0, 0x3f	; 63
    1bb4:	0f 92       	push	r0
    1bb6:	11 24       	eor	r1, r1
    1bb8:	0b b6       	in	r0, 0x3b	; 59
    1bba:	0f 92       	push	r0
    1bbc:	2f 93       	push	r18
    1bbe:	3f 93       	push	r19
    1bc0:	4f 93       	push	r20
    1bc2:	5f 93       	push	r21
    1bc4:	6f 93       	push	r22
    1bc6:	7f 93       	push	r23
    1bc8:	8f 93       	push	r24
    1bca:	9f 93       	push	r25
    1bcc:	af 93       	push	r26
    1bce:	bf 93       	push	r27
    1bd0:	ef 93       	push	r30
    1bd2:	ff 93       	push	r31
	if (tc_tcf0_ccd_callback) {
    1bd4:	e0 91 d4 21 	lds	r30, 0x21D4
    1bd8:	f0 91 d5 21 	lds	r31, 0x21D5
    1bdc:	30 97       	sbiw	r30, 0x00	; 0
    1bde:	09 f0       	breq	.+2      	; 0x1be2 <__vector_113+0x34>
		tc_tcf0_ccd_callback();
    1be0:	19 95       	eicall
	}
}
    1be2:	ff 91       	pop	r31
    1be4:	ef 91       	pop	r30
    1be6:	bf 91       	pop	r27
    1be8:	af 91       	pop	r26
    1bea:	9f 91       	pop	r25
    1bec:	8f 91       	pop	r24
    1bee:	7f 91       	pop	r23
    1bf0:	6f 91       	pop	r22
    1bf2:	5f 91       	pop	r21
    1bf4:	4f 91       	pop	r20
    1bf6:	3f 91       	pop	r19
    1bf8:	2f 91       	pop	r18
    1bfa:	0f 90       	pop	r0
    1bfc:	0b be       	out	0x3b, r0	; 59
    1bfe:	0f 90       	pop	r0
    1c00:	0f be       	out	0x3f, r0	; 63
    1c02:	0f 90       	pop	r0
    1c04:	1f 90       	pop	r1
    1c06:	18 95       	reti

00001c08 <udd_sleep_mode>:
	} else {
		// endpoint not halted then call directly callback
		callback();
	}
	return true;
}
    1c08:	81 11       	cpse	r24, r1
    1c0a:	18 c0       	rjmp	.+48     	; 0x1c3c <udd_sleep_mode+0x34>
    1c0c:	90 91 48 23 	lds	r25, 0x2348
    1c10:	99 23       	and	r25, r25
    1c12:	89 f0       	breq	.+34     	; 0x1c36 <udd_sleep_mode+0x2e>
    1c14:	9f b7       	in	r25, 0x3f	; 63
    1c16:	f8 94       	cli
    1c18:	ea e6       	ldi	r30, 0x6A	; 106
    1c1a:	f3 e2       	ldi	r31, 0x23	; 35
    1c1c:	20 81       	ld	r18, Z
    1c1e:	21 50       	subi	r18, 0x01	; 1
    1c20:	20 83       	st	Z, r18
    1c22:	9f bf       	out	0x3f, r25	; 63
    1c24:	08 c0       	rjmp	.+16     	; 0x1c36 <udd_sleep_mode+0x2e>
    1c26:	9f b7       	in	r25, 0x3f	; 63
    1c28:	f8 94       	cli
    1c2a:	ea e6       	ldi	r30, 0x6A	; 106
    1c2c:	f3 e2       	ldi	r31, 0x23	; 35
    1c2e:	20 81       	ld	r18, Z
    1c30:	2f 5f       	subi	r18, 0xFF	; 255
    1c32:	20 83       	st	Z, r18
    1c34:	9f bf       	out	0x3f, r25	; 63
    1c36:	80 93 48 23 	sts	0x2348, r24
    1c3a:	08 95       	ret
    1c3c:	90 91 48 23 	lds	r25, 0x2348
    1c40:	99 23       	and	r25, r25
    1c42:	89 f3       	breq	.-30     	; 0x1c26 <udd_sleep_mode+0x1e>
    1c44:	f8 cf       	rjmp	.-16     	; 0x1c36 <udd_sleep_mode+0x2e>

00001c46 <udd_ctrl_init>:
    1c46:	0f 93       	push	r16
    1c48:	e8 ec       	ldi	r30, 0xC8	; 200
    1c4a:	f4 e0       	ldi	r31, 0x04	; 4
    1c4c:	80 81       	ld	r24, Z
    1c4e:	8f 7d       	andi	r24, 0xDF	; 223
    1c50:	80 83       	st	Z, r24
    1c52:	80 81       	ld	r24, Z
    1c54:	8f 7d       	andi	r24, 0xDF	; 223
    1c56:	80 83       	st	Z, r24
    1c58:	ec e1       	ldi	r30, 0x1C	; 28
    1c5a:	f3 e2       	ldi	r31, 0x23	; 35
    1c5c:	02 e0       	ldi	r16, 0x02	; 2
    1c5e:	05 93       	las	Z, r16
    1c60:	10 92 1e 23 	sts	0x231E, r1
    1c64:	10 92 1f 23 	sts	0x231F, r1
    1c68:	00 e2       	ldi	r16, 0x20	; 32
    1c6a:	06 93       	lac	Z, r16
    1c6c:	00 e4       	ldi	r16, 0x40	; 64
    1c6e:	06 93       	lac	Z, r16
    1c70:	e4 e1       	ldi	r30, 0x14	; 20
    1c72:	f3 e2       	ldi	r31, 0x23	; 35
    1c74:	00 e2       	ldi	r16, 0x20	; 32
    1c76:	06 93       	lac	Z, r16
    1c78:	00 e4       	ldi	r16, 0x40	; 64
    1c7a:	06 93       	lac	Z, r16
    1c7c:	10 92 56 23 	sts	0x2356, r1
    1c80:	10 92 57 23 	sts	0x2357, r1
    1c84:	10 92 58 23 	sts	0x2358, r1
    1c88:	10 92 59 23 	sts	0x2359, r1
    1c8c:	10 92 54 23 	sts	0x2354, r1
    1c90:	10 92 55 23 	sts	0x2355, r1
    1c94:	10 92 05 23 	sts	0x2305, r1
    1c98:	0f 91       	pop	r16
    1c9a:	08 95       	ret

00001c9c <udd_ctrl_stall_data>:
    1c9c:	0f 93       	push	r16
    1c9e:	85 e0       	ldi	r24, 0x05	; 5
    1ca0:	80 93 05 23 	sts	0x2305, r24
    1ca4:	ed e1       	ldi	r30, 0x1D	; 29
    1ca6:	f3 e2       	ldi	r31, 0x23	; 35
    1ca8:	04 e0       	ldi	r16, 0x04	; 4
    1caa:	05 93       	las	Z, r16
    1cac:	e5 e1       	ldi	r30, 0x15	; 21
    1cae:	f3 e2       	ldi	r31, 0x23	; 35
    1cb0:	04 e0       	ldi	r16, 0x04	; 4
    1cb2:	05 93       	las	Z, r16
    1cb4:	0f 91       	pop	r16
    1cb6:	08 95       	ret

00001cb8 <udd_ctrl_send_zlp_in>:
    1cb8:	0f 93       	push	r16
    1cba:	83 e0       	ldi	r24, 0x03	; 3
    1cbc:	80 93 05 23 	sts	0x2305, r24
    1cc0:	10 92 1e 23 	sts	0x231E, r1
    1cc4:	10 92 1f 23 	sts	0x231F, r1
    1cc8:	ec e1       	ldi	r30, 0x1C	; 28
    1cca:	f3 e2       	ldi	r31, 0x23	; 35
    1ccc:	02 e0       	ldi	r16, 0x02	; 2
    1cce:	06 93       	lac	Z, r16
    1cd0:	0f 91       	pop	r16
    1cd2:	08 95       	ret

00001cd4 <udd_ctrl_endofrequest>:
    1cd4:	e0 91 56 23 	lds	r30, 0x2356
    1cd8:	f0 91 57 23 	lds	r31, 0x2357
    1cdc:	30 97       	sbiw	r30, 0x00	; 0
    1cde:	09 f0       	breq	.+2      	; 0x1ce2 <udd_ctrl_endofrequest+0xe>
    1ce0:	19 95       	eicall
    1ce2:	08 95       	ret

00001ce4 <udd_ctrl_in_sent>:
    1ce4:	0f 93       	push	r16
    1ce6:	cf 93       	push	r28
    1ce8:	df 93       	push	r29
    1cea:	80 91 05 23 	lds	r24, 0x2305
    1cee:	83 30       	cpi	r24, 0x03	; 3
    1cf0:	19 f4       	brne	.+6      	; 0x1cf8 <udd_ctrl_in_sent+0x14>
    1cf2:	f0 df       	rcall	.-32     	; 0x1cd4 <udd_ctrl_endofrequest>
    1cf4:	a8 df       	rcall	.-176    	; 0x1c46 <udd_ctrl_init>
    1cf6:	60 c0       	rjmp	.+192    	; 0x1db8 <udd_ctrl_in_sent+0xd4>
    1cf8:	80 91 01 23 	lds	r24, 0x2301
    1cfc:	90 91 02 23 	lds	r25, 0x2302
    1d00:	c0 91 54 23 	lds	r28, 0x2354
    1d04:	d0 91 55 23 	lds	r29, 0x2355
    1d08:	c8 1b       	sub	r28, r24
    1d0a:	d9 0b       	sbc	r29, r25
    1d0c:	71 f5       	brne	.+92     	; 0x1d6a <udd_ctrl_in_sent+0x86>
    1d0e:	20 91 03 23 	lds	r18, 0x2303
    1d12:	30 91 04 23 	lds	r19, 0x2304
    1d16:	82 0f       	add	r24, r18
    1d18:	93 1f       	adc	r25, r19
    1d1a:	80 93 03 23 	sts	0x2303, r24
    1d1e:	90 93 04 23 	sts	0x2304, r25
    1d22:	20 91 50 23 	lds	r18, 0x2350
    1d26:	30 91 51 23 	lds	r19, 0x2351
    1d2a:	82 17       	cp	r24, r18
    1d2c:	93 07       	cpc	r25, r19
    1d2e:	21 f0       	breq	.+8      	; 0x1d38 <udd_ctrl_in_sent+0x54>
    1d30:	80 91 1c 22 	lds	r24, 0x221C
    1d34:	88 23       	and	r24, r24
    1d36:	41 f0       	breq	.+16     	; 0x1d48 <udd_ctrl_in_sent+0x64>
    1d38:	84 e0       	ldi	r24, 0x04	; 4
    1d3a:	80 93 05 23 	sts	0x2305, r24
    1d3e:	e4 e1       	ldi	r30, 0x14	; 20
    1d40:	f3 e2       	ldi	r31, 0x23	; 35
    1d42:	02 e0       	ldi	r16, 0x02	; 2
    1d44:	06 93       	lac	Z, r16
    1d46:	38 c0       	rjmp	.+112    	; 0x1db8 <udd_ctrl_in_sent+0xd4>
    1d48:	e0 91 58 23 	lds	r30, 0x2358
    1d4c:	f0 91 59 23 	lds	r31, 0x2359
    1d50:	30 97       	sbiw	r30, 0x00	; 0
    1d52:	99 f0       	breq	.+38     	; 0x1d7a <udd_ctrl_in_sent+0x96>
    1d54:	19 95       	eicall
    1d56:	88 23       	and	r24, r24
    1d58:	81 f0       	breq	.+32     	; 0x1d7a <udd_ctrl_in_sent+0x96>
    1d5a:	10 92 01 23 	sts	0x2301, r1
    1d5e:	10 92 02 23 	sts	0x2302, r1
    1d62:	c0 91 54 23 	lds	r28, 0x2354
    1d66:	d0 91 55 23 	lds	r29, 0x2355
    1d6a:	c0 34       	cpi	r28, 0x40	; 64
    1d6c:	d1 05       	cpc	r29, r1
    1d6e:	28 f0       	brcs	.+10     	; 0x1d7a <udd_ctrl_in_sent+0x96>
    1d70:	10 92 1c 22 	sts	0x221C, r1
    1d74:	c0 e4       	ldi	r28, 0x40	; 64
    1d76:	d0 e0       	ldi	r29, 0x00	; 0
    1d78:	03 c0       	rjmp	.+6      	; 0x1d80 <udd_ctrl_in_sent+0x9c>
    1d7a:	81 e0       	ldi	r24, 0x01	; 1
    1d7c:	80 93 1c 22 	sts	0x221C, r24
    1d80:	c0 93 1e 23 	sts	0x231E, r28
    1d84:	d0 93 1f 23 	sts	0x231F, r29
    1d88:	80 91 01 23 	lds	r24, 0x2301
    1d8c:	90 91 02 23 	lds	r25, 0x2302
    1d90:	20 91 52 23 	lds	r18, 0x2352
    1d94:	30 91 53 23 	lds	r19, 0x2353
    1d98:	28 0f       	add	r18, r24
    1d9a:	39 1f       	adc	r19, r25
    1d9c:	20 93 20 23 	sts	0x2320, r18
    1da0:	30 93 21 23 	sts	0x2321, r19
    1da4:	c8 0f       	add	r28, r24
    1da6:	d9 1f       	adc	r29, r25
    1da8:	c0 93 01 23 	sts	0x2301, r28
    1dac:	d0 93 02 23 	sts	0x2302, r29
    1db0:	ec e1       	ldi	r30, 0x1C	; 28
    1db2:	f3 e2       	ldi	r31, 0x23	; 35
    1db4:	02 e0       	ldi	r16, 0x02	; 2
    1db6:	06 93       	lac	Z, r16
    1db8:	df 91       	pop	r29
    1dba:	cf 91       	pop	r28
    1dbc:	0f 91       	pop	r16
    1dbe:	08 95       	ret

00001dc0 <udd_ep_get_size>:
    1dc0:	fc 01       	movw	r30, r24
    1dc2:	81 81       	ldd	r24, Z+1	; 0x01
    1dc4:	87 70       	andi	r24, 0x07	; 7
    1dc6:	90 e0       	ldi	r25, 0x00	; 0
    1dc8:	fc 01       	movw	r30, r24
    1dca:	31 97       	sbiw	r30, 0x01	; 1
    1dcc:	e7 30       	cpi	r30, 0x07	; 7
    1dce:	f1 05       	cpc	r31, r1
    1dd0:	20 f4       	brcc	.+8      	; 0x1dda <udd_ep_get_size+0x1a>
    1dd2:	e2 50       	subi	r30, 0x02	; 2
    1dd4:	ff 4f       	sbci	r31, 0xFF	; 255
    1dd6:	0c 94 0e 1a 	jmp	0x341c	; 0x341c <__tablejump2__>
    1dda:	88 e0       	ldi	r24, 0x08	; 8
    1ddc:	90 e0       	ldi	r25, 0x00	; 0
    1dde:	08 95       	ret
    1de0:	80 e2       	ldi	r24, 0x20	; 32
    1de2:	90 e0       	ldi	r25, 0x00	; 0
    1de4:	08 95       	ret
    1de6:	80 e4       	ldi	r24, 0x40	; 64
    1de8:	90 e0       	ldi	r25, 0x00	; 0
    1dea:	08 95       	ret
    1dec:	80 e8       	ldi	r24, 0x80	; 128
    1dee:	90 e0       	ldi	r25, 0x00	; 0
    1df0:	08 95       	ret
    1df2:	80 e0       	ldi	r24, 0x00	; 0
    1df4:	91 e0       	ldi	r25, 0x01	; 1
    1df6:	08 95       	ret
    1df8:	80 e0       	ldi	r24, 0x00	; 0
    1dfa:	92 e0       	ldi	r25, 0x02	; 2
    1dfc:	08 95       	ret
    1dfe:	8f ef       	ldi	r24, 0xFF	; 255
    1e00:	93 e0       	ldi	r25, 0x03	; 3
    1e02:	08 95       	ret
    1e04:	80 e1       	ldi	r24, 0x10	; 16
    1e06:	90 e0       	ldi	r25, 0x00	; 0
    1e08:	08 95       	ret

00001e0a <udd_ep_get_job>:
    1e0a:	28 2f       	mov	r18, r24
    1e0c:	2f 70       	andi	r18, 0x0F	; 15
    1e0e:	30 e0       	ldi	r19, 0x00	; 0
    1e10:	22 0f       	add	r18, r18
    1e12:	33 1f       	adc	r19, r19
    1e14:	99 27       	eor	r25, r25
    1e16:	87 fd       	sbrc	r24, 7
    1e18:	90 95       	com	r25
    1e1a:	88 27       	eor	r24, r24
    1e1c:	99 0f       	add	r25, r25
    1e1e:	88 1f       	adc	r24, r24
    1e20:	99 27       	eor	r25, r25
    1e22:	82 0f       	add	r24, r18
    1e24:	93 1f       	adc	r25, r19
    1e26:	02 97       	sbiw	r24, 0x02	; 2
    1e28:	9c 01       	movw	r18, r24
    1e2a:	22 0f       	add	r18, r18
    1e2c:	33 1f       	adc	r19, r19
    1e2e:	22 0f       	add	r18, r18
    1e30:	33 1f       	adc	r19, r19
    1e32:	22 0f       	add	r18, r18
    1e34:	33 1f       	adc	r19, r19
    1e36:	82 0f       	add	r24, r18
    1e38:	93 1f       	adc	r25, r19
    1e3a:	83 56       	subi	r24, 0x63	; 99
    1e3c:	9d 4d       	sbci	r25, 0xDD	; 221
    1e3e:	08 95       	ret

00001e40 <udd_ctrl_interrupt_tc_setup>:
    1e40:	0f 93       	push	r16
    1e42:	cf 93       	push	r28
    1e44:	80 91 cc 04 	lds	r24, 0x04CC
    1e48:	80 ff       	sbrs	r24, 0
    1e4a:	63 c0       	rjmp	.+198    	; 0x1f12 <udd_ctrl_interrupt_tc_setup+0xd2>
    1e4c:	81 e0       	ldi	r24, 0x01	; 1
    1e4e:	80 93 cc 04 	sts	0x04CC, r24
    1e52:	e4 e1       	ldi	r30, 0x14	; 20
    1e54:	f3 e2       	ldi	r31, 0x23	; 35
    1e56:	00 e8       	ldi	r16, 0x80	; 128
    1e58:	06 93       	lac	Z, r16
    1e5a:	ec e1       	ldi	r30, 0x1C	; 28
    1e5c:	f3 e2       	ldi	r31, 0x23	; 35
    1e5e:	00 e8       	ldi	r16, 0x80	; 128
    1e60:	06 93       	lac	Z, r16
    1e62:	80 93 ca 04 	sts	0x04CA, r24
    1e66:	e4 e1       	ldi	r30, 0x14	; 20
    1e68:	f3 e2       	ldi	r31, 0x23	; 35
    1e6a:	00 e1       	ldi	r16, 0x10	; 16
    1e6c:	06 93       	lac	Z, r16
    1e6e:	80 91 05 23 	lds	r24, 0x2305
    1e72:	88 23       	and	r24, r24
    1e74:	29 f0       	breq	.+10     	; 0x1e80 <udd_ctrl_interrupt_tc_setup+0x40>
    1e76:	83 50       	subi	r24, 0x03	; 3
    1e78:	82 30       	cpi	r24, 0x02	; 2
    1e7a:	08 f4       	brcc	.+2      	; 0x1e7e <udd_ctrl_interrupt_tc_setup+0x3e>
    1e7c:	2b df       	rcall	.-426    	; 0x1cd4 <udd_ctrl_endofrequest>
    1e7e:	e3 de       	rcall	.-570    	; 0x1c46 <udd_ctrl_init>
    1e80:	80 91 16 23 	lds	r24, 0x2316
    1e84:	90 91 17 23 	lds	r25, 0x2317
    1e88:	08 97       	sbiw	r24, 0x08	; 8
    1e8a:	09 f0       	breq	.+2      	; 0x1e8e <udd_ctrl_interrupt_tc_setup+0x4e>
    1e8c:	44 c0       	rjmp	.+136    	; 0x1f16 <udd_ctrl_interrupt_tc_setup+0xd6>
    1e8e:	88 e0       	ldi	r24, 0x08	; 8
    1e90:	e1 ec       	ldi	r30, 0xC1	; 193
    1e92:	f2 e2       	ldi	r31, 0x22	; 34
    1e94:	aa e4       	ldi	r26, 0x4A	; 74
    1e96:	b3 e2       	ldi	r27, 0x23	; 35
    1e98:	01 90       	ld	r0, Z+
    1e9a:	0d 92       	st	X+, r0
    1e9c:	8a 95       	dec	r24
    1e9e:	e1 f7       	brne	.-8      	; 0x1e98 <udd_ctrl_interrupt_tc_setup+0x58>
    1ea0:	e8 ec       	ldi	r30, 0xC8	; 200
    1ea2:	f4 e0       	ldi	r31, 0x04	; 4
    1ea4:	80 81       	ld	r24, Z
    1ea6:	80 62       	ori	r24, 0x20	; 32
    1ea8:	80 83       	st	Z, r24
    1eaa:	80 81       	ld	r24, Z
    1eac:	80 62       	ori	r24, 0x20	; 32
    1eae:	80 83       	st	Z, r24
    1eb0:	0e 94 15 05 	call	0xa2a	; 0xa2a <udc_process_setup>
    1eb4:	c8 2f       	mov	r28, r24
    1eb6:	81 11       	cpse	r24, r1
    1eb8:	03 c0       	rjmp	.+6      	; 0x1ec0 <udd_ctrl_interrupt_tc_setup+0x80>
    1eba:	f0 de       	rcall	.-544    	; 0x1c9c <udd_ctrl_stall_data>
    1ebc:	c1 e0       	ldi	r28, 0x01	; 1
    1ebe:	2c c0       	rjmp	.+88     	; 0x1f18 <udd_ctrl_interrupt_tc_setup+0xd8>
    1ec0:	80 91 4a 23 	lds	r24, 0x234A
    1ec4:	88 23       	and	r24, r24
    1ec6:	6c f4       	brge	.+26     	; 0x1ee2 <udd_ctrl_interrupt_tc_setup+0xa2>
    1ec8:	10 92 03 23 	sts	0x2303, r1
    1ecc:	10 92 04 23 	sts	0x2304, r1
    1ed0:	10 92 01 23 	sts	0x2301, r1
    1ed4:	10 92 02 23 	sts	0x2302, r1
    1ed8:	82 e0       	ldi	r24, 0x02	; 2
    1eda:	80 93 05 23 	sts	0x2305, r24
    1ede:	02 df       	rcall	.-508    	; 0x1ce4 <udd_ctrl_in_sent>
    1ee0:	1b c0       	rjmp	.+54     	; 0x1f18 <udd_ctrl_interrupt_tc_setup+0xd8>
    1ee2:	20 91 50 23 	lds	r18, 0x2350
    1ee6:	30 91 51 23 	lds	r19, 0x2351
    1eea:	23 2b       	or	r18, r19
    1eec:	11 f4       	brne	.+4      	; 0x1ef2 <udd_ctrl_interrupt_tc_setup+0xb2>
    1eee:	e4 de       	rcall	.-568    	; 0x1cb8 <udd_ctrl_send_zlp_in>
    1ef0:	13 c0       	rjmp	.+38     	; 0x1f18 <udd_ctrl_interrupt_tc_setup+0xd8>
    1ef2:	10 92 03 23 	sts	0x2303, r1
    1ef6:	10 92 04 23 	sts	0x2304, r1
    1efa:	10 92 01 23 	sts	0x2301, r1
    1efe:	10 92 02 23 	sts	0x2302, r1
    1f02:	81 e0       	ldi	r24, 0x01	; 1
    1f04:	80 93 05 23 	sts	0x2305, r24
    1f08:	e4 e1       	ldi	r30, 0x14	; 20
    1f0a:	f3 e2       	ldi	r31, 0x23	; 35
    1f0c:	02 e0       	ldi	r16, 0x02	; 2
    1f0e:	06 93       	lac	Z, r16
    1f10:	03 c0       	rjmp	.+6      	; 0x1f18 <udd_ctrl_interrupt_tc_setup+0xd8>
    1f12:	c0 e0       	ldi	r28, 0x00	; 0
    1f14:	01 c0       	rjmp	.+2      	; 0x1f18 <udd_ctrl_interrupt_tc_setup+0xd8>
    1f16:	c1 e0       	ldi	r28, 0x01	; 1
    1f18:	8c 2f       	mov	r24, r28
    1f1a:	cf 91       	pop	r28
    1f1c:	0f 91       	pop	r16
    1f1e:	08 95       	ret

00001f20 <udd_ep_trans_complet>:
    1f20:	bf 92       	push	r11
    1f22:	cf 92       	push	r12
    1f24:	df 92       	push	r13
    1f26:	ef 92       	push	r14
    1f28:	ff 92       	push	r15
    1f2a:	0f 93       	push	r16
    1f2c:	1f 93       	push	r17
    1f2e:	cf 93       	push	r28
    1f30:	df 93       	push	r29
    1f32:	b8 2e       	mov	r11, r24
    1f34:	6a df       	rcall	.-300    	; 0x1e0a <udd_ep_get_job>
    1f36:	ec 01       	movw	r28, r24
    1f38:	1b 2d       	mov	r17, r11
    1f3a:	11 1f       	adc	r17, r17
    1f3c:	11 27       	eor	r17, r17
    1f3e:	11 1f       	adc	r17, r17
    1f40:	8b 2d       	mov	r24, r11
    1f42:	8f 70       	andi	r24, 0x0F	; 15
    1f44:	e8 2e       	mov	r14, r24
    1f46:	f1 2c       	mov	r15, r1
    1f48:	ee 0c       	add	r14, r14
    1f4a:	ff 1c       	adc	r15, r15
    1f4c:	e1 0e       	add	r14, r17
    1f4e:	f1 1c       	adc	r15, r1
    1f50:	c7 01       	movw	r24, r14
    1f52:	88 0f       	add	r24, r24
    1f54:	99 1f       	adc	r25, r25
    1f56:	88 0f       	add	r24, r24
    1f58:	99 1f       	adc	r25, r25
    1f5a:	88 0f       	add	r24, r24
    1f5c:	99 1f       	adc	r25, r25
    1f5e:	9c 01       	movw	r18, r24
    1f60:	2c 5e       	subi	r18, 0xEC	; 236
    1f62:	3c 4d       	sbci	r19, 0xDC	; 220
    1f64:	79 01       	movw	r14, r18
    1f66:	c9 01       	movw	r24, r18
    1f68:	2b df       	rcall	.-426    	; 0x1dc0 <udd_ep_get_size>
    1f6a:	6c 01       	movw	r12, r24
    1f6c:	11 23       	and	r17, r17
    1f6e:	09 f4       	brne	.+2      	; 0x1f72 <udd_ep_trans_complet+0x52>
    1f70:	5b c0       	rjmp	.+182    	; 0x2028 <udd_ep_trans_complet+0x108>
    1f72:	d7 01       	movw	r26, r14
    1f74:	16 96       	adiw	r26, 0x06	; 6
    1f76:	2d 91       	ld	r18, X+
    1f78:	3c 91       	ld	r19, X
    1f7a:	17 97       	sbiw	r26, 0x07	; 7
    1f7c:	8d 81       	ldd	r24, Y+5	; 0x05
    1f7e:	9e 81       	ldd	r25, Y+6	; 0x06
    1f80:	28 0f       	add	r18, r24
    1f82:	39 1f       	adc	r19, r25
    1f84:	2d 83       	std	Y+5, r18	; 0x05
    1f86:	3e 83       	std	Y+6, r19	; 0x06
    1f88:	8b 81       	ldd	r24, Y+3	; 0x03
    1f8a:	9c 81       	ldd	r25, Y+4	; 0x04
    1f8c:	28 17       	cp	r18, r24
    1f8e:	39 07       	cpc	r19, r25
    1f90:	c9 f1       	breq	.+114    	; 0x2004 <udd_ep_trans_complet+0xe4>
    1f92:	fc 01       	movw	r30, r24
    1f94:	e2 1b       	sub	r30, r18
    1f96:	f3 0b       	sbc	r31, r19
    1f98:	9f 01       	movw	r18, r30
    1f9a:	21 15       	cp	r18, r1
    1f9c:	f4 e0       	ldi	r31, 0x04	; 4
    1f9e:	3f 07       	cpc	r19, r31
    1fa0:	40 f0       	brcs	.+16     	; 0x1fb2 <udd_ep_trans_complet+0x92>
    1fa2:	2f ef       	ldi	r18, 0xFF	; 255
    1fa4:	33 e0       	ldi	r19, 0x03	; 3
    1fa6:	c9 01       	movw	r24, r18
    1fa8:	b6 01       	movw	r22, r12
    1faa:	0e 94 d8 19 	call	0x33b0	; 0x33b0 <__udivmodhi4>
    1fae:	28 1b       	sub	r18, r24
    1fb0:	39 0b       	sbc	r19, r25
    1fb2:	88 81       	ld	r24, Y
    1fb4:	81 ff       	sbrs	r24, 1
    1fb6:	0a c0       	rjmp	.+20     	; 0x1fcc <udd_ep_trans_complet+0xac>
    1fb8:	c9 01       	movw	r24, r18
    1fba:	b6 01       	movw	r22, r12
    1fbc:	0e 94 d8 19 	call	0x33b0	; 0x33b0 <__udivmodhi4>
    1fc0:	41 e0       	ldi	r20, 0x01	; 1
    1fc2:	89 2b       	or	r24, r25
    1fc4:	09 f0       	breq	.+2      	; 0x1fc8 <udd_ep_trans_complet+0xa8>
    1fc6:	40 e0       	ldi	r20, 0x00	; 0
    1fc8:	94 2f       	mov	r25, r20
    1fca:	01 c0       	rjmp	.+2      	; 0x1fce <udd_ep_trans_complet+0xae>
    1fcc:	90 e0       	ldi	r25, 0x00	; 0
    1fce:	88 81       	ld	r24, Y
    1fd0:	90 fb       	bst	r25, 0
    1fd2:	81 f9       	bld	r24, 1
    1fd4:	88 83       	st	Y, r24
    1fd6:	d7 01       	movw	r26, r14
    1fd8:	16 96       	adiw	r26, 0x06	; 6
    1fda:	1d 92       	st	X+, r1
    1fdc:	1c 92       	st	X, r1
    1fde:	17 97       	sbiw	r26, 0x07	; 7
    1fe0:	12 96       	adiw	r26, 0x02	; 2
    1fe2:	2d 93       	st	X+, r18
    1fe4:	3c 93       	st	X, r19
    1fe6:	13 97       	sbiw	r26, 0x03	; 3
    1fe8:	29 81       	ldd	r18, Y+1	; 0x01
    1fea:	3a 81       	ldd	r19, Y+2	; 0x02
    1fec:	8d 81       	ldd	r24, Y+5	; 0x05
    1fee:	9e 81       	ldd	r25, Y+6	; 0x06
    1ff0:	82 0f       	add	r24, r18
    1ff2:	93 1f       	adc	r25, r19
    1ff4:	14 96       	adiw	r26, 0x04	; 4
    1ff6:	8d 93       	st	X+, r24
    1ff8:	9c 93       	st	X, r25
    1ffa:	15 97       	sbiw	r26, 0x05	; 5
    1ffc:	f7 01       	movw	r30, r14
    1ffe:	02 e0       	ldi	r16, 0x02	; 2
    2000:	06 93       	lac	Z, r16
    2002:	98 c0       	rjmp	.+304    	; 0x2134 <udd_ep_trans_complet+0x214>
    2004:	88 81       	ld	r24, Y
    2006:	81 ff       	sbrs	r24, 1
    2008:	87 c0       	rjmp	.+270    	; 0x2118 <udd_ep_trans_complet+0x1f8>
    200a:	8d 7f       	andi	r24, 0xFD	; 253
    200c:	88 83       	st	Y, r24
    200e:	d7 01       	movw	r26, r14
    2010:	16 96       	adiw	r26, 0x06	; 6
    2012:	1d 92       	st	X+, r1
    2014:	1c 92       	st	X, r1
    2016:	17 97       	sbiw	r26, 0x07	; 7
    2018:	12 96       	adiw	r26, 0x02	; 2
    201a:	1d 92       	st	X+, r1
    201c:	1c 92       	st	X, r1
    201e:	13 97       	sbiw	r26, 0x03	; 3
    2020:	f7 01       	movw	r30, r14
    2022:	02 e0       	ldi	r16, 0x02	; 2
    2024:	06 93       	lac	Z, r16
    2026:	86 c0       	rjmp	.+268    	; 0x2134 <udd_ep_trans_complet+0x214>
    2028:	d7 01       	movw	r26, r14
    202a:	12 96       	adiw	r26, 0x02	; 2
    202c:	0d 91       	ld	r16, X+
    202e:	1c 91       	ld	r17, X
    2030:	13 97       	sbiw	r26, 0x03	; 3
    2032:	88 81       	ld	r24, Y
    2034:	82 ff       	sbrs	r24, 2
    2036:	15 c0       	rjmp	.+42     	; 0x2062 <udd_ep_trans_complet+0x142>
    2038:	e9 81       	ldd	r30, Y+1	; 0x01
    203a:	fa 81       	ldd	r31, Y+2	; 0x02
    203c:	2d 81       	ldd	r18, Y+5	; 0x05
    203e:	3e 81       	ldd	r19, Y+6	; 0x06
    2040:	8b 81       	ldd	r24, Y+3	; 0x03
    2042:	9c 81       	ldd	r25, Y+4	; 0x04
    2044:	b6 01       	movw	r22, r12
    2046:	0e 94 d8 19 	call	0x33b0	; 0x33b0 <__udivmodhi4>
    204a:	b0 e4       	ldi	r27, 0x40	; 64
    204c:	bb 9e       	mul	r11, r27
    204e:	b0 01       	movw	r22, r0
    2050:	11 24       	eor	r1, r1
    2052:	63 52       	subi	r22, 0x23	; 35
    2054:	7e 4d       	sbci	r23, 0xDE	; 222
    2056:	ac 01       	movw	r20, r24
    2058:	cf 01       	movw	r24, r30
    205a:	82 0f       	add	r24, r18
    205c:	93 1f       	adc	r25, r19
    205e:	0e 94 14 1a 	call	0x3428	; 0x3428 <memcpy>
    2062:	2d 81       	ldd	r18, Y+5	; 0x05
    2064:	3e 81       	ldd	r19, Y+6	; 0x06
    2066:	20 0f       	add	r18, r16
    2068:	31 1f       	adc	r19, r17
    206a:	2d 83       	std	Y+5, r18	; 0x05
    206c:	3e 83       	std	Y+6, r19	; 0x06
    206e:	eb 81       	ldd	r30, Y+3	; 0x03
    2070:	fc 81       	ldd	r31, Y+4	; 0x04
    2072:	e2 17       	cp	r30, r18
    2074:	f3 07       	cpc	r31, r19
    2076:	10 f4       	brcc	.+4      	; 0x207c <udd_ep_trans_complet+0x15c>
    2078:	ed 83       	std	Y+5, r30	; 0x05
    207a:	fe 83       	std	Y+6, r31	; 0x06
    207c:	d7 01       	movw	r26, r14
    207e:	16 96       	adiw	r26, 0x06	; 6
    2080:	8d 91       	ld	r24, X+
    2082:	9c 91       	ld	r25, X
    2084:	17 97       	sbiw	r26, 0x07	; 7
    2086:	80 17       	cp	r24, r16
    2088:	91 07       	cpc	r25, r17
    208a:	09 f0       	breq	.+2      	; 0x208e <udd_ep_trans_complet+0x16e>
    208c:	45 c0       	rjmp	.+138    	; 0x2118 <udd_ep_trans_complet+0x1f8>
    208e:	8d 81       	ldd	r24, Y+5	; 0x05
    2090:	9e 81       	ldd	r25, Y+6	; 0x06
    2092:	e8 17       	cp	r30, r24
    2094:	f9 07       	cpc	r31, r25
    2096:	09 f4       	brne	.+2      	; 0x209a <udd_ep_trans_complet+0x17a>
    2098:	3f c0       	rjmp	.+126    	; 0x2118 <udd_ep_trans_complet+0x1f8>
    209a:	e8 1b       	sub	r30, r24
    209c:	f9 0b       	sbc	r31, r25
    209e:	e1 15       	cp	r30, r1
    20a0:	b4 e0       	ldi	r27, 0x04	; 4
    20a2:	fb 07       	cpc	r31, r27
    20a4:	48 f0       	brcs	.+18     	; 0x20b8 <udd_ep_trans_complet+0x198>
    20a6:	ef ef       	ldi	r30, 0xFF	; 255
    20a8:	f3 e0       	ldi	r31, 0x03	; 3
    20aa:	cf 01       	movw	r24, r30
    20ac:	b6 01       	movw	r22, r12
    20ae:	0e 94 d8 19 	call	0x33b0	; 0x33b0 <__udivmodhi4>
    20b2:	e8 1b       	sub	r30, r24
    20b4:	f9 0b       	sbc	r31, r25
    20b6:	06 c0       	rjmp	.+12     	; 0x20c4 <udd_ep_trans_complet+0x1a4>
    20b8:	cf 01       	movw	r24, r30
    20ba:	b6 01       	movw	r22, r12
    20bc:	0e 94 d8 19 	call	0x33b0	; 0x33b0 <__udivmodhi4>
    20c0:	e8 1b       	sub	r30, r24
    20c2:	f9 0b       	sbc	r31, r25
    20c4:	d7 01       	movw	r26, r14
    20c6:	12 96       	adiw	r26, 0x02	; 2
    20c8:	1d 92       	st	X+, r1
    20ca:	1c 92       	st	X, r1
    20cc:	13 97       	sbiw	r26, 0x03	; 3
    20ce:	ec 15       	cp	r30, r12
    20d0:	fd 05       	cpc	r31, r13
    20d2:	78 f4       	brcc	.+30     	; 0x20f2 <udd_ep_trans_complet+0x1d2>
    20d4:	88 81       	ld	r24, Y
    20d6:	84 60       	ori	r24, 0x04	; 4
    20d8:	88 83       	st	Y, r24
    20da:	b0 e4       	ldi	r27, 0x40	; 64
    20dc:	bb 9e       	mul	r11, r27
    20de:	c0 01       	movw	r24, r0
    20e0:	11 24       	eor	r1, r1
    20e2:	83 52       	subi	r24, 0x23	; 35
    20e4:	9e 4d       	sbci	r25, 0xDE	; 222
    20e6:	f7 01       	movw	r30, r14
    20e8:	84 83       	std	Z+4, r24	; 0x04
    20ea:	95 83       	std	Z+5, r25	; 0x05
    20ec:	c6 82       	std	Z+6, r12	; 0x06
    20ee:	d7 82       	std	Z+7, r13	; 0x07
    20f0:	0f c0       	rjmp	.+30     	; 0x2110 <udd_ep_trans_complet+0x1f0>
    20f2:	29 81       	ldd	r18, Y+1	; 0x01
    20f4:	3a 81       	ldd	r19, Y+2	; 0x02
    20f6:	8d 81       	ldd	r24, Y+5	; 0x05
    20f8:	9e 81       	ldd	r25, Y+6	; 0x06
    20fa:	82 0f       	add	r24, r18
    20fc:	93 1f       	adc	r25, r19
    20fe:	d7 01       	movw	r26, r14
    2100:	14 96       	adiw	r26, 0x04	; 4
    2102:	8d 93       	st	X+, r24
    2104:	9c 93       	st	X, r25
    2106:	15 97       	sbiw	r26, 0x05	; 5
    2108:	16 96       	adiw	r26, 0x06	; 6
    210a:	ed 93       	st	X+, r30
    210c:	fc 93       	st	X, r31
    210e:	17 97       	sbiw	r26, 0x07	; 7
    2110:	f7 01       	movw	r30, r14
    2112:	02 e0       	ldi	r16, 0x02	; 2
    2114:	06 93       	lac	Z, r16
    2116:	0e c0       	rjmp	.+28     	; 0x2134 <udd_ep_trans_complet+0x214>
    2118:	88 81       	ld	r24, Y
    211a:	80 ff       	sbrs	r24, 0
    211c:	0b c0       	rjmp	.+22     	; 0x2134 <udd_ep_trans_complet+0x214>
    211e:	8e 7f       	andi	r24, 0xFE	; 254
    2120:	88 83       	st	Y, r24
    2122:	ef 81       	ldd	r30, Y+7	; 0x07
    2124:	f8 85       	ldd	r31, Y+8	; 0x08
    2126:	30 97       	sbiw	r30, 0x00	; 0
    2128:	29 f0       	breq	.+10     	; 0x2134 <udd_ep_trans_complet+0x214>
    212a:	6d 81       	ldd	r22, Y+5	; 0x05
    212c:	7e 81       	ldd	r23, Y+6	; 0x06
    212e:	4b 2d       	mov	r20, r11
    2130:	80 e0       	ldi	r24, 0x00	; 0
    2132:	19 95       	eicall
    2134:	df 91       	pop	r29
    2136:	cf 91       	pop	r28
    2138:	1f 91       	pop	r17
    213a:	0f 91       	pop	r16
    213c:	ff 90       	pop	r15
    213e:	ef 90       	pop	r14
    2140:	df 90       	pop	r13
    2142:	cf 90       	pop	r12
    2144:	bf 90       	pop	r11
    2146:	08 95       	ret

00002148 <udd_attach>:
    2148:	cf 93       	push	r28
    214a:	cf b7       	in	r28, 0x3f	; 63
    214c:	f8 94       	cli
    214e:	81 e0       	ldi	r24, 0x01	; 1
    2150:	5b dd       	rcall	.-1354   	; 0x1c08 <udd_sleep_mode>
    2152:	ea ec       	ldi	r30, 0xCA	; 202
    2154:	f4 e0       	ldi	r31, 0x04	; 4
    2156:	80 e4       	ldi	r24, 0x40	; 64
    2158:	80 83       	st	Z, r24
    215a:	80 e2       	ldi	r24, 0x20	; 32
    215c:	80 83       	st	Z, r24
    215e:	e1 ec       	ldi	r30, 0xC1	; 193
    2160:	f4 e0       	ldi	r31, 0x04	; 4
    2162:	80 81       	ld	r24, Z
    2164:	81 60       	ori	r24, 0x01	; 1
    2166:	80 83       	st	Z, r24
    2168:	a9 ec       	ldi	r26, 0xC9	; 201
    216a:	b4 e0       	ldi	r27, 0x04	; 4
    216c:	8c 91       	ld	r24, X
    216e:	82 60       	ori	r24, 0x02	; 2
    2170:	8c 93       	st	X, r24
    2172:	e8 ec       	ldi	r30, 0xC8	; 200
    2174:	f4 e0       	ldi	r31, 0x04	; 4
    2176:	80 81       	ld	r24, Z
    2178:	80 64       	ori	r24, 0x40	; 64
    217a:	80 83       	st	Z, r24
    217c:	8c 91       	ld	r24, X
    217e:	81 60       	ori	r24, 0x01	; 1
    2180:	8c 93       	st	X, r24
    2182:	80 81       	ld	r24, Z
    2184:	80 68       	ori	r24, 0x80	; 128
    2186:	80 83       	st	Z, r24
    2188:	cf bf       	out	0x3f, r28	; 63
    218a:	cf 91       	pop	r28
    218c:	08 95       	ret

0000218e <udd_enable>:
    218e:	cf 93       	push	r28
    2190:	df 93       	push	r29
    2192:	c0 e6       	ldi	r28, 0x60	; 96
    2194:	d0 e0       	ldi	r29, 0x00	; 0
    2196:	18 82       	st	Y, r1
    2198:	80 e3       	ldi	r24, 0x30	; 48
    219a:	43 d7       	rcall	.+3718   	; 0x3022 <sysclk_enable_usb>
    219c:	e0 ec       	ldi	r30, 0xC0	; 192
    219e:	f4 e0       	ldi	r31, 0x04	; 4
    21a0:	80 81       	ld	r24, Z
    21a2:	80 64       	ori	r24, 0x40	; 64
    21a4:	80 83       	st	Z, r24
    21a6:	81 e0       	ldi	r24, 0x01	; 1
    21a8:	88 83       	st	Y, r24
    21aa:	cf b7       	in	r28, 0x3f	; 63
    21ac:	f8 94       	cli
    21ae:	10 92 15 23 	sts	0x2315, r1
    21b2:	10 92 1d 23 	sts	0x231D, r1
    21b6:	10 92 25 23 	sts	0x2325, r1
    21ba:	10 92 2d 23 	sts	0x232D, r1
    21be:	10 92 35 23 	sts	0x2335, r1
    21c2:	10 92 3d 23 	sts	0x233D, r1
    21c6:	ed e9       	ldi	r30, 0x9D	; 157
    21c8:	f2 e2       	ldi	r31, 0x22	; 34
    21ca:	80 81       	ld	r24, Z
    21cc:	8e 7f       	andi	r24, 0xFE	; 254
    21ce:	80 83       	st	Z, r24
    21d0:	e6 ea       	ldi	r30, 0xA6	; 166
    21d2:	f2 e2       	ldi	r31, 0x22	; 34
    21d4:	80 81       	ld	r24, Z
    21d6:	8e 7f       	andi	r24, 0xFE	; 254
    21d8:	80 83       	st	Z, r24
    21da:	ef ea       	ldi	r30, 0xAF	; 175
    21dc:	f2 e2       	ldi	r31, 0x22	; 34
    21de:	80 81       	ld	r24, Z
    21e0:	8e 7f       	andi	r24, 0xFE	; 254
    21e2:	80 83       	st	Z, r24
    21e4:	e8 eb       	ldi	r30, 0xB8	; 184
    21e6:	f2 e2       	ldi	r31, 0x22	; 34
    21e8:	80 81       	ld	r24, Z
    21ea:	8e 7f       	andi	r24, 0xFE	; 254
    21ec:	80 83       	st	Z, r24
    21ee:	6a e1       	ldi	r22, 0x1A	; 26
    21f0:	70 e0       	ldi	r23, 0x00	; 0
    21f2:	82 e0       	ldi	r24, 0x02	; 2
    21f4:	93 d7       	rcall	.+3878   	; 0x311c <nvm_read_byte>
    21f6:	8f 3f       	cpi	r24, 0xFF	; 255
    21f8:	19 f0       	breq	.+6      	; 0x2200 <udd_enable+0x72>
    21fa:	80 93 fa 04 	sts	0x04FA, r24
    21fe:	03 c0       	rjmp	.+6      	; 0x2206 <udd_enable+0x78>
    2200:	8f e1       	ldi	r24, 0x1F	; 31
    2202:	80 93 fa 04 	sts	0x04FA, r24
    2206:	6b e1       	ldi	r22, 0x1B	; 27
    2208:	70 e0       	ldi	r23, 0x00	; 0
    220a:	82 e0       	ldi	r24, 0x02	; 2
    220c:	87 d7       	rcall	.+3854   	; 0x311c <nvm_read_byte>
    220e:	8f 3f       	cpi	r24, 0xFF	; 255
    2210:	19 f0       	breq	.+6      	; 0x2218 <udd_enable+0x8a>
    2212:	80 93 fb 04 	sts	0x04FB, r24
    2216:	03 c0       	rjmp	.+6      	; 0x221e <udd_enable+0x90>
    2218:	8f e1       	ldi	r24, 0x1F	; 31
    221a:	80 93 fb 04 	sts	0x04FB, r24
    221e:	e0 ec       	ldi	r30, 0xC0	; 192
    2220:	f4 e0       	ldi	r31, 0x04	; 4
    2222:	80 81       	ld	r24, Z
    2224:	82 60       	ori	r24, 0x02	; 2
    2226:	80 83       	st	Z, r24
    2228:	80 81       	ld	r24, Z
    222a:	80 68       	ori	r24, 0x80	; 128
    222c:	80 83       	st	Z, r24
    222e:	80 81       	ld	r24, Z
    2230:	80 61       	ori	r24, 0x10	; 16
    2232:	80 83       	st	Z, r24
    2234:	84 e1       	ldi	r24, 0x14	; 20
    2236:	93 e2       	ldi	r25, 0x23	; 35
    2238:	86 83       	std	Z+6, r24	; 0x06
    223a:	97 83       	std	Z+7, r25	; 0x07
    223c:	80 81       	ld	r24, Z
    223e:	80 62       	ori	r24, 0x20	; 32
    2240:	80 83       	st	Z, r24
    2242:	8f ef       	ldi	r24, 0xFF	; 255
    2244:	80 93 c5 04 	sts	0x04C5, r24
    2248:	e8 ec       	ldi	r30, 0xC8	; 200
    224a:	f4 e0       	ldi	r31, 0x04	; 4
    224c:	80 81       	ld	r24, Z
    224e:	81 60       	ori	r24, 0x01	; 1
    2250:	80 83       	st	Z, r24
    2252:	10 92 48 23 	sts	0x2348, r1
    2256:	8f b7       	in	r24, 0x3f	; 63
    2258:	f8 94       	cli
    225a:	ee e6       	ldi	r30, 0x6E	; 110
    225c:	f3 e2       	ldi	r31, 0x23	; 35
    225e:	90 81       	ld	r25, Z
    2260:	9f 5f       	subi	r25, 0xFF	; 255
    2262:	90 83       	st	Z, r25
    2264:	8f bf       	out	0x3f, r24	; 63
    2266:	70 df       	rcall	.-288    	; 0x2148 <udd_attach>
    2268:	cf bf       	out	0x3f, r28	; 63
    226a:	df 91       	pop	r29
    226c:	cf 91       	pop	r28
    226e:	08 95       	ret

00002270 <udd_is_high_speed>:
    2270:	80 e0       	ldi	r24, 0x00	; 0
    2272:	08 95       	ret

00002274 <udd_set_address>:
    2274:	80 93 c3 04 	sts	0x04C3, r24
    2278:	08 95       	ret

0000227a <udd_getaddress>:
    227a:	80 91 c3 04 	lds	r24, 0x04C3
    227e:	08 95       	ret

00002280 <udd_get_frame_number>:
    2280:	80 91 44 23 	lds	r24, 0x2344
    2284:	90 91 45 23 	lds	r25, 0x2345
    2288:	08 95       	ret

0000228a <udd_get_micro_frame_number>:
    228a:	80 e0       	ldi	r24, 0x00	; 0
    228c:	90 e0       	ldi	r25, 0x00	; 0
    228e:	08 95       	ret

00002290 <udd_set_setup_payload>:
    2290:	80 93 52 23 	sts	0x2352, r24
    2294:	90 93 53 23 	sts	0x2353, r25
    2298:	60 93 54 23 	sts	0x2354, r22
    229c:	70 93 55 23 	sts	0x2355, r23
    22a0:	08 95       	ret

000022a2 <udd_ep_alloc>:
    22a2:	e8 2f       	mov	r30, r24
    22a4:	ef 70       	andi	r30, 0x0F	; 15
    22a6:	f0 e0       	ldi	r31, 0x00	; 0
    22a8:	ee 0f       	add	r30, r30
    22aa:	ff 1f       	adc	r31, r31
    22ac:	99 27       	eor	r25, r25
    22ae:	87 fd       	sbrc	r24, 7
    22b0:	90 95       	com	r25
    22b2:	88 27       	eor	r24, r24
    22b4:	99 0f       	add	r25, r25
    22b6:	88 1f       	adc	r24, r24
    22b8:	99 27       	eor	r25, r25
    22ba:	e8 0f       	add	r30, r24
    22bc:	f9 1f       	adc	r31, r25
    22be:	ee 0f       	add	r30, r30
    22c0:	ff 1f       	adc	r31, r31
    22c2:	ee 0f       	add	r30, r30
    22c4:	ff 1f       	adc	r31, r31
    22c6:	ee 0f       	add	r30, r30
    22c8:	ff 1f       	adc	r31, r31
    22ca:	ec 5e       	subi	r30, 0xEC	; 236
    22cc:	fc 4d       	sbci	r31, 0xDC	; 220
    22ce:	81 81       	ldd	r24, Z+1	; 0x01
    22d0:	80 7c       	andi	r24, 0xC0	; 192
    22d2:	09 f0       	breq	.+2      	; 0x22d6 <udd_ep_alloc+0x34>
    22d4:	43 c0       	rjmp	.+134    	; 0x235c <udd_ep_alloc+0xba>
    22d6:	63 70       	andi	r22, 0x03	; 3
    22d8:	61 30       	cpi	r22, 0x01	; 1
    22da:	29 f0       	breq	.+10     	; 0x22e6 <udd_ep_alloc+0x44>
    22dc:	10 f4       	brcc	.+4      	; 0x22e2 <udd_ep_alloc+0x40>
    22de:	80 e4       	ldi	r24, 0x40	; 64
    22e0:	03 c0       	rjmp	.+6      	; 0x22e8 <udd_ep_alloc+0x46>
    22e2:	80 e8       	ldi	r24, 0x80	; 128
    22e4:	01 c0       	rjmp	.+2      	; 0x22e8 <udd_ep_alloc+0x46>
    22e6:	80 ec       	ldi	r24, 0xC0	; 192
    22e8:	40 38       	cpi	r20, 0x80	; 128
    22ea:	51 05       	cpc	r21, r1
    22ec:	e1 f0       	breq	.+56     	; 0x2326 <udd_ep_alloc+0x84>
    22ee:	50 f4       	brcc	.+20     	; 0x2304 <udd_ep_alloc+0x62>
    22f0:	40 32       	cpi	r20, 0x20	; 32
    22f2:	51 05       	cpc	r21, r1
    22f4:	a1 f0       	breq	.+40     	; 0x231e <udd_ep_alloc+0x7c>
    22f6:	40 34       	cpi	r20, 0x40	; 64
    22f8:	51 05       	cpc	r21, r1
    22fa:	99 f0       	breq	.+38     	; 0x2322 <udd_ep_alloc+0x80>
    22fc:	40 31       	cpi	r20, 0x10	; 16
    22fe:	51 05       	cpc	r21, r1
    2300:	61 f4       	brne	.+24     	; 0x231a <udd_ep_alloc+0x78>
    2302:	19 c0       	rjmp	.+50     	; 0x2336 <udd_ep_alloc+0x94>
    2304:	41 15       	cp	r20, r1
    2306:	92 e0       	ldi	r25, 0x02	; 2
    2308:	59 07       	cpc	r21, r25
    230a:	89 f0       	breq	.+34     	; 0x232e <udd_ep_alloc+0x8c>
    230c:	4f 3f       	cpi	r20, 0xFF	; 255
    230e:	93 e0       	ldi	r25, 0x03	; 3
    2310:	59 07       	cpc	r21, r25
    2312:	79 f0       	breq	.+30     	; 0x2332 <udd_ep_alloc+0x90>
    2314:	41 15       	cp	r20, r1
    2316:	51 40       	sbci	r21, 0x01	; 1
    2318:	41 f0       	breq	.+16     	; 0x232a <udd_ep_alloc+0x88>
    231a:	20 e0       	ldi	r18, 0x00	; 0
    231c:	0d c0       	rjmp	.+26     	; 0x2338 <udd_ep_alloc+0x96>
    231e:	22 e0       	ldi	r18, 0x02	; 2
    2320:	0b c0       	rjmp	.+22     	; 0x2338 <udd_ep_alloc+0x96>
    2322:	23 e0       	ldi	r18, 0x03	; 3
    2324:	09 c0       	rjmp	.+18     	; 0x2338 <udd_ep_alloc+0x96>
    2326:	24 e0       	ldi	r18, 0x04	; 4
    2328:	07 c0       	rjmp	.+14     	; 0x2338 <udd_ep_alloc+0x96>
    232a:	25 e0       	ldi	r18, 0x05	; 5
    232c:	05 c0       	rjmp	.+10     	; 0x2338 <udd_ep_alloc+0x96>
    232e:	26 e0       	ldi	r18, 0x06	; 6
    2330:	03 c0       	rjmp	.+6      	; 0x2338 <udd_ep_alloc+0x96>
    2332:	27 e0       	ldi	r18, 0x07	; 7
    2334:	01 c0       	rjmp	.+2      	; 0x2338 <udd_ep_alloc+0x96>
    2336:	21 e0       	ldi	r18, 0x01	; 1
    2338:	11 82       	std	Z+1, r1	; 0x01
    233a:	96 e0       	ldi	r25, 0x06	; 6
    233c:	90 83       	st	Z, r25
    233e:	82 2b       	or	r24, r18
    2340:	81 83       	std	Z+1, r24	; 0x01
    2342:	81 81       	ldd	r24, Z+1	; 0x01
    2344:	80 7c       	andi	r24, 0xC0	; 192
    2346:	80 3c       	cpi	r24, 0xC0	; 192
    2348:	21 f4       	brne	.+8      	; 0x2352 <udd_ep_alloc+0xb0>
    234a:	81 81       	ldd	r24, Z+1	; 0x01
    234c:	87 70       	andi	r24, 0x07	; 7
    234e:	87 30       	cpi	r24, 0x07	; 7
    2350:	39 f0       	breq	.+14     	; 0x2360 <udd_ep_alloc+0xbe>
    2352:	81 81       	ldd	r24, Z+1	; 0x01
    2354:	80 62       	ori	r24, 0x20	; 32
    2356:	81 83       	std	Z+1, r24	; 0x01
    2358:	81 e0       	ldi	r24, 0x01	; 1
    235a:	08 95       	ret
    235c:	80 e0       	ldi	r24, 0x00	; 0
    235e:	08 95       	ret
    2360:	81 e0       	ldi	r24, 0x01	; 1
    2362:	08 95       	ret

00002364 <udd_ep_is_halted>:
    2364:	e8 2f       	mov	r30, r24
    2366:	ef 70       	andi	r30, 0x0F	; 15
    2368:	f0 e0       	ldi	r31, 0x00	; 0
    236a:	ee 0f       	add	r30, r30
    236c:	ff 1f       	adc	r31, r31
    236e:	99 27       	eor	r25, r25
    2370:	87 fd       	sbrc	r24, 7
    2372:	90 95       	com	r25
    2374:	88 27       	eor	r24, r24
    2376:	99 0f       	add	r25, r25
    2378:	88 1f       	adc	r24, r24
    237a:	99 27       	eor	r25, r25
    237c:	e8 0f       	add	r30, r24
    237e:	f9 1f       	adc	r31, r25
    2380:	ee 0f       	add	r30, r30
    2382:	ff 1f       	adc	r31, r31
    2384:	ee 0f       	add	r30, r30
    2386:	ff 1f       	adc	r31, r31
    2388:	ee 0f       	add	r30, r30
    238a:	ff 1f       	adc	r31, r31
    238c:	ec 5e       	subi	r30, 0xEC	; 236
    238e:	fc 4d       	sbci	r31, 0xDC	; 220
    2390:	81 81       	ldd	r24, Z+1	; 0x01
    2392:	82 fb       	bst	r24, 2
    2394:	88 27       	eor	r24, r24
    2396:	80 f9       	bld	r24, 0
    2398:	08 95       	ret

0000239a <udd_ep_clear_halt>:
    239a:	e8 2f       	mov	r30, r24
    239c:	ef 70       	andi	r30, 0x0F	; 15
    239e:	f0 e0       	ldi	r31, 0x00	; 0
    23a0:	ee 0f       	add	r30, r30
    23a2:	ff 1f       	adc	r31, r31
    23a4:	28 2f       	mov	r18, r24
    23a6:	33 27       	eor	r19, r19
    23a8:	27 fd       	sbrc	r18, 7
    23aa:	30 95       	com	r19
    23ac:	22 27       	eor	r18, r18
    23ae:	33 0f       	add	r19, r19
    23b0:	22 1f       	adc	r18, r18
    23b2:	33 27       	eor	r19, r19
    23b4:	e2 0f       	add	r30, r18
    23b6:	f3 1f       	adc	r31, r19
    23b8:	ee 0f       	add	r30, r30
    23ba:	ff 1f       	adc	r31, r31
    23bc:	ee 0f       	add	r30, r30
    23be:	ff 1f       	adc	r31, r31
    23c0:	ee 0f       	add	r30, r30
    23c2:	ff 1f       	adc	r31, r31
    23c4:	ec 5e       	subi	r30, 0xEC	; 236
    23c6:	fc 4d       	sbci	r31, 0xDC	; 220
    23c8:	91 81       	ldd	r25, Z+1	; 0x01
    23ca:	92 ff       	sbrs	r25, 2
    23cc:	0e c0       	rjmp	.+28     	; 0x23ea <udd_ep_clear_halt+0x50>
    23ce:	91 81       	ldd	r25, Z+1	; 0x01
    23d0:	9b 7f       	andi	r25, 0xFB	; 251
    23d2:	91 83       	std	Z+1, r25	; 0x01
    23d4:	1a dd       	rcall	.-1484   	; 0x1e0a <udd_ep_get_job>
    23d6:	fc 01       	movw	r30, r24
    23d8:	80 81       	ld	r24, Z
    23da:	80 ff       	sbrs	r24, 0
    23dc:	06 c0       	rjmp	.+12     	; 0x23ea <udd_ep_clear_halt+0x50>
    23de:	8e 7f       	andi	r24, 0xFE	; 254
    23e0:	80 83       	st	Z, r24
    23e2:	07 80       	ldd	r0, Z+7	; 0x07
    23e4:	f0 85       	ldd	r31, Z+8	; 0x08
    23e6:	e0 2d       	mov	r30, r0
    23e8:	19 95       	eicall
    23ea:	81 e0       	ldi	r24, 0x01	; 1
    23ec:	08 95       	ret

000023ee <udd_ep_run>:
    23ee:	7f 92       	push	r7
    23f0:	8f 92       	push	r8
    23f2:	9f 92       	push	r9
    23f4:	af 92       	push	r10
    23f6:	bf 92       	push	r11
    23f8:	cf 92       	push	r12
    23fa:	df 92       	push	r13
    23fc:	ef 92       	push	r14
    23fe:	ff 92       	push	r15
    2400:	0f 93       	push	r16
    2402:	1f 93       	push	r17
    2404:	cf 93       	push	r28
    2406:	df 93       	push	r29
    2408:	98 2e       	mov	r9, r24
    240a:	86 2e       	mov	r8, r22
    240c:	5a 01       	movw	r10, r20
    240e:	69 01       	movw	r12, r18
    2410:	fc dc       	rcall	.-1544   	; 0x1e0a <udd_ep_get_job>
    2412:	7c 01       	movw	r14, r24
    2414:	79 2c       	mov	r7, r9
    2416:	77 1c       	adc	r7, r7
    2418:	77 24       	eor	r7, r7
    241a:	77 1c       	adc	r7, r7
    241c:	c9 2d       	mov	r28, r9
    241e:	cf 70       	andi	r28, 0x0F	; 15
    2420:	d0 e0       	ldi	r29, 0x00	; 0
    2422:	cc 0f       	add	r28, r28
    2424:	dd 1f       	adc	r29, r29
    2426:	c7 0d       	add	r28, r7
    2428:	d1 1d       	adc	r29, r1
    242a:	cc 0f       	add	r28, r28
    242c:	dd 1f       	adc	r29, r29
    242e:	cc 0f       	add	r28, r28
    2430:	dd 1f       	adc	r29, r29
    2432:	cc 0f       	add	r28, r28
    2434:	dd 1f       	adc	r29, r29
    2436:	cc 5e       	subi	r28, 0xEC	; 236
    2438:	dc 4d       	sbci	r29, 0xDC	; 220
    243a:	89 81       	ldd	r24, Y+1	; 0x01
    243c:	80 7c       	andi	r24, 0xC0	; 192
    243e:	09 f4       	brne	.+2      	; 0x2442 <udd_ep_run+0x54>
    2440:	4b c0       	rjmp	.+150    	; 0x24d8 <udd_ep_run+0xea>
    2442:	89 81       	ldd	r24, Y+1	; 0x01
    2444:	80 7c       	andi	r24, 0xC0	; 192
    2446:	80 3c       	cpi	r24, 0xC0	; 192
    2448:	19 f0       	breq	.+6      	; 0x2450 <udd_ep_run+0x62>
    244a:	89 81       	ldd	r24, Y+1	; 0x01
    244c:	82 fd       	sbrc	r24, 2
    244e:	46 c0       	rjmp	.+140    	; 0x24dc <udd_ep_run+0xee>
    2450:	8f b7       	in	r24, 0x3f	; 63
    2452:	f8 94       	cli
    2454:	f7 01       	movw	r30, r14
    2456:	90 81       	ld	r25, Z
    2458:	90 ff       	sbrs	r25, 0
    245a:	03 c0       	rjmp	.+6      	; 0x2462 <udd_ep_run+0x74>
    245c:	8f bf       	out	0x3f, r24	; 63
    245e:	71 2c       	mov	r7, r1
    2460:	3e c0       	rjmp	.+124    	; 0x24de <udd_ep_run+0xf0>
    2462:	f7 01       	movw	r30, r14
    2464:	90 81       	ld	r25, Z
    2466:	91 60       	ori	r25, 0x01	; 1
    2468:	90 83       	st	Z, r25
    246a:	8f bf       	out	0x3f, r24	; 63
    246c:	f7 01       	movw	r30, r14
    246e:	a1 82       	std	Z+1, r10	; 0x01
    2470:	b2 82       	std	Z+2, r11	; 0x02
    2472:	c3 82       	std	Z+3, r12	; 0x03
    2474:	d4 82       	std	Z+4, r13	; 0x04
    2476:	15 82       	std	Z+5, r1	; 0x05
    2478:	16 82       	std	Z+6, r1	; 0x06
    247a:	07 83       	std	Z+7, r16	; 0x07
    247c:	10 87       	std	Z+8, r17	; 0x08
    247e:	81 10       	cpse	r8, r1
    2480:	06 c0       	rjmp	.+12     	; 0x248e <udd_ep_run+0xa0>
    2482:	91 e0       	ldi	r25, 0x01	; 1
    2484:	c1 14       	cp	r12, r1
    2486:	d1 04       	cpc	r13, r1
    2488:	19 f0       	breq	.+6      	; 0x2490 <udd_ep_run+0xa2>
    248a:	90 e0       	ldi	r25, 0x00	; 0
    248c:	01 c0       	rjmp	.+2      	; 0x2490 <udd_ep_run+0xa2>
    248e:	91 e0       	ldi	r25, 0x01	; 1
    2490:	f7 01       	movw	r30, r14
    2492:	80 81       	ld	r24, Z
    2494:	90 fb       	bst	r25, 0
    2496:	81 f9       	bld	r24, 1
    2498:	8b 7f       	andi	r24, 0xFB	; 251
    249a:	80 83       	st	Z, r24
    249c:	77 20       	and	r7, r7
    249e:	19 f0       	breq	.+6      	; 0x24a6 <udd_ep_run+0xb8>
    24a0:	1e 82       	std	Y+6, r1	; 0x06
    24a2:	1f 82       	std	Y+7, r1	; 0x07
    24a4:	14 c0       	rjmp	.+40     	; 0x24ce <udd_ep_run+0xe0>
    24a6:	89 81       	ldd	r24, Y+1	; 0x01
    24a8:	80 7c       	andi	r24, 0xC0	; 192
    24aa:	80 3c       	cpi	r24, 0xC0	; 192
    24ac:	61 f4       	brne	.+24     	; 0x24c6 <udd_ep_run+0xd8>
    24ae:	ce 01       	movw	r24, r28
    24b0:	87 dc       	rcall	.-1778   	; 0x1dc0 <udd_ep_get_size>
    24b2:	bc 01       	movw	r22, r24
    24b4:	c6 01       	movw	r24, r12
    24b6:	7c d7       	rcall	.+3832   	; 0x33b0 <__udivmodhi4>
    24b8:	89 2b       	or	r24, r25
    24ba:	29 f0       	breq	.+10     	; 0x24c6 <udd_ep_run+0xd8>
    24bc:	f7 01       	movw	r30, r14
    24be:	80 81       	ld	r24, Z
    24c0:	8e 7f       	andi	r24, 0xFE	; 254
    24c2:	80 83       	st	Z, r24
    24c4:	0c c0       	rjmp	.+24     	; 0x24de <udd_ep_run+0xf0>
    24c6:	1a 82       	std	Y+2, r1	; 0x02
    24c8:	1b 82       	std	Y+3, r1	; 0x03
    24ca:	1e 82       	std	Y+6, r1	; 0x06
    24cc:	1f 82       	std	Y+7, r1	; 0x07
    24ce:	89 2d       	mov	r24, r9
    24d0:	27 dd       	rcall	.-1458   	; 0x1f20 <udd_ep_trans_complet>
    24d2:	77 24       	eor	r7, r7
    24d4:	73 94       	inc	r7
    24d6:	03 c0       	rjmp	.+6      	; 0x24de <udd_ep_run+0xf0>
    24d8:	71 2c       	mov	r7, r1
    24da:	01 c0       	rjmp	.+2      	; 0x24de <udd_ep_run+0xf0>
    24dc:	71 2c       	mov	r7, r1
    24de:	87 2d       	mov	r24, r7
    24e0:	df 91       	pop	r29
    24e2:	cf 91       	pop	r28
    24e4:	1f 91       	pop	r17
    24e6:	0f 91       	pop	r16
    24e8:	ff 90       	pop	r15
    24ea:	ef 90       	pop	r14
    24ec:	df 90       	pop	r13
    24ee:	cf 90       	pop	r12
    24f0:	bf 90       	pop	r11
    24f2:	af 90       	pop	r10
    24f4:	9f 90       	pop	r9
    24f6:	8f 90       	pop	r8
    24f8:	7f 90       	pop	r7
    24fa:	08 95       	ret

000024fc <udd_ep_abort>:
    24fc:	ff 92       	push	r15
    24fe:	0f 93       	push	r16
    2500:	1f 93       	push	r17
    2502:	cf 93       	push	r28
    2504:	df 93       	push	r29
    2506:	18 2f       	mov	r17, r24
    2508:	f8 2e       	mov	r15, r24
    250a:	ff 1c       	adc	r15, r15
    250c:	ff 24       	eor	r15, r15
    250e:	ff 1c       	adc	r15, r15
    2510:	c8 2f       	mov	r28, r24
    2512:	cf 70       	andi	r28, 0x0F	; 15
    2514:	d0 e0       	ldi	r29, 0x00	; 0
    2516:	cc 0f       	add	r28, r28
    2518:	dd 1f       	adc	r29, r29
    251a:	cf 0d       	add	r28, r15
    251c:	d1 1d       	adc	r29, r1
    251e:	cc 0f       	add	r28, r28
    2520:	dd 1f       	adc	r29, r29
    2522:	cc 0f       	add	r28, r28
    2524:	dd 1f       	adc	r29, r29
    2526:	cc 0f       	add	r28, r28
    2528:	dd 1f       	adc	r29, r29
    252a:	cc 5e       	subi	r28, 0xEC	; 236
    252c:	dc 4d       	sbci	r29, 0xDC	; 220
    252e:	6d dc       	rcall	.-1830   	; 0x1e0a <udd_ep_get_job>
    2530:	dc 01       	movw	r26, r24
    2532:	fe 01       	movw	r30, r28
    2534:	02 e0       	ldi	r16, 0x02	; 2
    2536:	05 93       	las	Z, r16
    2538:	8c 91       	ld	r24, X
    253a:	80 ff       	sbrs	r24, 0
    253c:	12 c0       	rjmp	.+36     	; 0x2562 <udd_ep_abort+0x66>
    253e:	8e 7f       	andi	r24, 0xFE	; 254
    2540:	8c 93       	st	X, r24
    2542:	17 96       	adiw	r26, 0x07	; 7
    2544:	ed 91       	ld	r30, X+
    2546:	fc 91       	ld	r31, X
    2548:	18 97       	sbiw	r26, 0x08	; 8
    254a:	30 97       	sbiw	r30, 0x00	; 0
    254c:	51 f0       	breq	.+20     	; 0x2562 <udd_ep_abort+0x66>
    254e:	ff 20       	and	r15, r15
    2550:	19 f0       	breq	.+6      	; 0x2558 <udd_ep_abort+0x5c>
    2552:	6e 81       	ldd	r22, Y+6	; 0x06
    2554:	7f 81       	ldd	r23, Y+7	; 0x07
    2556:	02 c0       	rjmp	.+4      	; 0x255c <udd_ep_abort+0x60>
    2558:	6a 81       	ldd	r22, Y+2	; 0x02
    255a:	7b 81       	ldd	r23, Y+3	; 0x03
    255c:	41 2f       	mov	r20, r17
    255e:	81 e0       	ldi	r24, 0x01	; 1
    2560:	19 95       	eicall
    2562:	df 91       	pop	r29
    2564:	cf 91       	pop	r28
    2566:	1f 91       	pop	r17
    2568:	0f 91       	pop	r16
    256a:	ff 90       	pop	r15
    256c:	08 95       	ret

0000256e <udd_ep_free>:
    256e:	cf 93       	push	r28
    2570:	c8 2f       	mov	r28, r24
    2572:	c4 df       	rcall	.-120    	; 0x24fc <udd_ep_abort>
    2574:	ec 2f       	mov	r30, r28
    2576:	ef 70       	andi	r30, 0x0F	; 15
    2578:	f0 e0       	ldi	r31, 0x00	; 0
    257a:	ee 0f       	add	r30, r30
    257c:	ff 1f       	adc	r31, r31
    257e:	8c 2f       	mov	r24, r28
    2580:	99 27       	eor	r25, r25
    2582:	87 fd       	sbrc	r24, 7
    2584:	90 95       	com	r25
    2586:	88 27       	eor	r24, r24
    2588:	99 0f       	add	r25, r25
    258a:	88 1f       	adc	r24, r24
    258c:	99 27       	eor	r25, r25
    258e:	e8 0f       	add	r30, r24
    2590:	f9 1f       	adc	r31, r25
    2592:	ee 0f       	add	r30, r30
    2594:	ff 1f       	adc	r31, r31
    2596:	ee 0f       	add	r30, r30
    2598:	ff 1f       	adc	r31, r31
    259a:	ee 0f       	add	r30, r30
    259c:	ff 1f       	adc	r31, r31
    259e:	ec 5e       	subi	r30, 0xEC	; 236
    25a0:	fc 4d       	sbci	r31, 0xDC	; 220
    25a2:	11 82       	std	Z+1, r1	; 0x01
    25a4:	cf 91       	pop	r28
    25a6:	08 95       	ret

000025a8 <udd_ep_set_halt>:
    25a8:	0f 93       	push	r16
    25aa:	e8 2f       	mov	r30, r24
    25ac:	ef 70       	andi	r30, 0x0F	; 15
    25ae:	f0 e0       	ldi	r31, 0x00	; 0
    25b0:	ee 0f       	add	r30, r30
    25b2:	ff 1f       	adc	r31, r31
    25b4:	28 2f       	mov	r18, r24
    25b6:	33 27       	eor	r19, r19
    25b8:	27 fd       	sbrc	r18, 7
    25ba:	30 95       	com	r19
    25bc:	22 27       	eor	r18, r18
    25be:	33 0f       	add	r19, r19
    25c0:	22 1f       	adc	r18, r18
    25c2:	33 27       	eor	r19, r19
    25c4:	e2 0f       	add	r30, r18
    25c6:	f3 1f       	adc	r31, r19
    25c8:	ee 0f       	add	r30, r30
    25ca:	ff 1f       	adc	r31, r31
    25cc:	ee 0f       	add	r30, r30
    25ce:	ff 1f       	adc	r31, r31
    25d0:	ee 0f       	add	r30, r30
    25d2:	ff 1f       	adc	r31, r31
    25d4:	ec 5e       	subi	r30, 0xEC	; 236
    25d6:	fc 4d       	sbci	r31, 0xDC	; 220
    25d8:	91 81       	ldd	r25, Z+1	; 0x01
    25da:	94 60       	ori	r25, 0x04	; 4
    25dc:	91 83       	std	Z+1, r25	; 0x01
    25de:	01 e0       	ldi	r16, 0x01	; 1
    25e0:	06 93       	lac	Z, r16
    25e2:	8c df       	rcall	.-232    	; 0x24fc <udd_ep_abort>
    25e4:	81 e0       	ldi	r24, 0x01	; 1
    25e6:	0f 91       	pop	r16
    25e8:	08 95       	ret

000025ea <__vector_125>:
 * USB bus event interrupt includes :
 * - USB line events SOF, reset, suspend, resume, wakeup
 * - endpoint control errors underflow, overflow, stall
 */
ISR(USB_BUSEVENT_vect)
{
    25ea:	1f 92       	push	r1
    25ec:	0f 92       	push	r0
    25ee:	0f b6       	in	r0, 0x3f	; 63
    25f0:	0f 92       	push	r0
    25f2:	11 24       	eor	r1, r1
    25f4:	0b b6       	in	r0, 0x3b	; 59
    25f6:	0f 92       	push	r0
    25f8:	0f 93       	push	r16
    25fa:	2f 93       	push	r18
    25fc:	3f 93       	push	r19
    25fe:	4f 93       	push	r20
    2600:	5f 93       	push	r21
    2602:	6f 93       	push	r22
    2604:	7f 93       	push	r23
    2606:	8f 93       	push	r24
    2608:	9f 93       	push	r25
    260a:	af 93       	push	r26
    260c:	bf 93       	push	r27
    260e:	ef 93       	push	r30
    2610:	ff 93       	push	r31
	if (udd_is_start_of_frame_event()) {
    2612:	80 91 cb 04 	lds	r24, 0x04CB
    2616:	88 23       	and	r24, r24
    2618:	34 f4       	brge	.+12     	; 0x2626 <__vector_125+0x3c>
		udd_ack_start_of_frame_event();
    261a:	80 e8       	ldi	r24, 0x80	; 128
    261c:	80 93 ca 04 	sts	0x04CA, r24
		udc_sof_notify();
    2620:	0e 94 e6 04 	call	0x9cc	; 0x9cc <udc_sof_notify>
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
#endif
		goto udd_interrupt_bus_event_end;
    2624:	88 c0       	rjmp	.+272    	; 0x2736 <__vector_125+0x14c>
}

static bool udd_ctrl_interrupt_error(void)
{
	// Underflow only managed for control endpoint
	if (udd_is_underflow_event()) {
    2626:	80 91 cb 04 	lds	r24, 0x04CB
    262a:	82 ff       	sbrs	r24, 2
    262c:	20 c0       	rjmp	.+64     	; 0x266e <__vector_125+0x84>
		udd_ack_underflow_event();
    262e:	84 e0       	ldi	r24, 0x04	; 4
    2630:	80 93 ca 04 	sts	0x04CA, r24
		if (udd_control_in_underflow()) {
    2634:	80 91 1c 23 	lds	r24, 0x231C
    2638:	86 ff       	sbrs	r24, 6
    263a:	7d c0       	rjmp	.+250    	; 0x2736 <__vector_125+0x14c>
	udd_control_out_clear_NACK0();
}

static void udd_ctrl_underflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    263c:	80 91 cc 04 	lds	r24, 0x04CC
    2640:	81 fd       	sbrc	r24, 1
    2642:	79 c0       	rjmp	.+242    	; 0x2736 <__vector_125+0x14c>
    2644:	fd db       	rcall	.-2054   	; 0x1e40 <udd_ctrl_interrupt_tc_setup>
    2646:	81 11       	cpse	r24, r1
    2648:	76 c0       	rjmp	.+236    	; 0x2736 <__vector_125+0x14c>
		return; // underflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    264a:	80 91 05 23 	lds	r24, 0x2305
    264e:	81 30       	cpi	r24, 0x01	; 1
    2650:	11 f4       	brne	.+4      	; 0x2656 <__vector_125+0x6c>
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
    2652:	32 db       	rcall	.-2460   	; 0x1cb8 <udd_ctrl_send_zlp_in>
    2654:	70 c0       	rjmp	.+224    	; 0x2736 <__vector_125+0x14c>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    2656:	84 30       	cpi	r24, 0x04	; 4
    2658:	09 f0       	breq	.+2      	; 0x265c <__vector_125+0x72>
    265a:	6d c0       	rjmp	.+218    	; 0x2736 <__vector_125+0x14c>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data and following status stage
		udd_control_in_enable_stall();
    265c:	ed e1       	ldi	r30, 0x1D	; 29
    265e:	f3 e2       	ldi	r31, 0x23	; 35
    2660:	04 e0       	ldi	r16, 0x04	; 4
    2662:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    2664:	e5 e1       	ldi	r30, 0x15	; 21
    2666:	f3 e2       	ldi	r31, 0x23	; 35
    2668:	04 e0       	ldi	r16, 0x04	; 4
    266a:	05 93       	las	Z, r16
    266c:	64 c0       	rjmp	.+200    	; 0x2736 <__vector_125+0x14c>
			udd_ctrl_underflow();
		}
		return true;
	}
	// Overflow only managed for control endpoint
	if (udd_is_overflow_event()) {
    266e:	80 91 cb 04 	lds	r24, 0x04CB
    2672:	81 ff       	sbrs	r24, 1
    2674:	5b c0       	rjmp	.+182    	; 0x272c <__vector_125+0x142>
		udd_ack_overflow_event();
    2676:	82 e0       	ldi	r24, 0x02	; 2
    2678:	80 93 ca 04 	sts	0x04CA, r24
		if (udd_control_out_overflow()) {
    267c:	80 91 14 23 	lds	r24, 0x2314
    2680:	86 ff       	sbrs	r24, 6
    2682:	59 c0       	rjmp	.+178    	; 0x2736 <__vector_125+0x14c>
	}
}

static void udd_ctrl_overflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    2684:	80 91 cc 04 	lds	r24, 0x04CC
    2688:	81 fd       	sbrc	r24, 1
    268a:	55 c0       	rjmp	.+170    	; 0x2736 <__vector_125+0x14c>
    268c:	d9 db       	rcall	.-2126   	; 0x1e40 <udd_ctrl_interrupt_tc_setup>
    268e:	81 11       	cpse	r24, r1
    2690:	52 c0       	rjmp	.+164    	; 0x2736 <__vector_125+0x14c>
		return; // overflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    2692:	80 91 05 23 	lds	r24, 0x2305
    2696:	82 30       	cpi	r24, 0x02	; 2
    2698:	41 f4       	brne	.+16     	; 0x26aa <__vector_125+0xc0>
	udd_control_in_clear_NACK0();
}

static void udd_ctrl_send_zlp_out(void)
{
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    269a:	84 e0       	ldi	r24, 0x04	; 4
    269c:	80 93 05 23 	sts	0x2305, r24
	// Valid reception of OUT packet on control endpoint
	udd_control_out_clear_NACK0();
    26a0:	e4 e1       	ldi	r30, 0x14	; 20
    26a2:	f3 e2       	ldi	r31, 0x23	; 35
    26a4:	02 e0       	ldi	r16, 0x02	; 2
    26a6:	06 93       	lac	Z, r16
    26a8:	46 c0       	rjmp	.+140    	; 0x2736 <__vector_125+0x14c>
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
		// Host want to stop IN transaction
		// then stop to wait IN data phase and wait OUT ZLP handshake
		udd_ctrl_send_zlp_out();
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    26aa:	83 30       	cpi	r24, 0x03	; 3
    26ac:	09 f0       	breq	.+2      	; 0x26b0 <__vector_125+0xc6>
    26ae:	43 c0       	rjmp	.+134    	; 0x2736 <__vector_125+0x14c>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data and following status stage
		udd_control_in_enable_stall();
    26b0:	ed e1       	ldi	r30, 0x1D	; 29
    26b2:	f3 e2       	ldi	r31, 0x23	; 35
    26b4:	04 e0       	ldi	r16, 0x04	; 4
    26b6:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    26b8:	e5 e1       	ldi	r30, 0x15	; 21
    26ba:	f3 e2       	ldi	r31, 0x23	; 35
    26bc:	04 e0       	ldi	r16, 0x04	; 4
    26be:	05 93       	las	Z, r16
    26c0:	3a c0       	rjmp	.+116    	; 0x2736 <__vector_125+0x14c>

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
		udd_ack_reset_event();
    26c2:	80 e1       	ldi	r24, 0x10	; 16
    26c4:	80 93 ca 04 	sts	0x04CA, r24
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i < USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
    26c8:	81 e0       	ldi	r24, 0x01	; 1
    26ca:	18 df       	rcall	.-464    	; 0x24fc <udd_ep_abort>
			udd_ep_abort(i | USB_EP_DIR_IN);
    26cc:	81 e8       	ldi	r24, 0x81	; 129
    26ce:	16 df       	rcall	.-468    	; 0x24fc <udd_ep_abort>
		}
#endif
		udc_reset();
    26d0:	0e 94 bf 04 	call	0x97e	; 0x97e <udc_reset>

		// Reset USB address to 0
		udd_set_device_address(0);
    26d4:	10 92 c3 04 	sts	0x04C3, r1
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    26d8:	e5 e1       	ldi	r30, 0x15	; 21
    26da:	f3 e2       	ldi	r31, 0x23	; 35
    26dc:	10 82       	st	Z, r1
	udd_endpoint_clear_status(ep_ctrl);
    26de:	96 e0       	ldi	r25, 0x06	; 6
    26e0:	90 93 14 23 	sts	0x2314, r25
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    26e4:	83 e4       	ldi	r24, 0x43	; 67
    26e6:	80 83       	st	Z, r24
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    26e8:	ed e1       	ldi	r30, 0x1D	; 29
    26ea:	f3 e2       	ldi	r31, 0x23	; 35
    26ec:	10 82       	st	Z, r1
	udd_endpoint_clear_status(ep_ctrl);
    26ee:	90 93 1c 23 	sts	0x231C, r25
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    26f2:	80 83       	st	Z, r24
		udd_set_device_address(0);
		// Alloc and configure control endpoint
		udd_ep_init(0, USB_EP_TYPE_CONTROL, USB_DEVICE_EP_CTRL_SIZE);
		udd_ep_init(0 | USB_EP_DIR_IN, USB_EP_TYPE_CONTROL,
				USB_DEVICE_EP_CTRL_SIZE);
		udd_control_out_set_buf(&udd_ctrl_buffer);
    26f4:	81 ec       	ldi	r24, 0xC1	; 193
    26f6:	92 e2       	ldi	r25, 0x22	; 34
    26f8:	80 93 18 23 	sts	0x2318, r24
    26fc:	90 93 19 23 	sts	0x2319, r25
		// Reset endpoint control management
		udd_ctrl_init();
    2700:	a2 da       	rcall	.-2748   	; 0x1c46 <udd_ctrl_init>
		goto udd_interrupt_bus_event_end;
    2702:	19 c0       	rjmp	.+50     	; 0x2736 <__vector_125+0x14c>
	}

	if (udd_is_suspend_event()) {
    2704:	80 91 cb 04 	lds	r24, 0x04CB
    2708:	86 ff       	sbrs	r24, 6
    270a:	06 c0       	rjmp	.+12     	; 0x2718 <__vector_125+0x12e>
		udd_ack_suspend_event();
    270c:	80 e4       	ldi	r24, 0x40	; 64
    270e:	80 93 ca 04 	sts	0x04CA, r24
		udd_sleep_mode(false); // Enter in SUSPEND mode
    2712:	80 e0       	ldi	r24, 0x00	; 0
    2714:	79 da       	rcall	.-2830   	; 0x1c08 <udd_sleep_mode>
#ifdef UDC_SUSPEND_EVENT
		UDC_SUSPEND_EVENT();
#endif
		goto udd_interrupt_bus_event_end;
    2716:	0f c0       	rjmp	.+30     	; 0x2736 <__vector_125+0x14c>
	}

	if (udd_is_resume_event()) {
    2718:	80 91 cb 04 	lds	r24, 0x04CB
    271c:	85 ff       	sbrs	r24, 5
    271e:	0b c0       	rjmp	.+22     	; 0x2736 <__vector_125+0x14c>
		udd_ack_resume_event();
    2720:	80 e2       	ldi	r24, 0x20	; 32
    2722:	80 93 ca 04 	sts	0x04CA, r24
		udd_sleep_mode(true); // Enter in power reduction mode
    2726:	81 e0       	ldi	r24, 0x01	; 1
    2728:	6f da       	rcall	.-2850   	; 0x1c08 <udd_sleep_mode>
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
#endif
		goto udd_interrupt_bus_event_end;
    272a:	05 c0       	rjmp	.+10     	; 0x2736 <__vector_125+0x14c>
	}

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
    272c:	80 91 cb 04 	lds	r24, 0x04CB
    2730:	84 ff       	sbrs	r24, 4
    2732:	e8 cf       	rjmp	.-48     	; 0x2704 <__vector_125+0x11a>
    2734:	c6 cf       	rjmp	.-116    	; 0x26c2 <__vector_125+0xd8>
		goto udd_interrupt_bus_event_end;
	}

udd_interrupt_bus_event_end:
	return;
}
    2736:	ff 91       	pop	r31
    2738:	ef 91       	pop	r30
    273a:	bf 91       	pop	r27
    273c:	af 91       	pop	r26
    273e:	9f 91       	pop	r25
    2740:	8f 91       	pop	r24
    2742:	7f 91       	pop	r23
    2744:	6f 91       	pop	r22
    2746:	5f 91       	pop	r21
    2748:	4f 91       	pop	r20
    274a:	3f 91       	pop	r19
    274c:	2f 91       	pop	r18
    274e:	0f 91       	pop	r16
    2750:	0f 90       	pop	r0
    2752:	0b be       	out	0x3b, r0	; 59
    2754:	0f 90       	pop	r0
    2756:	0f be       	out	0x3f, r0	; 63
    2758:	0f 90       	pop	r0
    275a:	1f 90       	pop	r1
    275c:	18 95       	reti

0000275e <__vector_126>:
 * \brief Function called by USB transfer complete interrupt
 *
 * USB transfer complete interrupt includes events about endpoint transfer on all endpoints.
 */
ISR(USB_TRNCOMPL_vect)
{
    275e:	1f 92       	push	r1
    2760:	0f 92       	push	r0
    2762:	0f b6       	in	r0, 0x3f	; 63
    2764:	0f 92       	push	r0
    2766:	11 24       	eor	r1, r1
    2768:	0b b6       	in	r0, 0x3b	; 59
    276a:	0f 92       	push	r0
    276c:	0f 93       	push	r16
    276e:	1f 93       	push	r17
    2770:	2f 93       	push	r18
    2772:	3f 93       	push	r19
    2774:	4f 93       	push	r20
    2776:	5f 93       	push	r21
    2778:	6f 93       	push	r22
    277a:	7f 93       	push	r23
    277c:	8f 93       	push	r24
    277e:	9f 93       	push	r25
    2780:	af 93       	push	r26
    2782:	bf 93       	push	r27
    2784:	cf 93       	push	r28
    2786:	df 93       	push	r29
    2788:	ef 93       	push	r30
    278a:	ff 93       	push	r31
	int8_t rp;
	UDD_EP_t *ep_ctrl;
	udd_ep_id_t ep;
#endif

	if (!udd_is_tc_event()) {
    278c:	80 91 cc 04 	lds	r24, 0x04CC
    2790:	81 fd       	sbrc	r24, 1
    2792:	03 c0       	rjmp	.+6      	; 0x279a <__vector_126+0x3c>
		// If no other transfer complete
		// then check reception of SETUP packet on control endpoint
		if (udd_ctrl_interrupt_tc_setup()) {
    2794:	55 db       	rcall	.-2390   	; 0x1e40 <udd_ctrl_interrupt_tc_setup>
    2796:	81 11       	cpse	r24, r1
    2798:	b8 c0       	rjmp	.+368    	; 0x290a <__vector_126+0x1ac>
			goto udd_interrupt_tc_end;
		}
		Assert(false);
	}
	// Check IN/OUT transfer complete on all endpoints
	udd_ack_tc_event();
    279a:	82 e0       	ldi	r24, 0x02	; 2
    279c:	80 93 cc 04 	sts	0x04CC, r24

#if (0!=USB_DEVICE_MAX_EP)
	//** Decode TC FIFO
	// Compute ep addr
	rp = udd_get_fifo_rp();
    27a0:	80 91 c5 04 	lds	r24, 0x04C5
	i_fifo = 2 * (1 + ~rp);
    27a4:	81 95       	neg	r24
    27a6:	88 0f       	add	r24, r24
	ad = ((uint16_t) udd_sram.ep_ctrl) - i_fifo;
    27a8:	e4 e1       	ldi	r30, 0x14	; 20
    27aa:	f3 e2       	ldi	r31, 0x23	; 35
    27ac:	e8 1b       	sub	r30, r24
    27ae:	f1 09       	sbc	r31, r1
	p_ad = (uint16_t *) ad;
	// Compute ep
	ep_index = (((uint16_t) * p_ad - ((uint16_t) udd_sram.ep_ctrl)) >> 3);
    27b0:	20 81       	ld	r18, Z
    27b2:	31 81       	ldd	r19, Z+1	; 0x01
    27b4:	24 51       	subi	r18, 0x14	; 20
    27b6:	33 42       	sbci	r19, 0x23	; 35
    27b8:	36 95       	lsr	r19
    27ba:	27 95       	ror	r18
    27bc:	36 95       	lsr	r19
    27be:	27 95       	ror	r18
    27c0:	36 95       	lsr	r19
    27c2:	27 95       	ror	r18
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
    27c4:	82 2f       	mov	r24, r18
    27c6:	86 95       	lsr	r24
    27c8:	20 ff       	sbrs	r18, 0
    27ca:	02 c0       	rjmp	.+4      	; 0x27d0 <__vector_126+0x72>
    27cc:	90 e8       	ldi	r25, 0x80	; 128
    27ce:	01 c0       	rjmp	.+2      	; 0x27d2 <__vector_126+0x74>
    27d0:	90 e0       	ldi	r25, 0x00	; 0
    27d2:	89 0f       	add	r24, r25
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    27d4:	e8 2f       	mov	r30, r24
    27d6:	ef 70       	andi	r30, 0x0F	; 15
    27d8:	f0 e0       	ldi	r31, 0x00	; 0
    27da:	ee 0f       	add	r30, r30
    27dc:	ff 1f       	adc	r31, r31
			((ep & USB_EP_DIR_IN) ? 1 : 0))];
    27de:	28 2f       	mov	r18, r24
    27e0:	33 27       	eor	r19, r19
    27e2:	27 fd       	sbrc	r18, 7
    27e4:	30 95       	com	r19
    27e6:	22 27       	eor	r18, r18
    27e8:	33 0f       	add	r19, r19
    27ea:	22 1f       	adc	r18, r18
    27ec:	33 27       	eor	r19, r19
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    27ee:	e2 0f       	add	r30, r18
    27f0:	f3 1f       	adc	r31, r19
	ep_index = (((uint16_t) * p_ad - ((uint16_t) udd_sram.ep_ctrl)) >> 3);
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
	Assert(USB_DEVICE_MAX_EP >= (ep & USB_EP_ADDR_MASK));

	// Ack IT TC of endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
    27f2:	ee 0f       	add	r30, r30
    27f4:	ff 1f       	adc	r31, r31
    27f6:	ee 0f       	add	r30, r30
    27f8:	ff 1f       	adc	r31, r31
    27fa:	ee 0f       	add	r30, r30
    27fc:	ff 1f       	adc	r31, r31
    27fe:	ec 5e       	subi	r30, 0xEC	; 236
    2800:	fc 4d       	sbci	r31, 0xDC	; 220
	if (!udd_endpoint_transfer_complete(ep_ctrl)) {
    2802:	90 81       	ld	r25, Z
    2804:	95 ff       	sbrs	r25, 5
    2806:	81 c0       	rjmp	.+258    	; 0x290a <__vector_126+0x1ac>
		return; // Error, TC is generated by Multipacket transfer
	}
	udd_endpoint_ack_transfer_complete(ep_ctrl);
    2808:	00 e2       	ldi	r16, 0x20	; 32
    280a:	06 93       	lac	Z, r16

	// Check status on control endpoint
	if (ep == 0) {
    280c:	81 11       	cpse	r24, r1
    280e:	78 c0       	rjmp	.+240    	; 0x2900 <__vector_126+0x1a2>

static void udd_ctrl_out_received(void)
{
	uint16_t nb_data;

	if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    2810:	80 91 05 23 	lds	r24, 0x2305
    2814:	84 30       	cpi	r24, 0x04	; 4
    2816:	19 f4       	brne	.+6      	; 0x281e <__vector_126+0xc0>
		// Valid end of setup request
		udd_ctrl_endofrequest();
    2818:	5d da       	rcall	.-2886   	; 0x1cd4 <udd_ctrl_endofrequest>
		// Reinitializes control endpoint management
		udd_ctrl_init();
    281a:	15 da       	rcall	.-3030   	; 0x1c46 <udd_ctrl_init>
    281c:	76 c0       	rjmp	.+236    	; 0x290a <__vector_126+0x1ac>
		return;
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_OUT);

	// Read data received during OUT phase
	nb_data = udd_control_out_get_bytecnt();
    281e:	c0 91 16 23 	lds	r28, 0x2316
    2822:	d0 91 17 23 	lds	r29, 0x2317

	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    2826:	80 91 54 23 	lds	r24, 0x2354
    282a:	90 91 55 23 	lds	r25, 0x2355
    282e:	00 91 01 23 	lds	r16, 0x2301
    2832:	10 91 02 23 	lds	r17, 0x2302
    2836:	98 01       	movw	r18, r16
    2838:	2c 0f       	add	r18, r28
    283a:	3d 1f       	adc	r19, r29
    283c:	82 17       	cp	r24, r18
    283e:	93 07       	cpc	r25, r19
    2840:	18 f4       	brcc	.+6      	; 0x2848 <__vector_126+0xea>
		// Payload buffer too small, ignore data remaining
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    2842:	ec 01       	movw	r28, r24
    2844:	c0 1b       	sub	r28, r16
    2846:	d1 0b       	sbc	r29, r17
	}

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
    2848:	80 91 52 23 	lds	r24, 0x2352
    284c:	90 91 53 23 	lds	r25, 0x2353
    2850:	ae 01       	movw	r20, r28
    2852:	61 ec       	ldi	r22, 0xC1	; 193
    2854:	72 e2       	ldi	r23, 0x22	; 34
    2856:	80 0f       	add	r24, r16
    2858:	91 1f       	adc	r25, r17
    285a:	e6 d5       	rcall	.+3020   	; 0x3428 <memcpy>
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;
    285c:	0c 0f       	add	r16, r28
    285e:	1d 1f       	adc	r17, r29
    2860:	00 93 01 23 	sts	0x2301, r16
    2864:	10 93 02 23 	sts	0x2302, r17

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    2868:	c0 34       	cpi	r28, 0x40	; 64
    286a:	d1 05       	cpc	r29, r1
    286c:	69 f4       	brne	.+26     	; 0x2888 <__vector_126+0x12a>
			<= (udd_ctrl_prev_payload_nb_trans
			+ udd_ctrl_payload_nb_trans))) {
    286e:	80 91 03 23 	lds	r24, 0x2303
    2872:	90 91 04 23 	lds	r25, 0x2304
    2876:	80 0f       	add	r24, r16
    2878:	91 1f       	adc	r25, r17

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    287a:	20 91 50 23 	lds	r18, 0x2350
    287e:	30 91 51 23 	lds	r19, 0x2351
    2882:	82 17       	cp	r24, r18
    2884:	93 07       	cpc	r25, r19
    2886:	88 f0       	brcs	.+34     	; 0x28aa <__vector_126+0x14c>
		// End of reception because it is a short packet
		// or all data are transfered

		// Before send ZLP, call intermediate callback
		// in case of data receive generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    2888:	00 93 54 23 	sts	0x2354, r16
    288c:	10 93 55 23 	sts	0x2355, r17
		if (NULL != udd_g_ctrlreq.over_under_run) {
    2890:	e0 91 58 23 	lds	r30, 0x2358
    2894:	f0 91 59 23 	lds	r31, 0x2359
    2898:	30 97       	sbiw	r30, 0x00	; 0
    289a:	29 f0       	breq	.+10     	; 0x28a6 <__vector_126+0x148>
			if (!udd_g_ctrlreq.over_under_run()) {
    289c:	19 95       	eicall
    289e:	81 11       	cpse	r24, r1
    28a0:	02 c0       	rjmp	.+4      	; 0x28a6 <__vector_126+0x148>
				// Stall ZLP
				udd_ctrl_stall_data();
    28a2:	fc d9       	rcall	.-3080   	; 0x1c9c <udd_ctrl_stall_data>
    28a4:	32 c0       	rjmp	.+100    	; 0x290a <__vector_126+0x1ac>
				return;
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ctrl_send_zlp_in();
    28a6:	08 da       	rcall	.-3056   	; 0x1cb8 <udd_ctrl_send_zlp_in>
    28a8:	30 c0       	rjmp	.+96     	; 0x290a <__vector_126+0x1ac>
		return;
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    28aa:	80 91 54 23 	lds	r24, 0x2354
    28ae:	90 91 55 23 	lds	r25, 0x2355
    28b2:	08 17       	cp	r16, r24
    28b4:	19 07       	cpc	r17, r25
    28b6:	f9 f4       	brne	.+62     	; 0x28f6 <__vector_126+0x198>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
    28b8:	e0 91 58 23 	lds	r30, 0x2358
    28bc:	f0 91 59 23 	lds	r31, 0x2359
    28c0:	30 97       	sbiw	r30, 0x00	; 0
    28c2:	11 f4       	brne	.+4      	; 0x28c8 <__vector_126+0x16a>
			// No callback available to request a new payload buffer
			udd_ctrl_stall_data();
    28c4:	eb d9       	rcall	.-3114   	; 0x1c9c <udd_ctrl_stall_data>
    28c6:	21 c0       	rjmp	.+66     	; 0x290a <__vector_126+0x1ac>
			return;
		}
		if (!udd_g_ctrlreq.over_under_run()) {
    28c8:	19 95       	eicall
    28ca:	81 11       	cpse	r24, r1
    28cc:	02 c0       	rjmp	.+4      	; 0x28d2 <__vector_126+0x174>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
    28ce:	e6 d9       	rcall	.-3124   	; 0x1c9c <udd_ctrl_stall_data>
    28d0:	1c c0       	rjmp	.+56     	; 0x290a <__vector_126+0x1ac>
			return;
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    28d2:	20 91 03 23 	lds	r18, 0x2303
    28d6:	30 91 04 23 	lds	r19, 0x2304
    28da:	80 91 01 23 	lds	r24, 0x2301
    28de:	90 91 02 23 	lds	r25, 0x2302
    28e2:	82 0f       	add	r24, r18
    28e4:	93 1f       	adc	r25, r19
    28e6:	80 93 03 23 	sts	0x2303, r24
    28ea:	90 93 04 23 	sts	0x2304, r25
		// Reinit reception on payload buffer
		udd_ctrl_payload_nb_trans = 0;
    28ee:	10 92 01 23 	sts	0x2301, r1
    28f2:	10 92 02 23 	sts	0x2302, r1
	}
	// Free buffer of OUT control endpoint to authorize next reception
	udd_control_out_clear_NACK0();
    28f6:	e4 e1       	ldi	r30, 0x14	; 20
    28f8:	f3 e2       	ldi	r31, 0x23	; 35
    28fa:	02 e0       	ldi	r16, 0x02	; 2
    28fc:	06 93       	lac	Z, r16
    28fe:	05 c0       	rjmp	.+10     	; 0x290a <__vector_126+0x1ac>
	// Check status on control endpoint
	if (ep == 0) {
		udd_ctrl_out_received();
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
	}
	if (ep == (0 | USB_EP_DIR_IN)) {
    2900:	80 38       	cpi	r24, 0x80	; 128
    2902:	11 f4       	brne	.+4      	; 0x2908 <__vector_126+0x1aa>
		udd_ctrl_in_sent();
    2904:	ef d9       	rcall	.-3106   	; 0x1ce4 <udd_ctrl_in_sent>
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
    2906:	01 c0       	rjmp	.+2      	; 0x290a <__vector_126+0x1ac>
	}
	Assert(udd_ep_is_valid(ep));
	// Manage end of transfer on endpoint bulk/interrupt/isochronous
	udd_ep_trans_complet(ep);
    2908:	0b db       	rcall	.-2538   	; 0x1f20 <udd_ep_trans_complet>
	}
#endif

udd_interrupt_tc_end:
	return;
}
    290a:	ff 91       	pop	r31
    290c:	ef 91       	pop	r30
    290e:	df 91       	pop	r29
    2910:	cf 91       	pop	r28
    2912:	bf 91       	pop	r27
    2914:	af 91       	pop	r26
    2916:	9f 91       	pop	r25
    2918:	8f 91       	pop	r24
    291a:	7f 91       	pop	r23
    291c:	6f 91       	pop	r22
    291e:	5f 91       	pop	r21
    2920:	4f 91       	pop	r20
    2922:	3f 91       	pop	r19
    2924:	2f 91       	pop	r18
    2926:	1f 91       	pop	r17
    2928:	0f 91       	pop	r16
    292a:	0f 90       	pop	r0
    292c:	0b be       	out	0x3b, r0	; 59
    292e:	0f 90       	pop	r0
    2930:	0f be       	out	0x3f, r0	; 63
    2932:	0f 90       	pop	r0
    2934:	1f 90       	pop	r1
    2936:	18 95       	reti

00002938 <rf24_csn>:
/****************************************************************************/

uint8_t rf24_getPALevel(void) {

  return (rf24_read_register(RF_SETUP) & (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH))) >> 1 ;
}
    2938:	88 23       	and	r24, r24
    293a:	29 f0       	breq	.+10     	; 0x2946 <rf24_csn+0xe>
    293c:	84 e0       	ldi	r24, 0x04	; 4
    293e:	e0 e4       	ldi	r30, 0x40	; 64
    2940:	f6 e0       	ldi	r31, 0x06	; 6
    2942:	85 83       	std	Z+5, r24	; 0x05
    2944:	04 c0       	rjmp	.+8      	; 0x294e <rf24_csn+0x16>
    2946:	84 e0       	ldi	r24, 0x04	; 4
    2948:	e0 e4       	ldi	r30, 0x40	; 64
    294a:	f6 e0       	ldi	r31, 0x06	; 6
    294c:	86 83       	std	Z+6, r24	; 0x06
    294e:	80 e0       	ldi	r24, 0x00	; 0
    2950:	90 e0       	ldi	r25, 0x00	; 0
    2952:	01 96       	adiw	r24, 0x01	; 1
    2954:	84 31       	cpi	r24, 0x14	; 20
    2956:	91 05       	cpc	r25, r1
    2958:	e1 f7       	brne	.-8      	; 0x2952 <rf24_csn+0x1a>
    295a:	08 95       	ret

0000295c <rf24_spi_writeread>:
    295c:	fc 01       	movw	r30, r24
    295e:	63 83       	std	Z+3, r22	; 0x03
    2960:	82 81       	ldd	r24, Z+2	; 0x02
    2962:	88 23       	and	r24, r24
    2964:	ec f7       	brge	.-6      	; 0x2960 <rf24_spi_writeread+0x4>
    2966:	83 81       	ldd	r24, Z+3	; 0x03
    2968:	08 95       	ret

0000296a <rf24_read_register>:
    296a:	cf 93       	push	r28
    296c:	c8 2f       	mov	r28, r24
    296e:	80 e0       	ldi	r24, 0x00	; 0
    2970:	e3 df       	rcall	.-58     	; 0x2938 <rf24_csn>
    2972:	6c 2f       	mov	r22, r28
    2974:	6f 71       	andi	r22, 0x1F	; 31
    2976:	80 ec       	ldi	r24, 0xC0	; 192
    2978:	98 e0       	ldi	r25, 0x08	; 8
    297a:	f0 df       	rcall	.-32     	; 0x295c <rf24_spi_writeread>
    297c:	6f ef       	ldi	r22, 0xFF	; 255
    297e:	80 ec       	ldi	r24, 0xC0	; 192
    2980:	98 e0       	ldi	r25, 0x08	; 8
    2982:	ec df       	rcall	.-40     	; 0x295c <rf24_spi_writeread>
    2984:	c8 2f       	mov	r28, r24
    2986:	81 e0       	ldi	r24, 0x01	; 1
    2988:	d7 df       	rcall	.-82     	; 0x2938 <rf24_csn>
    298a:	8c 2f       	mov	r24, r28
    298c:	cf 91       	pop	r28
    298e:	08 95       	ret

00002990 <rf24_write_register_chunk>:
    2990:	0f 93       	push	r16
    2992:	1f 93       	push	r17
    2994:	cf 93       	push	r28
    2996:	df 93       	push	r29
    2998:	18 2f       	mov	r17, r24
    299a:	eb 01       	movw	r28, r22
    299c:	04 2f       	mov	r16, r20
    299e:	80 e0       	ldi	r24, 0x00	; 0
    29a0:	cb df       	rcall	.-106    	; 0x2938 <rf24_csn>
    29a2:	1f 71       	andi	r17, 0x1F	; 31
    29a4:	61 2f       	mov	r22, r17
    29a6:	60 62       	ori	r22, 0x20	; 32
    29a8:	80 ec       	ldi	r24, 0xC0	; 192
    29aa:	98 e0       	ldi	r25, 0x08	; 8
    29ac:	d7 df       	rcall	.-82     	; 0x295c <rf24_spi_writeread>
    29ae:	18 2f       	mov	r17, r24
    29b0:	40 2f       	mov	r20, r16
    29b2:	50 e0       	ldi	r21, 0x00	; 0
    29b4:	be 01       	movw	r22, r28
    29b6:	80 ec       	ldi	r24, 0xC0	; 192
    29b8:	98 e0       	ldi	r25, 0x08	; 8
    29ba:	71 d2       	rcall	.+1250   	; 0x2e9e <spi_write_packet>
    29bc:	81 e0       	ldi	r24, 0x01	; 1
    29be:	bc df       	rcall	.-136    	; 0x2938 <rf24_csn>
    29c0:	81 2f       	mov	r24, r17
    29c2:	df 91       	pop	r29
    29c4:	cf 91       	pop	r28
    29c6:	1f 91       	pop	r17
    29c8:	0f 91       	pop	r16
    29ca:	08 95       	ret

000029cc <rf24_write_register>:
    29cc:	1f 93       	push	r17
    29ce:	cf 93       	push	r28
    29d0:	df 93       	push	r29
    29d2:	1f 92       	push	r1
    29d4:	cd b7       	in	r28, 0x3d	; 61
    29d6:	de b7       	in	r29, 0x3e	; 62
    29d8:	18 2f       	mov	r17, r24
    29da:	69 83       	std	Y+1, r22	; 0x01
    29dc:	80 e0       	ldi	r24, 0x00	; 0
    29de:	ac df       	rcall	.-168    	; 0x2938 <rf24_csn>
    29e0:	1f 71       	andi	r17, 0x1F	; 31
    29e2:	61 2f       	mov	r22, r17
    29e4:	60 62       	ori	r22, 0x20	; 32
    29e6:	80 ec       	ldi	r24, 0xC0	; 192
    29e8:	98 e0       	ldi	r25, 0x08	; 8
    29ea:	b8 df       	rcall	.-144    	; 0x295c <rf24_spi_writeread>
    29ec:	18 2f       	mov	r17, r24
    29ee:	41 e0       	ldi	r20, 0x01	; 1
    29f0:	50 e0       	ldi	r21, 0x00	; 0
    29f2:	be 01       	movw	r22, r28
    29f4:	6f 5f       	subi	r22, 0xFF	; 255
    29f6:	7f 4f       	sbci	r23, 0xFF	; 255
    29f8:	80 ec       	ldi	r24, 0xC0	; 192
    29fa:	98 e0       	ldi	r25, 0x08	; 8
    29fc:	50 d2       	rcall	.+1184   	; 0x2e9e <spi_write_packet>
    29fe:	81 e0       	ldi	r24, 0x01	; 1
    2a00:	9b df       	rcall	.-202    	; 0x2938 <rf24_csn>
    2a02:	81 2f       	mov	r24, r17
    2a04:	0f 90       	pop	r0
    2a06:	df 91       	pop	r29
    2a08:	cf 91       	pop	r28
    2a0a:	1f 91       	pop	r17
    2a0c:	08 95       	ret

00002a0e <rf24_read_payload>:
    2a0e:	8f 92       	push	r8
    2a10:	9f 92       	push	r9
    2a12:	af 92       	push	r10
    2a14:	bf 92       	push	r11
    2a16:	cf 92       	push	r12
    2a18:	df 92       	push	r13
    2a1a:	ef 92       	push	r14
    2a1c:	ff 92       	push	r15
    2a1e:	0f 93       	push	r16
    2a20:	1f 93       	push	r17
    2a22:	cf 93       	push	r28
    2a24:	df 93       	push	r29
    2a26:	cd b7       	in	r28, 0x3d	; 61
    2a28:	de b7       	in	r29, 0x3e	; 62
    2a2a:	5c 01       	movw	r10, r24
    2a2c:	ed b6       	in	r14, 0x3d	; 61
    2a2e:	fe b6       	in	r15, 0x3e	; 62
    2a30:	00 91 68 23 	lds	r16, 0x2368
    2a34:	96 2e       	mov	r9, r22
    2a36:	06 17       	cp	r16, r22
    2a38:	08 f4       	brcc	.+2      	; 0x2a3c <rf24_read_payload+0x2e>
    2a3a:	90 2e       	mov	r9, r16
    2a3c:	80 91 5b 23 	lds	r24, 0x235B
    2a40:	81 11       	cpse	r24, r1
    2a42:	02 c0       	rjmp	.+4      	; 0x2a48 <rf24_read_payload+0x3a>
    2a44:	09 19       	sub	r16, r9
    2a46:	01 c0       	rjmp	.+2      	; 0x2a4a <rf24_read_payload+0x3c>
    2a48:	00 e0       	ldi	r16, 0x00	; 0
    2a4a:	10 e0       	ldi	r17, 0x00	; 0
    2a4c:	8d b7       	in	r24, 0x3d	; 61
    2a4e:	9e b7       	in	r25, 0x3e	; 62
    2a50:	80 1b       	sub	r24, r16
    2a52:	91 0b       	sbc	r25, r17
    2a54:	8d bf       	out	0x3d, r24	; 61
    2a56:	9e bf       	out	0x3e, r25	; 62
    2a58:	01 96       	adiw	r24, 0x01	; 1
    2a5a:	6c 01       	movw	r12, r24
    2a5c:	80 e0       	ldi	r24, 0x00	; 0
    2a5e:	6c df       	rcall	.-296    	; 0x2938 <rf24_csn>
    2a60:	61 e6       	ldi	r22, 0x61	; 97
    2a62:	80 ec       	ldi	r24, 0xC0	; 192
    2a64:	98 e0       	ldi	r25, 0x08	; 8
    2a66:	7a df       	rcall	.-268    	; 0x295c <rf24_spi_writeread>
    2a68:	88 2e       	mov	r8, r24
    2a6a:	49 2d       	mov	r20, r9
    2a6c:	50 e0       	ldi	r21, 0x00	; 0
    2a6e:	b5 01       	movw	r22, r10
    2a70:	80 ec       	ldi	r24, 0xC0	; 192
    2a72:	98 e0       	ldi	r25, 0x08	; 8
    2a74:	23 d2       	rcall	.+1094   	; 0x2ebc <spi_read_packet>
    2a76:	a8 01       	movw	r20, r16
    2a78:	b6 01       	movw	r22, r12
    2a7a:	80 ec       	ldi	r24, 0xC0	; 192
    2a7c:	98 e0       	ldi	r25, 0x08	; 8
    2a7e:	1e d2       	rcall	.+1084   	; 0x2ebc <spi_read_packet>
    2a80:	81 e0       	ldi	r24, 0x01	; 1
    2a82:	5a df       	rcall	.-332    	; 0x2938 <rf24_csn>
    2a84:	88 2d       	mov	r24, r8
    2a86:	ed be       	out	0x3d, r14	; 61
    2a88:	fe be       	out	0x3e, r15	; 62
    2a8a:	df 91       	pop	r29
    2a8c:	cf 91       	pop	r28
    2a8e:	1f 91       	pop	r17
    2a90:	0f 91       	pop	r16
    2a92:	ff 90       	pop	r15
    2a94:	ef 90       	pop	r14
    2a96:	df 90       	pop	r13
    2a98:	cf 90       	pop	r12
    2a9a:	bf 90       	pop	r11
    2a9c:	af 90       	pop	r10
    2a9e:	9f 90       	pop	r9
    2aa0:	8f 90       	pop	r8
    2aa2:	08 95       	ret

00002aa4 <rf24_spiTrans>:
    2aa4:	cf 93       	push	r28
    2aa6:	c8 2f       	mov	r28, r24
    2aa8:	80 e0       	ldi	r24, 0x00	; 0
    2aaa:	46 df       	rcall	.-372    	; 0x2938 <rf24_csn>
    2aac:	6c 2f       	mov	r22, r28
    2aae:	80 ec       	ldi	r24, 0xC0	; 192
    2ab0:	98 e0       	ldi	r25, 0x08	; 8
    2ab2:	54 df       	rcall	.-344    	; 0x295c <rf24_spi_writeread>
    2ab4:	c8 2f       	mov	r28, r24
    2ab6:	81 e0       	ldi	r24, 0x01	; 1
    2ab8:	3f df       	rcall	.-386    	; 0x2938 <rf24_csn>
    2aba:	8c 2f       	mov	r24, r28
    2abc:	cf 91       	pop	r28
    2abe:	08 95       	ret

00002ac0 <rf24_flush_rx>:
    2ac0:	82 ee       	ldi	r24, 0xE2	; 226
    2ac2:	f0 cf       	rjmp	.-32     	; 0x2aa4 <rf24_spiTrans>
    2ac4:	08 95       	ret

00002ac6 <rf24_flush_tx>:
    2ac6:	81 ee       	ldi	r24, 0xE1	; 225
    2ac8:	ed cf       	rjmp	.-38     	; 0x2aa4 <rf24_spiTrans>
    2aca:	08 95       	ret

00002acc <rf24_get_status>:
    2acc:	8f ef       	ldi	r24, 0xFF	; 255
    2ace:	ea cf       	rjmp	.-44     	; 0x2aa4 <rf24_spiTrans>
    2ad0:	08 95       	ret

00002ad2 <rf24_setChannel>:
    2ad2:	80 38       	cpi	r24, 0x80	; 128
    2ad4:	08 f0       	brcs	.+2      	; 0x2ad8 <rf24_setChannel+0x6>
    2ad6:	8f e7       	ldi	r24, 0x7F	; 127
    2ad8:	68 2f       	mov	r22, r24
    2ada:	85 e0       	ldi	r24, 0x05	; 5
    2adc:	77 cf       	rjmp	.-274    	; 0x29cc <rf24_write_register>
    2ade:	08 95       	ret

00002ae0 <rf24_setPayloadSize>:
    2ae0:	81 32       	cpi	r24, 0x21	; 33
    2ae2:	08 f0       	brcs	.+2      	; 0x2ae6 <rf24_setPayloadSize+0x6>
    2ae4:	80 e2       	ldi	r24, 0x20	; 32
    2ae6:	80 93 68 23 	sts	0x2368, r24
    2aea:	08 95       	ret

00002aec <rf24_powerUp>:
    2aec:	80 e0       	ldi	r24, 0x00	; 0
    2aee:	3d df       	rcall	.-390    	; 0x296a <rf24_read_register>
    2af0:	81 fd       	sbrc	r24, 1
    2af2:	0d c0       	rjmp	.+26     	; 0x2b0e <rf24_powerUp+0x22>
    2af4:	80 e0       	ldi	r24, 0x00	; 0
    2af6:	39 df       	rcall	.-398    	; 0x296a <rf24_read_register>
    2af8:	68 2f       	mov	r22, r24
    2afa:	62 60       	ori	r22, 0x02	; 2
    2afc:	80 e0       	ldi	r24, 0x00	; 0
    2afe:	66 df       	rcall	.-308    	; 0x29cc <rf24_write_register>
    2b00:	80 e0       	ldi	r24, 0x00	; 0
    2b02:	90 e0       	ldi	r25, 0x00	; 0
    2b04:	01 96       	adiw	r24, 0x01	; 1
    2b06:	80 32       	cpi	r24, 0x20	; 32
    2b08:	2e e4       	ldi	r18, 0x4E	; 78
    2b0a:	92 07       	cpc	r25, r18
    2b0c:	d9 f7       	brne	.-10     	; 0x2b04 <rf24_powerUp+0x18>
    2b0e:	08 95       	ret

00002b10 <rf24_available>:
    2b10:	cf 93       	push	r28
    2b12:	df 93       	push	r29
    2b14:	ec 01       	movw	r28, r24
    2b16:	87 e1       	ldi	r24, 0x17	; 23
    2b18:	28 df       	rcall	.-432    	; 0x296a <rf24_read_register>
    2b1a:	80 fd       	sbrc	r24, 0
    2b1c:	08 c0       	rjmp	.+16     	; 0x2b2e <rf24_available+0x1e>
    2b1e:	20 97       	sbiw	r28, 0x00	; 0
    2b20:	41 f0       	breq	.+16     	; 0x2b32 <rf24_available+0x22>
    2b22:	d4 df       	rcall	.-88     	; 0x2acc <rf24_get_status>
    2b24:	86 95       	lsr	r24
    2b26:	87 70       	andi	r24, 0x07	; 7
    2b28:	88 83       	st	Y, r24
    2b2a:	81 e0       	ldi	r24, 0x01	; 1
    2b2c:	03 c0       	rjmp	.+6      	; 0x2b34 <rf24_available+0x24>
    2b2e:	80 e0       	ldi	r24, 0x00	; 0
    2b30:	01 c0       	rjmp	.+2      	; 0x2b34 <rf24_available+0x24>
    2b32:	81 e0       	ldi	r24, 0x01	; 1
    2b34:	df 91       	pop	r29
    2b36:	cf 91       	pop	r28
    2b38:	08 95       	ret

00002b3a <rf24_read>:
    2b3a:	69 df       	rcall	.-302    	; 0x2a0e <rf24_read_payload>
    2b3c:	60 e7       	ldi	r22, 0x70	; 112
    2b3e:	87 e0       	ldi	r24, 0x07	; 7
    2b40:	45 cf       	rjmp	.-374    	; 0x29cc <rf24_write_register>
    2b42:	08 95       	ret

00002b44 <rf24_setAddressWidth>:
    2b44:	cf 93       	push	r28
    2b46:	82 50       	subi	r24, 0x02	; 2
    2b48:	41 f0       	breq	.+16     	; 0x2b5a <rf24_setAddressWidth+0x16>
    2b4a:	c8 2f       	mov	r28, r24
    2b4c:	c3 70       	andi	r28, 0x03	; 3
    2b4e:	6c 2f       	mov	r22, r28
    2b50:	83 e0       	ldi	r24, 0x03	; 3
    2b52:	3c df       	rcall	.-392    	; 0x29cc <rf24_write_register>
    2b54:	ce 5f       	subi	r28, 0xFE	; 254
    2b56:	c0 93 5a 23 	sts	0x235A, r28
    2b5a:	cf 91       	pop	r28
    2b5c:	08 95       	ret

00002b5e <rf24_openReadingPipe>:
    2b5e:	1f 93       	push	r17
    2b60:	cf 93       	push	r28
    2b62:	df 93       	push	r29
    2b64:	18 2f       	mov	r17, r24
    2b66:	eb 01       	movw	r28, r22
    2b68:	81 11       	cpse	r24, r1
    2b6a:	07 c0       	rjmp	.+14     	; 0x2b7a <rf24_openReadingPipe+0x1c>
    2b6c:	40 91 5a 23 	lds	r20, 0x235A
    2b70:	50 e0       	ldi	r21, 0x00	; 0
    2b72:	8d e5       	ldi	r24, 0x5D	; 93
    2b74:	93 e2       	ldi	r25, 0x23	; 35
    2b76:	58 d4       	rcall	.+2224   	; 0x3428 <memcpy>
    2b78:	05 c0       	rjmp	.+10     	; 0x2b84 <rf24_openReadingPipe+0x26>
    2b7a:	87 30       	cpi	r24, 0x07	; 7
    2b7c:	08 f0       	brcs	.+2      	; 0x2b80 <rf24_openReadingPipe+0x22>
    2b7e:	2e c0       	rjmp	.+92     	; 0x2bdc <rf24_openReadingPipe+0x7e>
    2b80:	82 30       	cpi	r24, 0x02	; 2
    2b82:	50 f4       	brcc	.+20     	; 0x2b98 <rf24_openReadingPipe+0x3a>
    2b84:	e1 2f       	mov	r30, r17
    2b86:	f0 e0       	ldi	r31, 0x00	; 0
    2b88:	e0 5f       	subi	r30, 0xF0	; 240
    2b8a:	fd 4f       	sbci	r31, 0xFD	; 253
    2b8c:	84 91       	lpm	r24, Z
    2b8e:	40 91 5a 23 	lds	r20, 0x235A
    2b92:	be 01       	movw	r22, r28
    2b94:	fd de       	rcall	.-518    	; 0x2990 <rf24_write_register_chunk>
    2b96:	07 c0       	rjmp	.+14     	; 0x2ba6 <rf24_openReadingPipe+0x48>
    2b98:	e8 2f       	mov	r30, r24
    2b9a:	f0 e0       	ldi	r31, 0x00	; 0
    2b9c:	e0 5f       	subi	r30, 0xF0	; 240
    2b9e:	fd 4f       	sbci	r31, 0xFD	; 253
    2ba0:	84 91       	lpm	r24, Z
    2ba2:	41 e0       	ldi	r20, 0x01	; 1
    2ba4:	f5 de       	rcall	.-534    	; 0x2990 <rf24_write_register_chunk>
    2ba6:	c1 2f       	mov	r28, r17
    2ba8:	d0 e0       	ldi	r29, 0x00	; 0
    2baa:	fe 01       	movw	r30, r28
    2bac:	e6 5f       	subi	r30, 0xF6	; 246
    2bae:	fd 4f       	sbci	r31, 0xFD	; 253
    2bb0:	84 91       	lpm	r24, Z
    2bb2:	60 91 68 23 	lds	r22, 0x2368
    2bb6:	0a df       	rcall	.-492    	; 0x29cc <rf24_write_register>
    2bb8:	82 e0       	ldi	r24, 0x02	; 2
    2bba:	d7 de       	rcall	.-594    	; 0x296a <rf24_read_register>
    2bbc:	fe 01       	movw	r30, r28
    2bbe:	ea 5e       	subi	r30, 0xEA	; 234
    2bc0:	fd 4f       	sbci	r31, 0xFD	; 253
    2bc2:	64 91       	lpm	r22, Z
    2bc4:	21 e0       	ldi	r18, 0x01	; 1
    2bc6:	30 e0       	ldi	r19, 0x00	; 0
    2bc8:	a9 01       	movw	r20, r18
    2bca:	02 c0       	rjmp	.+4      	; 0x2bd0 <rf24_openReadingPipe+0x72>
    2bcc:	44 0f       	add	r20, r20
    2bce:	55 1f       	adc	r21, r21
    2bd0:	6a 95       	dec	r22
    2bd2:	e2 f7       	brpl	.-8      	; 0x2bcc <rf24_openReadingPipe+0x6e>
    2bd4:	ba 01       	movw	r22, r20
    2bd6:	68 2b       	or	r22, r24
    2bd8:	82 e0       	ldi	r24, 0x02	; 2
    2bda:	f8 de       	rcall	.-528    	; 0x29cc <rf24_write_register>
    2bdc:	df 91       	pop	r29
    2bde:	cf 91       	pop	r28
    2be0:	1f 91       	pop	r17
    2be2:	08 95       	ret

00002be4 <rf24_closeReadingPipe>:
    2be4:	cf 93       	push	r28
    2be6:	c8 2f       	mov	r28, r24
    2be8:	82 e0       	ldi	r24, 0x02	; 2
    2bea:	bf de       	rcall	.-642    	; 0x296a <rf24_read_register>
    2bec:	ec 2f       	mov	r30, r28
    2bee:	f0 e0       	ldi	r31, 0x00	; 0
    2bf0:	ea 5e       	subi	r30, 0xEA	; 234
    2bf2:	fd 4f       	sbci	r31, 0xFD	; 253
    2bf4:	e4 91       	lpm	r30, Z
    2bf6:	21 e0       	ldi	r18, 0x01	; 1
    2bf8:	30 e0       	ldi	r19, 0x00	; 0
    2bfa:	a9 01       	movw	r20, r18
    2bfc:	02 c0       	rjmp	.+4      	; 0x2c02 <rf24_closeReadingPipe+0x1e>
    2bfe:	44 0f       	add	r20, r20
    2c00:	55 1f       	adc	r21, r21
    2c02:	ea 95       	dec	r30
    2c04:	e2 f7       	brpl	.-8      	; 0x2bfe <rf24_closeReadingPipe+0x1a>
    2c06:	fa 01       	movw	r30, r20
    2c08:	e0 95       	com	r30
    2c0a:	6e 2f       	mov	r22, r30
    2c0c:	68 23       	and	r22, r24
    2c0e:	82 e0       	ldi	r24, 0x02	; 2
    2c10:	dd de       	rcall	.-582    	; 0x29cc <rf24_write_register>
    2c12:	cf 91       	pop	r28
    2c14:	08 95       	ret

00002c16 <rf24_startListening>:
    2c16:	80 e0       	ldi	r24, 0x00	; 0
    2c18:	a8 de       	rcall	.-688    	; 0x296a <rf24_read_register>
    2c1a:	68 2f       	mov	r22, r24
    2c1c:	61 60       	ori	r22, 0x01	; 1
    2c1e:	80 e0       	ldi	r24, 0x00	; 0
    2c20:	d5 de       	rcall	.-598    	; 0x29cc <rf24_write_register>
    2c22:	60 e7       	ldi	r22, 0x70	; 112
    2c24:	87 e0       	ldi	r24, 0x07	; 7
    2c26:	d2 de       	rcall	.-604    	; 0x29cc <rf24_write_register>
    2c28:	82 e0       	ldi	r24, 0x02	; 2
    2c2a:	e0 e4       	ldi	r30, 0x40	; 64
    2c2c:	f6 e0       	ldi	r31, 0x06	; 6
    2c2e:	85 83       	std	Z+5, r24	; 0x05
    2c30:	80 91 5d 23 	lds	r24, 0x235D
    2c34:	88 23       	and	r24, r24
    2c36:	39 f0       	breq	.+14     	; 0x2c46 <rf24_startListening+0x30>
    2c38:	40 91 5a 23 	lds	r20, 0x235A
    2c3c:	6d e5       	ldi	r22, 0x5D	; 93
    2c3e:	73 e2       	ldi	r23, 0x23	; 35
    2c40:	8a e0       	ldi	r24, 0x0A	; 10
    2c42:	a6 de       	rcall	.-692    	; 0x2990 <rf24_write_register_chunk>
    2c44:	02 c0       	rjmp	.+4      	; 0x2c4a <rf24_startListening+0x34>
    2c46:	80 e0       	ldi	r24, 0x00	; 0
    2c48:	cd df       	rcall	.-102    	; 0x2be4 <rf24_closeReadingPipe>
    2c4a:	8d e1       	ldi	r24, 0x1D	; 29
    2c4c:	8e de       	rcall	.-740    	; 0x296a <rf24_read_register>
    2c4e:	81 fd       	sbrc	r24, 1
    2c50:	3a cf       	rjmp	.-396    	; 0x2ac6 <rf24_flush_tx>
    2c52:	08 95       	ret

00002c54 <rf24_toggle_features>:
    2c54:	cf 93       	push	r28
    2c56:	df 93       	push	r29
    2c58:	1f 92       	push	r1
    2c5a:	1f 92       	push	r1
    2c5c:	cd b7       	in	r28, 0x3d	; 61
    2c5e:	de b7       	in	r29, 0x3e	; 62
    2c60:	80 e5       	ldi	r24, 0x50	; 80
    2c62:	89 83       	std	Y+1, r24	; 0x01
    2c64:	83 e7       	ldi	r24, 0x73	; 115
    2c66:	8a 83       	std	Y+2, r24	; 0x02
    2c68:	80 e0       	ldi	r24, 0x00	; 0
    2c6a:	66 de       	rcall	.-820    	; 0x2938 <rf24_csn>
    2c6c:	42 e0       	ldi	r20, 0x02	; 2
    2c6e:	50 e0       	ldi	r21, 0x00	; 0
    2c70:	be 01       	movw	r22, r28
    2c72:	6f 5f       	subi	r22, 0xFF	; 255
    2c74:	7f 4f       	sbci	r23, 0xFF	; 255
    2c76:	80 ec       	ldi	r24, 0xC0	; 192
    2c78:	98 e0       	ldi	r25, 0x08	; 8
    2c7a:	11 d1       	rcall	.+546    	; 0x2e9e <spi_write_packet>
    2c7c:	81 e0       	ldi	r24, 0x01	; 1
    2c7e:	5c de       	rcall	.-840    	; 0x2938 <rf24_csn>
    2c80:	0f 90       	pop	r0
    2c82:	0f 90       	pop	r0
    2c84:	df 91       	pop	r29
    2c86:	cf 91       	pop	r28
    2c88:	08 95       	ret

00002c8a <rf24_setPALevel>:
    2c8a:	cf 93       	push	r28
    2c8c:	c8 2f       	mov	r28, r24
    2c8e:	86 e0       	ldi	r24, 0x06	; 6
    2c90:	6c de       	rcall	.-808    	; 0x296a <rf24_read_register>
    2c92:	88 7f       	andi	r24, 0xF8	; 248
    2c94:	c4 30       	cpi	r28, 0x04	; 4
    2c96:	20 f4       	brcc	.+8      	; 0x2ca0 <rf24_setPALevel+0x16>
    2c98:	6c 2f       	mov	r22, r28
    2c9a:	66 0f       	add	r22, r22
    2c9c:	6f 5f       	subi	r22, 0xFF	; 255
    2c9e:	01 c0       	rjmp	.+2      	; 0x2ca2 <rf24_setPALevel+0x18>
    2ca0:	67 e0       	ldi	r22, 0x07	; 7
    2ca2:	68 2b       	or	r22, r24
    2ca4:	86 e0       	ldi	r24, 0x06	; 6
    2ca6:	92 de       	rcall	.-732    	; 0x29cc <rf24_write_register>
    2ca8:	cf 91       	pop	r28
    2caa:	08 95       	ret

00002cac <rf24_setDataRate>:

/****************************************************************************/

bool rf24_setDataRate(rf24_datarate_e speed) {
    2cac:	cf 93       	push	r28
    2cae:	df 93       	push	r29
    2cb0:	d8 2f       	mov	r29, r24
  bool result = false;
  uint8_t setup = rf24_read_register(RF_SETUP) ;
    2cb2:	86 e0       	ldi	r24, 0x06	; 6
    2cb4:	5a de       	rcall	.-844    	; 0x296a <rf24_read_register>

  // HIGH and LOW '00' is 1Mbs - our default
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
    2cb6:	c8 2f       	mov	r28, r24
    2cb8:	c7 7d       	andi	r28, 0xD7	; 215
 
  //32Mhz uC
  txRxDelay=170;

  if( speed == RF24_250KBPS ) {
    2cba:	d2 30       	cpi	r29, 0x02	; 2
    2cbc:	71 f4       	brne	.+28     	; 0x2cda <rf24_setDataRate+0x2e>
    // Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
    // Making it '10'.
    setup |= _BV( RF_DR_LOW ) ;
    2cbe:	c0 62       	ori	r28, 0x20	; 32
    
	//32Mhx uC
	txRxDelay=310;
    2cc0:	46 e3       	ldi	r20, 0x36	; 54
    2cc2:	51 e0       	ldi	r21, 0x01	; 1
    2cc4:	60 e0       	ldi	r22, 0x00	; 0
    2cc6:	70 e0       	ldi	r23, 0x00	; 0
    2cc8:	40 93 64 23 	sts	0x2364, r20
    2ccc:	50 93 65 23 	sts	0x2365, r21
    2cd0:	60 93 66 23 	sts	0x2366, r22
    2cd4:	70 93 67 23 	sts	0x2367, r23
    2cd8:	1c c0       	rjmp	.+56     	; 0x2d12 <rf24_setDataRate+0x66>
  } else {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS ) {
    2cda:	d1 30       	cpi	r29, 0x01	; 1
    2cdc:	69 f0       	breq	.+26     	; 0x2cf8 <rf24_setDataRate+0x4c>

  // HIGH and LOW '00' is 1Mbs - our default
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
 
  //32Mhz uC
  txRxDelay=170;
    2cde:	4a ea       	ldi	r20, 0xAA	; 170
    2ce0:	50 e0       	ldi	r21, 0x00	; 0
    2ce2:	60 e0       	ldi	r22, 0x00	; 0
    2ce4:	70 e0       	ldi	r23, 0x00	; 0
    2ce6:	40 93 64 23 	sts	0x2364, r20
    2cea:	50 93 65 23 	sts	0x2365, r21
    2cee:	60 93 66 23 	sts	0x2366, r22
    2cf2:	70 93 67 23 	sts	0x2367, r23
    2cf6:	0d c0       	rjmp	.+26     	; 0x2d12 <rf24_setDataRate+0x66>
	txRxDelay=310;
  } else {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS ) {
      setup |= _BV(RF_DR_HIGH);
    2cf8:	c8 60       	ori	r28, 0x08	; 8
      //32Mhz uC
	  txRxDelay=130;
    2cfa:	42 e8       	ldi	r20, 0x82	; 130
    2cfc:	50 e0       	ldi	r21, 0x00	; 0
    2cfe:	60 e0       	ldi	r22, 0x00	; 0
    2d00:	70 e0       	ldi	r23, 0x00	; 0
    2d02:	40 93 64 23 	sts	0x2364, r20
    2d06:	50 93 65 23 	sts	0x2365, r21
    2d0a:	60 93 66 23 	sts	0x2366, r22
    2d0e:	70 93 67 23 	sts	0x2367, r23
    }
  }
  rf24_write_register(RF_SETUP,setup);
    2d12:	6c 2f       	mov	r22, r28
    2d14:	86 e0       	ldi	r24, 0x06	; 6
    2d16:	5a de       	rcall	.-844    	; 0x29cc <rf24_write_register>

  // Verify our result
  if ( rf24_read_register(RF_SETUP) == setup ) {
    2d18:	86 e0       	ldi	r24, 0x06	; 6
    2d1a:	27 de       	rcall	.-946    	; 0x296a <rf24_read_register>
    2d1c:	91 e0       	ldi	r25, 0x01	; 1
    2d1e:	c8 13       	cpse	r28, r24
    2d20:	90 e0       	ldi	r25, 0x00	; 0
    result = true;
  }

  return result;
}
    2d22:	89 2f       	mov	r24, r25
    2d24:	df 91       	pop	r29
    2d26:	cf 91       	pop	r28
    2d28:	08 95       	ret

00002d2a <rf24_begin>:
#include "RF24.h"

/****************************************************************************/
#define _BV(bit) (1 << (bit))

void rf24_begin(void) {
    2d2a:	cf 92       	push	r12
    2d2c:	df 92       	push	r13
    2d2e:	ef 92       	push	r14
    2d30:	ff 92       	push	r15
    2d32:	0f 93       	push	r16
    2d34:	1f 93       	push	r17
    2d36:	cf 93       	push	r28
    2d38:	df 93       	push	r29
    2d3a:	1f 92       	push	r1
    2d3c:	cd b7       	in	r28, 0x3d	; 61
    2d3e:	de b7       	in	r29, 0x3e	; 62
 * \param flags Bitmask of flags specifying additional configuration
 * parameters.
 */
static inline void ioport_configure_pin(port_pin_t pin, port_pin_flags_t flags)
{
	ioport_configure_port_pin(arch_ioport_pin_to_base(pin),
    2d40:	41 e0       	ldi	r20, 0x01	; 1
    2d42:	50 e0       	ldi	r21, 0x00	; 0
    2d44:	62 e0       	ldi	r22, 0x02	; 2
    2d46:	80 e4       	ldi	r24, 0x40	; 64
    2d48:	96 e0       	ldi	r25, 0x06	; 6
    2d4a:	cb d0       	rcall	.+406    	; 0x2ee2 <ioport_configure_port_pin>
    2d4c:	41 e0       	ldi	r20, 0x01	; 1
    2d4e:	50 e0       	ldi	r21, 0x00	; 0
    2d50:	64 e0       	ldi	r22, 0x04	; 4
    2d52:	80 e4       	ldi	r24, 0x40	; 64
    2d54:	96 e0       	ldi	r25, 0x06	; 6
    2d56:	c5 d0       	rcall	.+394    	; 0x2ee2 <ioport_configure_port_pin>
    2d58:	40 e0       	ldi	r20, 0x00	; 0
    2d5a:	58 e1       	ldi	r21, 0x18	; 24
    2d5c:	60 e1       	ldi	r22, 0x10	; 16
    2d5e:	80 e4       	ldi	r24, 0x40	; 64
    2d60:	96 e0       	ldi	r25, 0x06	; 6
    2d62:	bf d0       	rcall	.+382    	; 0x2ee2 <ioport_configure_port_pin>
    2d64:	43 e0       	ldi	r20, 0x03	; 3
    2d66:	50 e0       	ldi	r21, 0x00	; 0
    2d68:	60 e2       	ldi	r22, 0x20	; 32
    2d6a:	80 e4       	ldi	r24, 0x40	; 64
    2d6c:	96 e0       	ldi	r25, 0x06	; 6
    2d6e:	b9 d0       	rcall	.+370    	; 0x2ee2 <ioport_configure_port_pin>
    2d70:	40 e0       	ldi	r20, 0x00	; 0
    2d72:	50 e0       	ldi	r21, 0x00	; 0
    2d74:	60 e4       	ldi	r22, 0x40	; 64
    2d76:	80 e4       	ldi	r24, 0x40	; 64
    2d78:	96 e0       	ldi	r25, 0x06	; 6
    2d7a:	b3 d0       	rcall	.+358    	; 0x2ee2 <ioport_configure_port_pin>
    2d7c:	43 e0       	ldi	r20, 0x03	; 3
    2d7e:	50 e0       	ldi	r21, 0x00	; 0
    2d80:	60 e8       	ldi	r22, 0x80	; 128
    2d82:	80 e4       	ldi	r24, 0x40	; 64
    2d84:	96 e0       	ldi	r25, 0x06	; 6
    2d86:	ad d0       	rcall	.+346    	; 0x2ee2 <ioport_configure_port_pin>
	ioport_configure_pin(rf24_mosi_pin, IOPORT_INIT_HIGH | IOPORT_DIR_OUTPUT );
	ioport_configure_pin(rf24_miso_pin, IOPORT_DIR_INPUT );
	ioport_configure_pin(rf24_sck_pin,  IOPORT_INIT_HIGH | IOPORT_DIR_OUTPUT );

	// Initialize spi
	struct spi_device rf24_spi_device_conf = {
    2d88:	80 e1       	ldi	r24, 0x10	; 16
    2d8a:	89 83       	std	Y+1, r24	; 0x01
		.id = IOPORT_CREATE_PIN(PORTC, rf24_dummy_pin)
	};

	spi_master_init(&rf24_spi);
    2d8c:	80 ec       	ldi	r24, 0xC0	; 192
    2d8e:	98 e0       	ldi	r25, 0x08	; 8
    2d90:	50 d0       	rcall	.+160    	; 0x2e32 <spi_master_init>
	spi_master_setup_device(&rf24_spi, &rf24_spi_device_conf, SPI_MODE_0, 8000000, 0);
    2d92:	c1 2c       	mov	r12, r1
    2d94:	d1 2c       	mov	r13, r1
    2d96:	76 01       	movw	r14, r12
    2d98:	00 e0       	ldi	r16, 0x00	; 0
    2d9a:	12 e1       	ldi	r17, 0x12	; 18
    2d9c:	2a e7       	ldi	r18, 0x7A	; 122
    2d9e:	30 e0       	ldi	r19, 0x00	; 0
    2da0:	40 e0       	ldi	r20, 0x00	; 0
    2da2:	be 01       	movw	r22, r28
    2da4:	6f 5f       	subi	r22, 0xFF	; 255
    2da6:	7f 4f       	sbci	r23, 0xFF	; 255
    2da8:	80 ec       	ldi	r24, 0xC0	; 192
    2daa:	98 e0       	ldi	r25, 0x08	; 8
    2dac:	59 d0       	rcall	.+178    	; 0x2e60 <spi_master_setup_device>
 *
 * \param spi Base address of the SPI instance.
 */
static inline void spi_enable(SPI_t *spi)
{
	spi->CTRL |= SPI_ENABLE_bm;
    2dae:	e0 ec       	ldi	r30, 0xC0	; 192
    2db0:	f8 e0       	ldi	r31, 0x08	; 8
    2db2:	80 81       	ld	r24, Z
    2db4:	80 64       	ori	r24, 0x40	; 64
    2db6:	80 83       	st	Z, r24
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    2db8:	82 e0       	ldi	r24, 0x02	; 2
    2dba:	e0 e4       	ldi	r30, 0x40	; 64
    2dbc:	f6 e0       	ldi	r31, 0x06	; 6
    2dbe:	86 83       	std	Z+6, r24	; 0x06
	spi_enable(&rf24_spi);
	
	rf24_ce(LOW);
	rf24_csn(HIGH);
    2dc0:	81 e0       	ldi	r24, 0x01	; 1
    2dc2:	ba dd       	rcall	.-1164   	; 0x2938 <rf24_csn>
    2dc4:	80 e0       	ldi	r24, 0x00	; 0
    2dc6:	90 e0       	ldi	r25, 0x00	; 0
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	do { barrier(); } while (--n);
    2dc8:	01 96       	adiw	r24, 0x01	; 1
    2dca:	80 32       	cpi	r24, 0x20	; 32
    2dcc:	2e e4       	ldi	r18, 0x4E	; 78
    2dce:	92 07       	cpc	r25, r18
    2dd0:	d9 f7       	brne	.-10     	; 0x2dc8 <rf24_begin+0x9e>
	// Technically we require 4.5ms + 14us as a worst case. We'll just call it 5ms for good measure.
	// WARNING: Delay is based on P-variant whereby non-P *may* require different timing.
	delay_ms( 5 ) ;

	// Reset CONFIG and enable 16-bit CRC.
	rf24_write_register( CONFIG, 0b00001100 ) ; //works
    2dd2:	6c e0       	ldi	r22, 0x0C	; 12
    2dd4:	80 e0       	ldi	r24, 0x00	; 0
    2dd6:	fa dd       	rcall	.-1036   	; 0x29cc <rf24_write_register>
  rf24_write_register( CONFIG, disable ) ;
}

/****************************************************************************/
void rf24_setRetries(uint8_t delay, uint8_t count) {
  rf24_write_register(SETUP_RETR,(delay&0xf)<<ARD | (count&0xf)<<ARC);
    2dd8:	6f e5       	ldi	r22, 0x5F	; 95
    2dda:	84 e0       	ldi	r24, 0x04	; 4
    2ddc:	f7 dd       	rcall	.-1042   	; 0x29cc <rf24_write_register>
	// because a non-P variant won't allow the data rate to
	// be set to 250Kbps.
	//
	//Manually set p variant to false.  should reenable this bit of code once stuff is working
	//
	p_variant = false;
    2dde:	10 92 63 23 	sts	0x2363, r1
	if( rf24_setDataRate( RF24_250KBPS ) ) {
    2de2:	82 e0       	ldi	r24, 0x02	; 2
    2de4:	63 df       	rcall	.-314    	; 0x2cac <rf24_setDataRate>
    2de6:	88 23       	and	r24, r24
    2de8:	19 f0       	breq	.+6      	; 0x2df0 <rf24_begin+0xc6>
		p_variant = true ;
    2dea:	81 e0       	ldi	r24, 0x01	; 1
    2dec:	80 93 63 23 	sts	0x2363, r24
	}
	

	// Then set the data rate to the slowest (and most reliable) speed supported by all
	// hardware.
	rf24_setDataRate( RF24_1MBPS ) ;
    2df0:	80 e0       	ldi	r24, 0x00	; 0
    2df2:	5c df       	rcall	.-328    	; 0x2cac <rf24_setDataRate>

	// Initialize CRC and request 2-byte (16bit) CRC
	//rf24_setCRCLength( RF24_CRC_16 ) ;

	// Disable dynamic payloads, to match dynamic_payloads_enabled setting - Reset value is 0
	rf24_toggle_features();
    2df4:	2f df       	rcall	.-418    	; 0x2c54 <rf24_toggle_features>
	rf24_write_register(FEATURE,0 );
    2df6:	60 e0       	ldi	r22, 0x00	; 0
    2df8:	8d e1       	ldi	r24, 0x1D	; 29
    2dfa:	e8 dd       	rcall	.-1072   	; 0x29cc <rf24_write_register>
	rf24_write_register(DYNPD,0);
    2dfc:	60 e0       	ldi	r22, 0x00	; 0
    2dfe:	8c e1       	ldi	r24, 0x1C	; 28
    2e00:	e5 dd       	rcall	.-1078   	; 0x29cc <rf24_write_register>

	// Reset current status
	// Notice reset and flush is the last thing we do
	rf24_write_register(STATUS_RF,_BV(RX_DR) | _BV(TX_DS) | _BV(MAX_RT) );
    2e02:	60 e7       	ldi	r22, 0x70	; 112
    2e04:	87 e0       	ldi	r24, 0x07	; 7
    2e06:	e2 dd       	rcall	.-1084   	; 0x29cc <rf24_write_register>

	// Set up default configuration.  Callers can always change it later.
	// This channel should be universally safe and not bleed over into adjacent
	// spectrum.
	rf24_setChannel(76);
    2e08:	8c e4       	ldi	r24, 0x4C	; 76
    2e0a:	63 de       	rcall	.-826    	; 0x2ad2 <rf24_setChannel>

	// Flush buffers
	rf24_flush_rx();
    2e0c:	59 de       	rcall	.-846    	; 0x2ac0 <rf24_flush_rx>
	rf24_flush_tx();
    2e0e:	5b de       	rcall	.-842    	; 0x2ac6 <rf24_flush_tx>

	rf24_powerUp(); //Power up by default when begin() is called
    2e10:	6d de       	rcall	.-806    	; 0x2aec <rf24_powerUp>

	// Enable PTX, do not write CE high so radio will remain in standby I mode ( 130us max to transition to RX or TX instead of 1500us from powerUp )
	// PTX should use only 22uA of power
	rf24_write_register(CONFIG, ( rf24_read_register(CONFIG) ) & ~_BV(PRIM_RX) );
    2e12:	80 e0       	ldi	r24, 0x00	; 0
    2e14:	aa dd       	rcall	.-1196   	; 0x296a <rf24_read_register>
    2e16:	68 2f       	mov	r22, r24
    2e18:	6e 7f       	andi	r22, 0xFE	; 254
    2e1a:	80 e0       	ldi	r24, 0x00	; 0
    2e1c:	d7 dd       	rcall	.-1106   	; 0x29cc <rf24_write_register>

}
    2e1e:	0f 90       	pop	r0
    2e20:	df 91       	pop	r29
    2e22:	cf 91       	pop	r28
    2e24:	1f 91       	pop	r17
    2e26:	0f 91       	pop	r16
    2e28:	ff 90       	pop	r15
    2e2a:	ef 90       	pop	r14
    2e2c:	df 90       	pop	r13
    2e2e:	cf 90       	pop	r12
    2e30:	08 95       	ret

00002e32 <spi_master_init>:
 *
 * \param spi       Base address of the SPI instance.
 *
 */
void spi_master_init(SPI_t *spi)
{
    2e32:	cf 93       	push	r28
    2e34:	df 93       	push	r29
    2e36:	ec 01       	movw	r28, r24
	if ((uint16_t)spi == (uint16_t)&SPIB) {
		sysclk_enable_module(SYSCLK_PORT_B, PR_SPI_bm);
	}
#endif
#ifdef SPIC
	if ((uint16_t)spi == (uint16_t)&SPIC) {
    2e38:	c0 3c       	cpi	r28, 0xC0	; 192
    2e3a:	28 e0       	ldi	r18, 0x08	; 8
    2e3c:	d2 07       	cpc	r29, r18
    2e3e:	21 f4       	brne	.+8      	; 0x2e48 <spi_master_init+0x16>
		sysclk_enable_module(SYSCLK_PORT_C, PR_SPI_bm);
    2e40:	68 e0       	ldi	r22, 0x08	; 8
    2e42:	83 e0       	ldi	r24, 0x03	; 3
    2e44:	e2 d0       	rcall	.+452    	; 0x300a <sysclk_enable_module>
    2e46:	06 c0       	rjmp	.+12     	; 0x2e54 <spi_master_init+0x22>
	}
#endif
#ifdef SPID
	if ((uint16_t)spi == (uint16_t)&SPID) {
    2e48:	80 3c       	cpi	r24, 0xC0	; 192
    2e4a:	99 40       	sbci	r25, 0x09	; 9
    2e4c:	19 f4       	brne	.+6      	; 0x2e54 <spi_master_init+0x22>
		sysclk_enable_module(SYSCLK_PORT_D, PR_SPI_bm);
    2e4e:	68 e0       	ldi	r22, 0x08	; 8
    2e50:	84 e0       	ldi	r24, 0x04	; 4
    2e52:	db d0       	rcall	.+438    	; 0x300a <sysclk_enable_module>
 *
 * \warning This may cause data loss if used on a slave SPI.
 */
static inline void spi_enable_master_mode(SPI_t *spi)
{
	spi->CTRL |= SPI_MASTER_bm;
    2e54:	88 81       	ld	r24, Y
    2e56:	80 61       	ori	r24, 0x10	; 16
    2e58:	88 83       	st	Y, r24
	if ((uint16_t)spi == (uint16_t)&SPIF) {
		sysclk_enable_module(SYSCLK_PORT_F, PR_SPI_bm);
	}
#endif
	spi_enable_master_mode(spi);
}
    2e5a:	df 91       	pop	r29
    2e5c:	cf 91       	pop	r28
    2e5e:	08 95       	ret

00002e60 <spi_master_setup_device>:
 * \param sel_id    Board specific select id
 */
void spi_master_setup_device(SPI_t *spi, struct spi_device *device,
		spi_flags_t flags, uint32_t baud_rate,
		board_spi_select_id_t sel_id)
{
    2e60:	ff 92       	push	r15
    2e62:	0f 93       	push	r16
    2e64:	1f 93       	push	r17
    2e66:	cf 93       	push	r28
    2e68:	df 93       	push	r29
    2e6a:	ec 01       	movw	r28, r24
    2e6c:	f4 2e       	mov	r15, r20
    2e6e:	b9 01       	movw	r22, r18
    2e70:	a8 01       	movw	r20, r16
	if (spi_xmega_set_baud_div(spi, baud_rate, sysclk_get_cpu_hz()) < 0) {
    2e72:	00 e0       	ldi	r16, 0x00	; 0
    2e74:	16 e3       	ldi	r17, 0x36	; 54
    2e76:	2e e6       	ldi	r18, 0x6E	; 110
    2e78:	31 e0       	ldi	r19, 0x01	; 1
    2e7a:	09 d1       	rcall	.+530    	; 0x308e <spi_xmega_set_baud_div>
    2e7c:	88 23       	and	r24, r24
    2e7e:	4c f0       	brlt	.+18     	; 0x2e92 <spi_master_setup_device+0x32>
		Assert(false);
		return;
	}

	/* Clear any set SPI mode flags and set them to the user-specified mode */
	spi->CTRL = (spi->CTRL & ~SPI_MODE_gm) |
    2e80:	88 81       	ld	r24, Y
			((flags << SPI_MODE_gp) & SPI_MODE_gm);
    2e82:	9f 2d       	mov	r25, r15
    2e84:	99 0f       	add	r25, r25
    2e86:	99 0f       	add	r25, r25
		Assert(false);
		return;
	}

	/* Clear any set SPI mode flags and set them to the user-specified mode */
	spi->CTRL = (spi->CTRL & ~SPI_MODE_gm) |
    2e88:	9c 70       	andi	r25, 0x0C	; 12
    2e8a:	83 7f       	andi	r24, 0xF3	; 243
    2e8c:	f9 2e       	mov	r15, r25
    2e8e:	f8 2a       	or	r15, r24
    2e90:	f8 82       	st	Y, r15
			((flags << SPI_MODE_gp) & SPI_MODE_gm);
}
    2e92:	df 91       	pop	r29
    2e94:	cf 91       	pop	r28
    2e96:	1f 91       	pop	r17
    2e98:	0f 91       	pop	r16
    2e9a:	ff 90       	pop	r15
    2e9c:	08 95       	ret

00002e9e <spi_write_packet>:
 * \param len    Length of data
 *
 * \pre SPI device must be selected with spi_select_device() first
 */
status_code_t spi_write_packet(SPI_t *spi, const uint8_t *data, size_t len)
{
    2e9e:	fc 01       	movw	r30, r24
    2ea0:	db 01       	movw	r26, r22
    2ea2:	46 0f       	add	r20, r22
    2ea4:	57 1f       	adc	r21, r23
	while (len--) {
    2ea6:	05 c0       	rjmp	.+10     	; 0x2eb2 <spi_write_packet+0x14>
		spi_write_single(spi, *data++);
    2ea8:	8d 91       	ld	r24, X+
 * \param data The data byte to be loaded
 *
 */
static inline void spi_put(SPI_t *spi, uint8_t data)
{
	spi->DATA = data;
    2eaa:	83 83       	std	Z+3, r24	; 0x03
 *
 * \return \c 1 if the SPI Receive Holding Register is full, otherwise \c 0.
 */
static inline bool spi_is_tx_ok(SPI_t *spi)
{
	return spi->STATUS & SPI_IF_bm ? true : false;
    2eac:	82 81       	ldd	r24, Z+2	; 0x02
		
		while (!spi_is_rx_full(spi)) {
    2eae:	88 23       	and	r24, r24
    2eb0:	ec f7       	brge	.-6      	; 0x2eac <spi_write_packet+0xe>
 *
 * \pre SPI device must be selected with spi_select_device() first
 */
status_code_t spi_write_packet(SPI_t *spi, const uint8_t *data, size_t len)
{
	while (len--) {
    2eb2:	a4 17       	cp	r26, r20
    2eb4:	b5 07       	cpc	r27, r21
    2eb6:	c1 f7       	brne	.-16     	; 0x2ea8 <spi_write_packet+0xa>
		while (!spi_is_rx_full(spi)) {
		}
	}
	
	return STATUS_OK;
}
    2eb8:	80 e0       	ldi	r24, 0x00	; 0
    2eba:	08 95       	ret

00002ebc <spi_read_packet>:
 * \param len    Length of data
 *
 * \pre SPI device must be selected with spi_select_device() first
 */
status_code_t spi_read_packet(SPI_t *spi, uint8_t *data, size_t len)
{
    2ebc:	fc 01       	movw	r30, r24
    2ebe:	db 01       	movw	r26, r22
	while (len--) {
    2ec0:	41 15       	cp	r20, r1
    2ec2:	51 05       	cpc	r21, r1
    2ec4:	61 f0       	breq	.+24     	; 0x2ede <spi_read_packet+0x22>
    2ec6:	46 0f       	add	r20, r22
    2ec8:	57 1f       	adc	r21, r23
 * \param data The data byte to be loaded
 *
 */
static inline void spi_put(SPI_t *spi, uint8_t data)
{
	spi->DATA = data;
    2eca:	9f ef       	ldi	r25, 0xFF	; 255
    2ecc:	93 83       	std	Z+3, r25	; 0x03
 *
 * \return \c 1 if the SPI Receive Holding Register is full, otherwise \c 0.
 */
static inline bool spi_is_tx_ok(SPI_t *spi)
{
	return spi->STATUS & SPI_IF_bm ? true : false;
    2ece:	82 81       	ldd	r24, Z+2	; 0x02
		spi_write_single(spi,CONFIG_SPI_MASTER_DUMMY); //Dummy write

		while (!spi_is_rx_full(spi)) {
    2ed0:	88 23       	and	r24, r24
    2ed2:	ec f7       	brge	.-6      	; 0x2ece <spi_read_packet+0x12>
 * \return The data byte
 *
 */
static inline uint8_t spi_get(SPI_t *spi)
{
	return spi->DATA;
    2ed4:	83 81       	ldd	r24, Z+3	; 0x03
 * \param data Pointer to the data byte where to store the received data.
 *
 */
inline static void spi_read_single(SPI_t *spi, uint8_t *data)
{
	*data=spi_get(spi);
    2ed6:	8d 93       	st	X+, r24
 *
 * \pre SPI device must be selected with spi_select_device() first
 */
status_code_t spi_read_packet(SPI_t *spi, uint8_t *data, size_t len)
{
	while (len--) {
    2ed8:	a4 17       	cp	r26, r20
    2eda:	b5 07       	cpc	r27, r21
    2edc:	b9 f7       	brne	.-18     	; 0x2ecc <spi_read_packet+0x10>
		spi_read_single(spi, data);
		data++;
	}
	
	return STATUS_OK;
}
    2ede:	80 e0       	ldi	r24, 0x00	; 0
    2ee0:	08 95       	ret

00002ee2 <ioport_configure_port_pin>:
#include "ioport_compat.h"

#if defined(IOPORT_XMEGA_COMPAT)
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
    2ee2:	cf 93       	push	r28
    2ee4:	df 93       	push	r29
    2ee6:	fc 01       	movw	r30, r24
    2ee8:	70 96       	adiw	r30, 0x10	; 16
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
    2eea:	20 e0       	ldi	r18, 0x00	; 0
    2eec:	30 e0       	ldi	r19, 0x00	; 0
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
    2eee:	c6 2f       	mov	r28, r22
    2ef0:	d0 e0       	ldi	r29, 0x00	; 0
    2ef2:	de 01       	movw	r26, r28
    2ef4:	02 2e       	mov	r0, r18
    2ef6:	02 c0       	rjmp	.+4      	; 0x2efc <ioport_configure_port_pin+0x1a>
    2ef8:	b5 95       	asr	r27
    2efa:	a7 95       	ror	r26
    2efc:	0a 94       	dec	r0
    2efe:	e2 f7       	brpl	.-8      	; 0x2ef8 <ioport_configure_port_pin+0x16>
    2f00:	a0 fd       	sbrc	r26, 0
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
    2f02:	50 83       	st	Z, r21
    2f04:	2f 5f       	subi	r18, 0xFF	; 255
    2f06:	3f 4f       	sbci	r19, 0xFF	; 255
    2f08:	31 96       	adiw	r30, 0x01	; 1
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
    2f0a:	28 30       	cpi	r18, 0x08	; 8
    2f0c:	31 05       	cpc	r19, r1
    2f0e:	89 f7       	brne	.-30     	; 0x2ef2 <ioport_configure_port_pin+0x10>
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
		}
	}
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
    2f10:	40 ff       	sbrs	r20, 0
    2f12:	0a c0       	rjmp	.+20     	; 0x2f28 <ioport_configure_port_pin+0x46>
		if (flags & IOPORT_INIT_HIGH) {
    2f14:	41 ff       	sbrs	r20, 1
    2f16:	03 c0       	rjmp	.+6      	; 0x2f1e <ioport_configure_port_pin+0x3c>
			*((uint8_t *)port + PORT_OUTSET) = pin_mask;
    2f18:	fc 01       	movw	r30, r24
    2f1a:	65 83       	std	Z+5, r22	; 0x05
    2f1c:	02 c0       	rjmp	.+4      	; 0x2f22 <ioport_configure_port_pin+0x40>
		} else {
			*((uint8_t *)port + PORT_OUTCLR) = pin_mask;
    2f1e:	fc 01       	movw	r30, r24
    2f20:	66 83       	std	Z+6, r22	; 0x06
		}

		*((uint8_t *)port + PORT_DIRSET) = pin_mask;
    2f22:	fc 01       	movw	r30, r24
    2f24:	61 83       	std	Z+1, r22	; 0x01
    2f26:	02 c0       	rjmp	.+4      	; 0x2f2c <ioport_configure_port_pin+0x4a>
	} else {
		*((uint8_t *)port + PORT_DIRCLR) = pin_mask;
    2f28:	fc 01       	movw	r30, r24
    2f2a:	62 83       	std	Z+2, r22	; 0x02
	}
}
    2f2c:	df 91       	pop	r29
    2f2e:	cf 91       	pop	r28
    2f30:	08 95       	ret

00002f32 <sysclk_init>:
    2f32:	cf 93       	push	r28
    2f34:	df 93       	push	r29
    2f36:	00 d0       	rcall	.+0      	; 0x2f38 <sysclk_init+0x6>
    2f38:	1f 92       	push	r1
    2f3a:	cd b7       	in	r28, 0x3d	; 61
    2f3c:	de b7       	in	r29, 0x3e	; 62
    2f3e:	8f ef       	ldi	r24, 0xFF	; 255
    2f40:	80 93 70 00 	sts	0x0070, r24
    2f44:	80 93 71 00 	sts	0x0071, r24
    2f48:	80 93 72 00 	sts	0x0072, r24
    2f4c:	80 93 73 00 	sts	0x0073, r24
    2f50:	80 93 74 00 	sts	0x0074, r24
    2f54:	80 93 75 00 	sts	0x0075, r24
    2f58:	80 93 76 00 	sts	0x0076, r24
    2f5c:	64 e0       	ldi	r22, 0x04	; 4
    2f5e:	81 e4       	ldi	r24, 0x41	; 65
    2f60:	90 e0       	ldi	r25, 0x00	; 0
    2f62:	e6 d0       	rcall	.+460    	; 0x3130 <ccp_write_io>
    2f64:	6c e1       	ldi	r22, 0x1C	; 28
    2f66:	70 e0       	ldi	r23, 0x00	; 0
    2f68:	82 e0       	ldi	r24, 0x02	; 2
    2f6a:	d8 d0       	rcall	.+432    	; 0x311c <nvm_read_byte>
    2f6c:	8a 83       	std	Y+2, r24	; 0x02
    2f6e:	6d e1       	ldi	r22, 0x1D	; 29
    2f70:	70 e0       	ldi	r23, 0x00	; 0
    2f72:	82 e0       	ldi	r24, 0x02	; 2
    2f74:	d3 d0       	rcall	.+422    	; 0x311c <nvm_read_byte>
    2f76:	89 83       	std	Y+1, r24	; 0x01
    2f78:	89 81       	ldd	r24, Y+1	; 0x01
    2f7a:	9a 81       	ldd	r25, Y+2	; 0x02
    2f7c:	01 96       	adiw	r24, 0x01	; 1
    2f7e:	21 f4       	brne	.+8      	; 0x2f88 <sysclk_init+0x56>
    2f80:	80 e4       	ldi	r24, 0x40	; 64
    2f82:	93 e2       	ldi	r25, 0x23	; 35
    2f84:	89 83       	std	Y+1, r24	; 0x01
    2f86:	9a 83       	std	Y+2, r25	; 0x02
    2f88:	89 81       	ldd	r24, Y+1	; 0x01
    2f8a:	9a 81       	ldd	r25, Y+2	; 0x02
    2f8c:	8b 83       	std	Y+3, r24	; 0x03
    2f8e:	9c 83       	std	Y+4, r25	; 0x04
    2f90:	e0 e6       	ldi	r30, 0x60	; 96
    2f92:	f0 e0       	ldi	r31, 0x00	; 0
    2f94:	82 83       	std	Z+2, r24	; 0x02
    2f96:	8c 81       	ldd	r24, Y+4	; 0x04
    2f98:	83 83       	std	Z+3, r24	; 0x03
    2f9a:	8f b7       	in	r24, 0x3f	; 63
    2f9c:	f8 94       	cli
    2f9e:	e0 e5       	ldi	r30, 0x50	; 80
    2fa0:	f0 e0       	ldi	r31, 0x00	; 0
    2fa2:	90 81       	ld	r25, Z
    2fa4:	92 60       	ori	r25, 0x02	; 2
    2fa6:	90 83       	st	Z, r25
    2fa8:	8f bf       	out	0x3f, r24	; 63
    2faa:	81 81       	ldd	r24, Z+1	; 0x01
    2fac:	81 ff       	sbrs	r24, 1
    2fae:	fd cf       	rjmp	.-6      	; 0x2faa <sysclk_init+0x78>
    2fb0:	8f b7       	in	r24, 0x3f	; 63
    2fb2:	f8 94       	cli
    2fb4:	a0 e5       	ldi	r26, 0x50	; 80
    2fb6:	b0 e0       	ldi	r27, 0x00	; 0
    2fb8:	16 96       	adiw	r26, 0x06	; 6
    2fba:	9c 91       	ld	r25, X
    2fbc:	16 97       	sbiw	r26, 0x06	; 6
    2fbe:	99 7f       	andi	r25, 0xF9	; 249
    2fc0:	16 96       	adiw	r26, 0x06	; 6
    2fc2:	9c 93       	st	X, r25
    2fc4:	16 97       	sbiw	r26, 0x06	; 6
    2fc6:	e0 e6       	ldi	r30, 0x60	; 96
    2fc8:	f0 e0       	ldi	r31, 0x00	; 0
    2fca:	90 e8       	ldi	r25, 0x80	; 128
    2fcc:	95 83       	std	Z+5, r25	; 0x05
    2fce:	9b eb       	ldi	r25, 0xBB	; 187
    2fd0:	96 83       	std	Z+6, r25	; 0x06
    2fd2:	16 96       	adiw	r26, 0x06	; 6
    2fd4:	9c 91       	ld	r25, X
    2fd6:	16 97       	sbiw	r26, 0x06	; 6
    2fd8:	94 60       	ori	r25, 0x04	; 4
    2fda:	16 96       	adiw	r26, 0x06	; 6
    2fdc:	9c 93       	st	X, r25
    2fde:	90 81       	ld	r25, Z
    2fe0:	91 60       	ori	r25, 0x01	; 1
    2fe2:	90 83       	st	Z, r25
    2fe4:	8f bf       	out	0x3f, r24	; 63
    2fe6:	61 e0       	ldi	r22, 0x01	; 1
    2fe8:	80 e4       	ldi	r24, 0x40	; 64
    2fea:	90 e0       	ldi	r25, 0x00	; 0
    2fec:	a1 d0       	rcall	.+322    	; 0x3130 <ccp_write_io>
    2fee:	8f b7       	in	r24, 0x3f	; 63
    2ff0:	f8 94       	cli
    2ff2:	e0 e5       	ldi	r30, 0x50	; 80
    2ff4:	f0 e0       	ldi	r31, 0x00	; 0
    2ff6:	90 81       	ld	r25, Z
    2ff8:	9e 7f       	andi	r25, 0xFE	; 254
    2ffa:	90 83       	st	Z, r25
    2ffc:	8f bf       	out	0x3f, r24	; 63
    2ffe:	24 96       	adiw	r28, 0x04	; 4
    3000:	cd bf       	out	0x3d, r28	; 61
    3002:	de bf       	out	0x3e, r29	; 62
    3004:	df 91       	pop	r29
    3006:	cf 91       	pop	r28
    3008:	08 95       	ret

0000300a <sysclk_enable_module>:
    300a:	9f b7       	in	r25, 0x3f	; 63
    300c:	f8 94       	cli
    300e:	e8 2f       	mov	r30, r24
    3010:	f0 e0       	ldi	r31, 0x00	; 0
    3012:	e0 59       	subi	r30, 0x90	; 144
    3014:	ff 4f       	sbci	r31, 0xFF	; 255
    3016:	60 95       	com	r22
    3018:	80 81       	ld	r24, Z
    301a:	68 23       	and	r22, r24
    301c:	60 83       	st	Z, r22
    301e:	9f bf       	out	0x3f, r25	; 63
    3020:	08 95       	ret

00003022 <sysclk_enable_usb>:

	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
    3022:	86 30       	cpi	r24, 0x06	; 6
    3024:	11 f4       	brne	.+4      	; 0x302a <sysclk_enable_usb+0x8>
		prescaler = CLK_USBPSDIV_8_gc;
    3026:	68 e1       	ldi	r22, 0x18	; 24
    3028:	01 c0       	rjmp	.+2      	; 0x302c <sysclk_enable_usb+0xa>
	}
	else {
		prescaler = 0;
    302a:	60 e0       	ldi	r22, 0x00	; 0

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    302c:	e0 e5       	ldi	r30, 0x50	; 80
    302e:	f0 e0       	ldi	r31, 0x00	; 0
    3030:	81 81       	ldd	r24, Z+1	; 0x01
	/*
	 * Switch to the system clock selected by the user.
	 */
	switch (CONFIG_USBCLK_SOURCE) {
	case USBCLK_SRC_RCOSC:
		if (!osc_is_ready(OSC_ID_RC32MHZ)) {
    3032:	81 fd       	sbrc	r24, 1
    3034:	24 c0       	rjmp	.+72     	; 0x307e <sysclk_enable_usb+0x5c>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    3036:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    3038:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    303a:	90 81       	ld	r25, Z
    303c:	92 60       	ori	r25, 0x02	; 2
    303e:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3040:	8f bf       	out	0x3f, r24	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    3042:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
    3044:	81 ff       	sbrs	r24, 1
    3046:	fd cf       	rjmp	.-6      	; 0x3042 <sysclk_enable_usb+0x20>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    3048:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    304a:	f8 94       	cli
# if !XMEGA_E
				|| (ref_id == OSC_ID_USBSOF)
#endif
				);

		OSC.DFLLCTRL &= ~(OSC_RC32MCREF_gm);
    304c:	a0 e5       	ldi	r26, 0x50	; 80
    304e:	b0 e0       	ldi	r27, 0x00	; 0
    3050:	16 96       	adiw	r26, 0x06	; 6
    3052:	9c 91       	ld	r25, X
    3054:	16 97       	sbiw	r26, 0x06	; 6
    3056:	99 7f       	andi	r25, 0xF9	; 249
    3058:	16 96       	adiw	r26, 0x06	; 6
    305a:	9c 93       	st	X, r25
    305c:	16 97       	sbiw	r26, 0x06	; 6
		else if (ref_id == OSC_ID_USBSOF) {
			/*
			 * Calibrate 32MRC at 48MHz using USB SOF
			 * 48MHz / 1kHz = 0xBB80
			 */
			DFLLRC32M.COMP1 = 0x80;
    305e:	e0 e6       	ldi	r30, 0x60	; 96
    3060:	f0 e0       	ldi	r31, 0x00	; 0
    3062:	90 e8       	ldi	r25, 0x80	; 128
    3064:	95 83       	std	Z+5, r25	; 0x05
			DFLLRC32M.COMP2 = 0xBB;
    3066:	9b eb       	ldi	r25, 0xBB	; 187
    3068:	96 83       	std	Z+6, r25	; 0x06
			OSC.DFLLCTRL |= OSC_RC32MCREF_USBSOF_gc;
    306a:	16 96       	adiw	r26, 0x06	; 6
    306c:	9c 91       	ld	r25, X
    306e:	16 97       	sbiw	r26, 0x06	; 6
    3070:	94 60       	ori	r25, 0x04	; 4
    3072:	16 96       	adiw	r26, 0x06	; 6
    3074:	9c 93       	st	X, r25
			OSC.DFLLCTRL &= ~(OSC_RC32MCREF_bm);
# endif
		}
#endif

		DFLLRC32M.CTRL |= DFLL_ENABLE_bm;
    3076:	90 81       	ld	r25, Z
    3078:	91 60       	ori	r25, 0x01	; 1
    307a:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    307c:	8f bf       	out	0x3f, r24	; 63
			}
			osc_enable_autocalibration(OSC_ID_RC32MHZ,
					CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC);
#endif
		}
		ccp_write_io((uint8_t *)&CLK.USBCTRL, (prescaler)
    307e:	63 60       	ori	r22, 0x03	; 3
    3080:	84 e4       	ldi	r24, 0x44	; 68
    3082:	90 e0       	ldi	r25, 0x00	; 0
    3084:	55 d0       	rcall	.+170    	; 0x3130 <ccp_write_io>
	default:
		Assert(false);
		break;
	}

	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_USB);
    3086:	60 e4       	ldi	r22, 0x40	; 64
    3088:	80 e0       	ldi	r24, 0x00	; 0
    308a:	bf cf       	rjmp	.-130    	; 0x300a <sysclk_enable_module>
    308c:	08 95       	ret

0000308e <spi_xmega_set_baud_div>:
 * \return Status of operation.
 *   \retval >=0  Success.
 *   \retval  <0  Error.
 */
int8_t spi_xmega_set_baud_div(SPI_t *spi, uint32_t baudrate, uint32_t clkper_hz)
{
    308e:	cf 92       	push	r12
    3090:	df 92       	push	r13
    3092:	ef 92       	push	r14
    3094:	ff 92       	push	r15
    3096:	0f 93       	push	r16
    3098:	1f 93       	push	r17
    309a:	cf 93       	push	r28
    309c:	df 93       	push	r29
    309e:	ec 01       	movw	r28, r24
    30a0:	6a 01       	movw	r12, r20
    30a2:	7b 01       	movw	r14, r22

	/*
	 * Get wanted divisor rounded up so we don't get speed higher than
	 * requested baudrate.
	 */
	divisor = (clkper_hz + baudrate - 1) / baudrate;
    30a4:	db 01       	movw	r26, r22
    30a6:	ca 01       	movw	r24, r20
    30a8:	01 97       	sbiw	r24, 0x01	; 1
    30aa:	a1 09       	sbc	r26, r1
    30ac:	b1 09       	sbc	r27, r1
    30ae:	bc 01       	movw	r22, r24
    30b0:	cd 01       	movw	r24, r26
    30b2:	60 0f       	add	r22, r16
    30b4:	71 1f       	adc	r23, r17
    30b6:	82 1f       	adc	r24, r18
    30b8:	93 1f       	adc	r25, r19
    30ba:	a7 01       	movw	r20, r14
    30bc:	96 01       	movw	r18, r12
    30be:	8c d1       	rcall	.+792    	; 0x33d8 <__udivmodsi4>

	if (divisor > 128) {
    30c0:	21 38       	cpi	r18, 0x81	; 129
    30c2:	31 05       	cpc	r19, r1
    30c4:	41 05       	cpc	r20, r1
    30c6:	51 05       	cpc	r21, r1
    30c8:	f8 f4       	brcc	.+62     	; 0x3108 <spi_xmega_set_baud_div+0x7a>

	/*
	 * For divisor values between the possible ones round up to the closest
	 * higher one to avoid higher baudrate than requested.
	 */
	if (divisor_8bit > 64) {
    30ca:	21 34       	cpi	r18, 0x41	; 65
    30cc:	60 f4       	brcc	.+24     	; 0x30e6 <spi_xmega_set_baud_div+0x58>
		ctrl = SPI_PRESCALER_DIV128_gc;
	}
	else if (divisor_8bit > 32) {
    30ce:	21 32       	cpi	r18, 0x21	; 33
    30d0:	60 f4       	brcc	.+24     	; 0x30ea <spi_xmega_set_baud_div+0x5c>
		ctrl = SPI_PRESCALER_DIV64_gc;
	}
	else if (divisor_8bit > 16) {
    30d2:	21 31       	cpi	r18, 0x11	; 17
    30d4:	60 f4       	brcc	.+24     	; 0x30ee <spi_xmega_set_baud_div+0x60>
		ctrl = SPI_CLK2X_bm | SPI_PRESCALER_DIV64_gc;
	}
	else if (divisor_8bit > 8) {
    30d6:	29 30       	cpi	r18, 0x09	; 9
    30d8:	60 f4       	brcc	.+24     	; 0x30f2 <spi_xmega_set_baud_div+0x64>
		ctrl = SPI_PRESCALER_DIV16_gc;
	}
	else if (divisor_8bit > 4) {
    30da:	25 30       	cpi	r18, 0x05	; 5
    30dc:	60 f4       	brcc	.+24     	; 0x30f6 <spi_xmega_set_baud_div+0x68>
		ctrl = SPI_CLK2X_bm | SPI_PRESCALER_DIV16_gc;
	}
	else if (divisor_8bit > 2) {
    30de:	23 30       	cpi	r18, 0x03	; 3
    30e0:	60 f0       	brcs	.+24     	; 0x30fa <spi_xmega_set_baud_div+0x6c>
		ctrl = SPI_PRESCALER_DIV4_gc;
    30e2:	90 e0       	ldi	r25, 0x00	; 0
    30e4:	0b c0       	rjmp	.+22     	; 0x30fc <spi_xmega_set_baud_div+0x6e>
	/*
	 * For divisor values between the possible ones round up to the closest
	 * higher one to avoid higher baudrate than requested.
	 */
	if (divisor_8bit > 64) {
		ctrl = SPI_PRESCALER_DIV128_gc;
    30e6:	93 e0       	ldi	r25, 0x03	; 3
    30e8:	09 c0       	rjmp	.+18     	; 0x30fc <spi_xmega_set_baud_div+0x6e>
	}
	else if (divisor_8bit > 32) {
		ctrl = SPI_PRESCALER_DIV64_gc;
    30ea:	92 e0       	ldi	r25, 0x02	; 2
    30ec:	07 c0       	rjmp	.+14     	; 0x30fc <spi_xmega_set_baud_div+0x6e>
	}
	else if (divisor_8bit > 16) {
		ctrl = SPI_CLK2X_bm | SPI_PRESCALER_DIV64_gc;
    30ee:	92 e8       	ldi	r25, 0x82	; 130
    30f0:	05 c0       	rjmp	.+10     	; 0x30fc <spi_xmega_set_baud_div+0x6e>
	}
	else if (divisor_8bit > 8) {
		ctrl = SPI_PRESCALER_DIV16_gc;
    30f2:	91 e0       	ldi	r25, 0x01	; 1
    30f4:	03 c0       	rjmp	.+6      	; 0x30fc <spi_xmega_set_baud_div+0x6e>
	}
	else if (divisor_8bit > 4) {
		ctrl = SPI_CLK2X_bm | SPI_PRESCALER_DIV16_gc;
    30f6:	91 e8       	ldi	r25, 0x81	; 129
    30f8:	01 c0       	rjmp	.+2      	; 0x30fc <spi_xmega_set_baud_div+0x6e>
	}
	else if (divisor_8bit > 2) {
		ctrl = SPI_PRESCALER_DIV4_gc;
	}
	else {
		ctrl = SPI_CLK2X_bm | SPI_PRESCALER_DIV4_gc;
    30fa:	90 e8       	ldi	r25, 0x80	; 128
	}

	// Update register and make sure to clear out any leftover bits
	spi->CTRL = (spi->CTRL & ~(SPI_CLK2X_bm | SPI_PRESCALER_gm)) | ctrl;
    30fc:	88 81       	ld	r24, Y
    30fe:	8c 77       	andi	r24, 0x7C	; 124
    3100:	89 2b       	or	r24, r25
    3102:	88 83       	st	Y, r24

	return 1;
    3104:	81 e0       	ldi	r24, 0x01	; 1
    3106:	01 c0       	rjmp	.+2      	; 0x310a <spi_xmega_set_baud_div+0x7c>
	if (divisor > 128) {
		/*
		 * Highest possible divisor is 128 so fail since we can't get
		 * low enough baudrate.
		 */
		return -1;
    3108:	8f ef       	ldi	r24, 0xFF	; 255

	// Update register and make sure to clear out any leftover bits
	spi->CTRL = (spi->CTRL & ~(SPI_CLK2X_bm | SPI_PRESCALER_gm)) | ctrl;

	return 1;
}
    310a:	df 91       	pop	r29
    310c:	cf 91       	pop	r28
    310e:	1f 91       	pop	r17
    3110:	0f 91       	pop	r16
    3112:	ff 90       	pop	r15
    3114:	ef 90       	pop	r14
    3116:	df 90       	pop	r13
    3118:	cf 90       	pop	r12
    311a:	08 95       	ret

0000311c <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
    311c:	40 91 ca 01 	lds	r20, 0x01CA
	mov ZL, r22               ; Load byte index into low byte of Z.
    3120:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
    3122:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
    3124:	80 93 ca 01 	sts	0x01CA, r24
	lpm r24, Z                ; Perform an LPM to read out byte
    3128:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
    312a:	40 93 ca 01 	sts	0x01CA, r20
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
    312e:	08 95       	ret

00003130 <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    3130:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    3132:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    3134:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    3136:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    3138:	60 83       	st	Z, r22
	ret                             // Return to caller
    313a:	08 95       	ret

0000313c <board_init>:
    313c:	41 e0       	ldi	r20, 0x01	; 1
    313e:	50 e0       	ldi	r21, 0x00	; 0
    3140:	62 e0       	ldi	r22, 0x02	; 2
    3142:	80 e0       	ldi	r24, 0x00	; 0
    3144:	96 e0       	ldi	r25, 0x06	; 6
    3146:	cd de       	rcall	.-614    	; 0x2ee2 <ioport_configure_port_pin>
    3148:	41 e0       	ldi	r20, 0x01	; 1
    314a:	50 e0       	ldi	r21, 0x00	; 0
    314c:	60 e2       	ldi	r22, 0x20	; 32
    314e:	80 e6       	ldi	r24, 0x60	; 96
    3150:	96 e0       	ldi	r25, 0x06	; 6
    3152:	c7 de       	rcall	.-626    	; 0x2ee2 <ioport_configure_port_pin>
    3154:	41 e0       	ldi	r20, 0x01	; 1
    3156:	50 e0       	ldi	r21, 0x00	; 0
    3158:	61 e0       	ldi	r22, 0x01	; 1
    315a:	80 e4       	ldi	r24, 0x40	; 64
    315c:	96 e0       	ldi	r25, 0x06	; 6
    315e:	c1 de       	rcall	.-638    	; 0x2ee2 <ioport_configure_port_pin>
    3160:	41 e0       	ldi	r20, 0x01	; 1
    3162:	50 e0       	ldi	r21, 0x00	; 0
    3164:	68 e0       	ldi	r22, 0x08	; 8
    3166:	80 e4       	ldi	r24, 0x40	; 64
    3168:	96 e0       	ldi	r25, 0x06	; 6
    316a:	bb de       	rcall	.-650    	; 0x2ee2 <ioport_configure_port_pin>
    316c:	41 e0       	ldi	r20, 0x01	; 1
    316e:	50 e0       	ldi	r21, 0x00	; 0
    3170:	62 e0       	ldi	r22, 0x02	; 2
    3172:	80 e4       	ldi	r24, 0x40	; 64
    3174:	96 e0       	ldi	r25, 0x06	; 6
    3176:	b5 de       	rcall	.-662    	; 0x2ee2 <ioport_configure_port_pin>
    3178:	41 e0       	ldi	r20, 0x01	; 1
    317a:	50 e0       	ldi	r21, 0x00	; 0
    317c:	64 e0       	ldi	r22, 0x04	; 4
    317e:	80 e4       	ldi	r24, 0x40	; 64
    3180:	96 e0       	ldi	r25, 0x06	; 6
    3182:	af de       	rcall	.-674    	; 0x2ee2 <ioport_configure_port_pin>
    3184:	43 e0       	ldi	r20, 0x03	; 3
    3186:	50 e0       	ldi	r21, 0x00	; 0
    3188:	60 e2       	ldi	r22, 0x20	; 32
    318a:	80 e4       	ldi	r24, 0x40	; 64
    318c:	96 e0       	ldi	r25, 0x06	; 6
    318e:	a9 de       	rcall	.-686    	; 0x2ee2 <ioport_configure_port_pin>
    3190:	40 e0       	ldi	r20, 0x00	; 0
    3192:	50 e0       	ldi	r21, 0x00	; 0
    3194:	60 e4       	ldi	r22, 0x40	; 64
    3196:	80 e4       	ldi	r24, 0x40	; 64
    3198:	96 e0       	ldi	r25, 0x06	; 6
    319a:	a3 de       	rcall	.-698    	; 0x2ee2 <ioport_configure_port_pin>
    319c:	43 e0       	ldi	r20, 0x03	; 3
    319e:	50 e0       	ldi	r21, 0x00	; 0
    31a0:	60 e8       	ldi	r22, 0x80	; 128
    31a2:	80 e4       	ldi	r24, 0x40	; 64
    31a4:	96 e0       	ldi	r25, 0x06	; 6
    31a6:	9d ce       	rjmp	.-710    	; 0x2ee2 <ioport_configure_port_pin>
    31a8:	08 95       	ret

000031aa <callback_cdc_enable>:
void callback_cdc_disable(void) {
	flag_autorize_cdc_transfer = false;
}

void usb_init(void) {
	udc_start();
    31aa:	81 e0       	ldi	r24, 0x01	; 1
    31ac:	80 93 49 23 	sts	0x2349, r24
    31b0:	08 95       	ret

000031b2 <callback_cdc_disable>:
    31b2:	10 92 49 23 	sts	0x2349, r1
    31b6:	08 95       	ret

000031b8 <udi_cdc_puts>:
}

void udi_cdc_puts (const char *send) {
    31b8:	cf 93       	push	r28
    31ba:	df 93       	push	r29
    31bc:	ec 01       	movw	r28, r24
	// Cycle through each character individually
	while (*send) {
    31be:	88 81       	ld	r24, Y
    31c0:	88 23       	and	r24, r24
    31c2:	49 f0       	breq	.+18     	; 0x31d6 <udi_cdc_puts+0x1e>
    31c4:	21 96       	adiw	r28, 0x01	; 1
		udi_cdc_putc(*send++);
    31c6:	99 27       	eor	r25, r25
    31c8:	87 fd       	sbrc	r24, 7
    31ca:	90 95       	com	r25
    31cc:	0e 94 ce 03 	call	0x79c	; 0x79c <udi_cdc_putc>
	udc_start();
}

void udi_cdc_puts (const char *send) {
	// Cycle through each character individually
	while (*send) {
    31d0:	89 91       	ld	r24, Y+
    31d2:	81 11       	cpse	r24, r1
    31d4:	f8 cf       	rjmp	.-16     	; 0x31c6 <udi_cdc_puts+0xe>
		udi_cdc_putc(*send++);
	}
}
    31d6:	df 91       	pop	r29
    31d8:	cf 91       	pop	r28
    31da:	08 95       	ret

000031dc <print_value>:

void print_value (uint16_t value) {
    31dc:	cf 93       	push	r28
    31de:	df 93       	push	r29
    31e0:	cd b7       	in	r28, 0x3d	; 61
    31e2:	de b7       	in	r29, 0x3e	; 62
    31e4:	29 97       	sbiw	r28, 0x09	; 9
    31e6:	cd bf       	out	0x3d, r28	; 61
    31e8:	de bf       	out	0x3e, r29	; 62
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    31ea:	4a e0       	ldi	r20, 0x0A	; 10
    31ec:	be 01       	movw	r22, r28
    31ee:	6f 5f       	subi	r22, 0xFF	; 255
    31f0:	7f 4f       	sbci	r23, 0xFF	; 255
    31f2:	23 d1       	rcall	.+582    	; 0x343a <__itoa_ncheck>
	char buffer[9];
	//itoa(value, buffer, 16);
	//udi_cdc_puts(buffer);
	//udi_cdc_puts("\t");
	itoa((long)value, buffer, 10);
	udi_cdc_puts(buffer);
    31f4:	ce 01       	movw	r24, r28
    31f6:	01 96       	adiw	r24, 0x01	; 1
    31f8:	df df       	rcall	.-66     	; 0x31b8 <udi_cdc_puts>
	//udi_cdc_puts("\t");
	//itoa(value, buffer, 2);
	//udi_cdc_puts(buffer);
	//udi_cdc_puts("\n\r");
}
    31fa:	29 96       	adiw	r28, 0x09	; 9
    31fc:	cd bf       	out	0x3d, r28	; 61
    31fe:	de bf       	out	0x3e, r29	; 62
    3200:	df 91       	pop	r29
    3202:	cf 91       	pop	r28
    3204:	08 95       	ret

00003206 <main>:
	// Insert system clock initialization code here (sysclk_init()).

	// -------------------------------------------------------------------
	// USB
	
	sysclk_init();
    3206:	95 de       	rcall	.-726    	; 0x2f32 <sysclk_init>
	
	irq_initialize_vectors();
    3208:	87 e0       	ldi	r24, 0x07	; 7
    320a:	e0 ea       	ldi	r30, 0xA0	; 160
    320c:	f0 e0       	ldi	r31, 0x00	; 0
    320e:	82 83       	std	Z+2, r24	; 0x02
	cpu_irq_enable();
    3210:	78 94       	sei
	// -------------------------------------------------------------------
	
	board_init();
    3212:	94 df       	rcall	.-216    	; 0x313c <board_init>
	
	// -------------------------------------------------------------------
	// USB
	
	udc_start();
    3214:	0e 94 bc 04 	call	0x978	; 0x978 <udc_start>
*/
	// -------------------------------------------------------------------
	
	// -------------------------------------------------------------------
	// RF24
	rf24_begin();
    3218:	88 dd       	rcall	.-1264   	; 0x2d2a <rf24_begin>
	
	rf24_setPayloadSize(32);
    321a:	80 e2       	ldi	r24, 0x20	; 32
    321c:	61 dc       	rcall	.-1854   	; 0x2ae0 <rf24_setPayloadSize>
	rf24_setPALevel(RF24_PA_MAX);
    321e:	83 e0       	ldi	r24, 0x03	; 3
    3220:	34 dd       	rcall	.-1432   	; 0x2c8a <rf24_setPALevel>
	dynamic_payloads_enabled=false;
    3222:	10 92 5b 23 	sts	0x235B, r1

__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	base->OUTTGL = arch_ioport_pin_to_mask(pin);
    3226:	80 e2       	ldi	r24, 0x20	; 32
    3228:	e0 e6       	ldi	r30, 0x60	; 96
    322a:	f6 e0       	ldi	r31, 0x06	; 6
    322c:	87 83       	std	Z+7, r24	; 0x07

	gpio_toggle_pin(LED_D5);
	rf24_setAddressWidth(5);
    322e:	85 e0       	ldi	r24, 0x05	; 5
    3230:	89 dc       	rcall	.-1774   	; 0x2b44 <rf24_setAddressWidth>
	rf24_openReadingPipe(1,addresses[0]);
    3232:	6c e7       	ldi	r22, 0x7C	; 124
    3234:	70 e2       	ldi	r23, 0x20	; 32
    3236:	81 e0       	ldi	r24, 0x01	; 1
    3238:	92 dc       	rcall	.-1756   	; 0x2b5e <rf24_openReadingPipe>
	rf24_startListening();
    323a:	ed dc       	rcall	.-1574   	; 0x2c16 <rf24_startListening>

//-----------------------------------------------------------------------------



int main (void) {
    323c:	0f 2e       	mov	r0, r31
    323e:	f0 ea       	ldi	r31, 0xA0	; 160
    3240:	cf 2e       	mov	r12, r31
    3242:	f0 2d       	mov	r31, r0
    3244:	0f 2e       	mov	r0, r31
    3246:	f6 e8       	ldi	r31, 0x86	; 134
    3248:	df 2e       	mov	r13, r31
    324a:	f0 2d       	mov	r31, r0
    324c:	ee 24       	eor	r14, r14
    324e:	e3 94       	inc	r14
    3250:	f1 2c       	mov	r15, r1
    3252:	0f 2e       	mov	r0, r31
    3254:	f0 e6       	ldi	r31, 0x60	; 96
    3256:	2f 2e       	mov	r2, r31
    3258:	f6 e0       	ldi	r31, 0x06	; 6
    325a:	3f 2e       	mov	r3, r31
    325c:	f0 2d       	mov	r31, r0
    325e:	68 94       	set
    3260:	bb 24       	eor	r11, r11
    3262:	b5 f8       	bld	r11, 5
			rf24_read( joystick, 12 ); //ech should figure this out better

			udi_cdc_puts("Rjoy ");
			print_value(joystick[0]);
			udi_cdc_puts(" ");
			print_value(joystick[1]);
    3264:	0f 2e       	mov	r0, r31
    3266:	f1 e7       	ldi	r31, 0x71	; 113
    3268:	4f 2e       	mov	r4, r31
    326a:	f3 e2       	ldi	r31, 0x23	; 35
    326c:	5f 2e       	mov	r5, r31
    326e:	f0 2d       	mov	r31, r0
			udi_cdc_puts(" Ljoy ");
			print_value(joystick[2]);
    3270:	0f 2e       	mov	r0, r31
    3272:	f3 e7       	ldi	r31, 0x73	; 115
    3274:	6f 2e       	mov	r6, r31
    3276:	f3 e2       	ldi	r31, 0x23	; 35
    3278:	7f 2e       	mov	r7, r31
    327a:	f0 2d       	mov	r31, r0
			udi_cdc_puts(" ");
			print_value(joystick[3]);
    327c:	0f 2e       	mov	r0, r31
    327e:	f5 e7       	ldi	r31, 0x75	; 117
    3280:	8f 2e       	mov	r8, r31
    3282:	f3 e2       	ldi	r31, 0x23	; 35
    3284:	9f 2e       	mov	r9, r31
    3286:	f0 2d       	mov	r31, r0
			udi_cdc_puts(" R ");
			print_value(joystick[4] & 0b00000001);
    3288:	07 e7       	ldi	r16, 0x77	; 119
    328a:	13 e2       	ldi	r17, 0x23	; 35
			udi_cdc_puts(" ");
			print_value(joystick[4]>>3 & 0b00000001);
			udi_cdc_puts(" ");
			print_value(joystick[4]>>4 & 0b00000001);
			udi_cdc_puts(" L ");
			print_value(joystick[5] & 0b00000001);
    328c:	c9 e7       	ldi	r28, 0x79	; 121
    328e:	d3 e2       	ldi	r29, 0x23	; 35

//-----------------------------------------------------------------------------



int main (void) {
    3290:	8c 2d       	mov	r24, r12
    3292:	9d 2d       	mov	r25, r13
    3294:	ae 2d       	mov	r26, r14
    3296:	bf 2d       	mov	r27, r15
    3298:	01 97       	sbiw	r24, 0x01	; 1
    329a:	a1 09       	sbc	r26, r1
    329c:	b1 09       	sbc	r27, r1
    329e:	00 97       	sbiw	r24, 0x00	; 0
    32a0:	a1 05       	cpc	r26, r1
    32a2:	b1 05       	cpc	r27, r1
    32a4:	c9 f7       	brne	.-14     	; 0x3298 <main+0x92>
	
	while (1) {
		// data comes from remote control about every 100ms
		delay_ms(25);
		
		if ( rf24_available(NULL) ) {
    32a6:	80 e0       	ldi	r24, 0x00	; 0
    32a8:	90 e0       	ldi	r25, 0x00	; 0
    32aa:	32 dc       	rcall	.-1948   	; 0x2b10 <rf24_available>
    32ac:	88 23       	and	r24, r24
    32ae:	81 f3       	breq	.-32     	; 0x3290 <main+0x8a>
    32b0:	f1 01       	movw	r30, r2
    32b2:	b7 82       	std	Z+7, r11	; 0x07
			gpio_toggle_pin(LED_D5);
			
			// Fetch the data payload
			rf24_read( joystick, 12 ); //ech should figure this out better
    32b4:	6c e0       	ldi	r22, 0x0C	; 12
    32b6:	8f e6       	ldi	r24, 0x6F	; 111
    32b8:	93 e2       	ldi	r25, 0x23	; 35
    32ba:	3f dc       	rcall	.-1922   	; 0x2b3a <rf24_read>

			udi_cdc_puts("Rjoy ");
    32bc:	82 e8       	ldi	r24, 0x82	; 130
    32be:	90 e2       	ldi	r25, 0x20	; 32
    32c0:	7b df       	rcall	.-266    	; 0x31b8 <udi_cdc_puts>
			print_value(joystick[0]);
    32c2:	80 91 6f 23 	lds	r24, 0x236F
    32c6:	90 91 70 23 	lds	r25, 0x2370
    32ca:	88 df       	rcall	.-240    	; 0x31dc <print_value>
			udi_cdc_puts(" ");
    32cc:	85 e9       	ldi	r24, 0x95	; 149
    32ce:	90 e2       	ldi	r25, 0x20	; 32
    32d0:	73 df       	rcall	.-282    	; 0x31b8 <udi_cdc_puts>
			print_value(joystick[1]);
    32d2:	f2 01       	movw	r30, r4
    32d4:	80 81       	ld	r24, Z
    32d6:	91 81       	ldd	r25, Z+1	; 0x01
    32d8:	81 df       	rcall	.-254    	; 0x31dc <print_value>
			udi_cdc_puts(" Ljoy ");
    32da:	88 e8       	ldi	r24, 0x88	; 136
    32dc:	90 e2       	ldi	r25, 0x20	; 32
    32de:	6c df       	rcall	.-296    	; 0x31b8 <udi_cdc_puts>
			print_value(joystick[2]);
    32e0:	f3 01       	movw	r30, r6
    32e2:	80 81       	ld	r24, Z
    32e4:	91 81       	ldd	r25, Z+1	; 0x01
    32e6:	7a df       	rcall	.-268    	; 0x31dc <print_value>
			udi_cdc_puts(" ");
    32e8:	85 e9       	ldi	r24, 0x95	; 149
    32ea:	90 e2       	ldi	r25, 0x20	; 32
    32ec:	65 df       	rcall	.-310    	; 0x31b8 <udi_cdc_puts>
			print_value(joystick[3]);
    32ee:	f4 01       	movw	r30, r8
    32f0:	80 81       	ld	r24, Z
    32f2:	91 81       	ldd	r25, Z+1	; 0x01
    32f4:	73 df       	rcall	.-282    	; 0x31dc <print_value>
			udi_cdc_puts(" R ");
    32f6:	8f e8       	ldi	r24, 0x8F	; 143
    32f8:	90 e2       	ldi	r25, 0x20	; 32
    32fa:	5e df       	rcall	.-324    	; 0x31b8 <udi_cdc_puts>
			print_value(joystick[4] & 0b00000001);
    32fc:	f8 01       	movw	r30, r16
    32fe:	80 81       	ld	r24, Z
    3300:	91 81       	ldd	r25, Z+1	; 0x01
    3302:	81 70       	andi	r24, 0x01	; 1
    3304:	99 27       	eor	r25, r25
    3306:	6a df       	rcall	.-300    	; 0x31dc <print_value>
			udi_cdc_puts(" ");
    3308:	85 e9       	ldi	r24, 0x95	; 149
    330a:	90 e2       	ldi	r25, 0x20	; 32
    330c:	55 df       	rcall	.-342    	; 0x31b8 <udi_cdc_puts>
			print_value(joystick[4]>>1 & 0b00000001);
    330e:	f8 01       	movw	r30, r16
    3310:	80 81       	ld	r24, Z
    3312:	86 95       	lsr	r24
    3314:	81 70       	andi	r24, 0x01	; 1
    3316:	90 e0       	ldi	r25, 0x00	; 0
    3318:	61 df       	rcall	.-318    	; 0x31dc <print_value>
			udi_cdc_puts(" ");
    331a:	85 e9       	ldi	r24, 0x95	; 149
    331c:	90 e2       	ldi	r25, 0x20	; 32
    331e:	4c df       	rcall	.-360    	; 0x31b8 <udi_cdc_puts>
			print_value(joystick[4]>>2 & 0b00000001);
    3320:	f8 01       	movw	r30, r16
    3322:	80 81       	ld	r24, Z
    3324:	82 fb       	bst	r24, 2
    3326:	88 27       	eor	r24, r24
    3328:	80 f9       	bld	r24, 0
    332a:	90 e0       	ldi	r25, 0x00	; 0
    332c:	57 df       	rcall	.-338    	; 0x31dc <print_value>
			udi_cdc_puts(" ");
    332e:	85 e9       	ldi	r24, 0x95	; 149
    3330:	90 e2       	ldi	r25, 0x20	; 32
    3332:	42 df       	rcall	.-380    	; 0x31b8 <udi_cdc_puts>
			print_value(joystick[4]>>3 & 0b00000001);
    3334:	f8 01       	movw	r30, r16
    3336:	80 81       	ld	r24, Z
    3338:	83 fb       	bst	r24, 3
    333a:	88 27       	eor	r24, r24
    333c:	80 f9       	bld	r24, 0
    333e:	90 e0       	ldi	r25, 0x00	; 0
    3340:	4d df       	rcall	.-358    	; 0x31dc <print_value>
			udi_cdc_puts(" ");
    3342:	85 e9       	ldi	r24, 0x95	; 149
    3344:	90 e2       	ldi	r25, 0x20	; 32
    3346:	38 df       	rcall	.-400    	; 0x31b8 <udi_cdc_puts>
			print_value(joystick[4]>>4 & 0b00000001);
    3348:	f8 01       	movw	r30, r16
    334a:	80 81       	ld	r24, Z
    334c:	82 95       	swap	r24
    334e:	81 70       	andi	r24, 0x01	; 1
    3350:	90 e0       	ldi	r25, 0x00	; 0
    3352:	44 df       	rcall	.-376    	; 0x31dc <print_value>
			udi_cdc_puts(" L ");
    3354:	83 e9       	ldi	r24, 0x93	; 147
    3356:	90 e2       	ldi	r25, 0x20	; 32
    3358:	2f df       	rcall	.-418    	; 0x31b8 <udi_cdc_puts>
			print_value(joystick[5] & 0b00000001);
    335a:	88 81       	ld	r24, Y
    335c:	99 81       	ldd	r25, Y+1	; 0x01
    335e:	81 70       	andi	r24, 0x01	; 1
    3360:	99 27       	eor	r25, r25
    3362:	3c df       	rcall	.-392    	; 0x31dc <print_value>
			udi_cdc_puts(" ");
    3364:	85 e9       	ldi	r24, 0x95	; 149
    3366:	90 e2       	ldi	r25, 0x20	; 32
    3368:	27 df       	rcall	.-434    	; 0x31b8 <udi_cdc_puts>
			print_value(joystick[5]>>1 & 0b00000001);
    336a:	88 81       	ld	r24, Y
    336c:	86 95       	lsr	r24
    336e:	81 70       	andi	r24, 0x01	; 1
    3370:	90 e0       	ldi	r25, 0x00	; 0
    3372:	34 df       	rcall	.-408    	; 0x31dc <print_value>
			udi_cdc_puts(" ");
    3374:	85 e9       	ldi	r24, 0x95	; 149
    3376:	90 e2       	ldi	r25, 0x20	; 32
    3378:	1f df       	rcall	.-450    	; 0x31b8 <udi_cdc_puts>
			print_value(joystick[5]>>2 & 0b00000001);
    337a:	88 81       	ld	r24, Y
    337c:	82 fb       	bst	r24, 2
    337e:	88 27       	eor	r24, r24
    3380:	80 f9       	bld	r24, 0
    3382:	90 e0       	ldi	r25, 0x00	; 0
    3384:	2b df       	rcall	.-426    	; 0x31dc <print_value>
			udi_cdc_puts(" ");
    3386:	85 e9       	ldi	r24, 0x95	; 149
    3388:	90 e2       	ldi	r25, 0x20	; 32
    338a:	16 df       	rcall	.-468    	; 0x31b8 <udi_cdc_puts>
			print_value(joystick[5]>>3 & 0b00000001);
    338c:	88 81       	ld	r24, Y
    338e:	83 fb       	bst	r24, 3
    3390:	88 27       	eor	r24, r24
    3392:	80 f9       	bld	r24, 0
    3394:	90 e0       	ldi	r25, 0x00	; 0
    3396:	22 df       	rcall	.-444    	; 0x31dc <print_value>
			udi_cdc_puts(" ");
    3398:	85 e9       	ldi	r24, 0x95	; 149
    339a:	90 e2       	ldi	r25, 0x20	; 32
    339c:	0d df       	rcall	.-486    	; 0x31b8 <udi_cdc_puts>
			print_value(joystick[5]>>4 & 0b00000001);
    339e:	88 81       	ld	r24, Y
    33a0:	82 95       	swap	r24
    33a2:	81 70       	andi	r24, 0x01	; 1
    33a4:	90 e0       	ldi	r25, 0x00	; 0
    33a6:	1a df       	rcall	.-460    	; 0x31dc <print_value>
			udi_cdc_puts("\r\n");
    33a8:	87 e9       	ldi	r24, 0x97	; 151
    33aa:	90 e2       	ldi	r25, 0x20	; 32
    33ac:	05 df       	rcall	.-502    	; 0x31b8 <udi_cdc_puts>
    33ae:	70 cf       	rjmp	.-288    	; 0x3290 <main+0x8a>

000033b0 <__udivmodhi4>:
    33b0:	aa 1b       	sub	r26, r26
    33b2:	bb 1b       	sub	r27, r27
    33b4:	51 e1       	ldi	r21, 0x11	; 17
    33b6:	07 c0       	rjmp	.+14     	; 0x33c6 <__udivmodhi4_ep>

000033b8 <__udivmodhi4_loop>:
    33b8:	aa 1f       	adc	r26, r26
    33ba:	bb 1f       	adc	r27, r27
    33bc:	a6 17       	cp	r26, r22
    33be:	b7 07       	cpc	r27, r23
    33c0:	10 f0       	brcs	.+4      	; 0x33c6 <__udivmodhi4_ep>
    33c2:	a6 1b       	sub	r26, r22
    33c4:	b7 0b       	sbc	r27, r23

000033c6 <__udivmodhi4_ep>:
    33c6:	88 1f       	adc	r24, r24
    33c8:	99 1f       	adc	r25, r25
    33ca:	5a 95       	dec	r21
    33cc:	a9 f7       	brne	.-22     	; 0x33b8 <__udivmodhi4_loop>
    33ce:	80 95       	com	r24
    33d0:	90 95       	com	r25
    33d2:	bc 01       	movw	r22, r24
    33d4:	cd 01       	movw	r24, r26
    33d6:	08 95       	ret

000033d8 <__udivmodsi4>:
    33d8:	a1 e2       	ldi	r26, 0x21	; 33
    33da:	1a 2e       	mov	r1, r26
    33dc:	aa 1b       	sub	r26, r26
    33de:	bb 1b       	sub	r27, r27
    33e0:	fd 01       	movw	r30, r26
    33e2:	0d c0       	rjmp	.+26     	; 0x33fe <__udivmodsi4_ep>

000033e4 <__udivmodsi4_loop>:
    33e4:	aa 1f       	adc	r26, r26
    33e6:	bb 1f       	adc	r27, r27
    33e8:	ee 1f       	adc	r30, r30
    33ea:	ff 1f       	adc	r31, r31
    33ec:	a2 17       	cp	r26, r18
    33ee:	b3 07       	cpc	r27, r19
    33f0:	e4 07       	cpc	r30, r20
    33f2:	f5 07       	cpc	r31, r21
    33f4:	20 f0       	brcs	.+8      	; 0x33fe <__udivmodsi4_ep>
    33f6:	a2 1b       	sub	r26, r18
    33f8:	b3 0b       	sbc	r27, r19
    33fa:	e4 0b       	sbc	r30, r20
    33fc:	f5 0b       	sbc	r31, r21

000033fe <__udivmodsi4_ep>:
    33fe:	66 1f       	adc	r22, r22
    3400:	77 1f       	adc	r23, r23
    3402:	88 1f       	adc	r24, r24
    3404:	99 1f       	adc	r25, r25
    3406:	1a 94       	dec	r1
    3408:	69 f7       	brne	.-38     	; 0x33e4 <__udivmodsi4_loop>
    340a:	60 95       	com	r22
    340c:	70 95       	com	r23
    340e:	80 95       	com	r24
    3410:	90 95       	com	r25
    3412:	9b 01       	movw	r18, r22
    3414:	ac 01       	movw	r20, r24
    3416:	bd 01       	movw	r22, r26
    3418:	cf 01       	movw	r24, r30
    341a:	08 95       	ret

0000341c <__tablejump2__>:
    341c:	ee 0f       	add	r30, r30
    341e:	ff 1f       	adc	r31, r31

00003420 <__tablejump__>:
    3420:	05 90       	lpm	r0, Z+
    3422:	f4 91       	lpm	r31, Z
    3424:	e0 2d       	mov	r30, r0
    3426:	19 94       	eijmp

00003428 <memcpy>:
    3428:	fb 01       	movw	r30, r22
    342a:	dc 01       	movw	r26, r24
    342c:	02 c0       	rjmp	.+4      	; 0x3432 <memcpy+0xa>
    342e:	01 90       	ld	r0, Z+
    3430:	0d 92       	st	X+, r0
    3432:	41 50       	subi	r20, 0x01	; 1
    3434:	50 40       	sbci	r21, 0x00	; 0
    3436:	d8 f7       	brcc	.-10     	; 0x342e <memcpy+0x6>
    3438:	08 95       	ret

0000343a <__itoa_ncheck>:
    343a:	bb 27       	eor	r27, r27
    343c:	4a 30       	cpi	r20, 0x0A	; 10
    343e:	31 f4       	brne	.+12     	; 0x344c <__itoa_ncheck+0x12>
    3440:	99 23       	and	r25, r25
    3442:	22 f4       	brpl	.+8      	; 0x344c <__itoa_ncheck+0x12>
    3444:	bd e2       	ldi	r27, 0x2D	; 45
    3446:	90 95       	com	r25
    3448:	81 95       	neg	r24
    344a:	9f 4f       	sbci	r25, 0xFF	; 255
    344c:	01 c0       	rjmp	.+2      	; 0x3450 <__utoa_common>

0000344e <__utoa_ncheck>:
    344e:	bb 27       	eor	r27, r27

00003450 <__utoa_common>:
    3450:	fb 01       	movw	r30, r22
    3452:	55 27       	eor	r21, r21
    3454:	aa 27       	eor	r26, r26
    3456:	88 0f       	add	r24, r24
    3458:	99 1f       	adc	r25, r25
    345a:	aa 1f       	adc	r26, r26
    345c:	a4 17       	cp	r26, r20
    345e:	10 f0       	brcs	.+4      	; 0x3464 <__utoa_common+0x14>
    3460:	a4 1b       	sub	r26, r20
    3462:	83 95       	inc	r24
    3464:	50 51       	subi	r21, 0x10	; 16
    3466:	b9 f7       	brne	.-18     	; 0x3456 <__utoa_common+0x6>
    3468:	a0 5d       	subi	r26, 0xD0	; 208
    346a:	aa 33       	cpi	r26, 0x3A	; 58
    346c:	08 f0       	brcs	.+2      	; 0x3470 <__utoa_common+0x20>
    346e:	a9 5d       	subi	r26, 0xD9	; 217
    3470:	a1 93       	st	Z+, r26
    3472:	00 97       	sbiw	r24, 0x00	; 0
    3474:	79 f7       	brne	.-34     	; 0x3454 <__utoa_common+0x4>
    3476:	b1 11       	cpse	r27, r1
    3478:	b1 93       	st	Z+, r27
    347a:	11 92       	st	Z+, r1
    347c:	cb 01       	movw	r24, r22
    347e:	00 c0       	rjmp	.+0      	; 0x3480 <strrev>

00003480 <strrev>:
    3480:	dc 01       	movw	r26, r24
    3482:	fc 01       	movw	r30, r24
    3484:	67 2f       	mov	r22, r23
    3486:	71 91       	ld	r23, Z+
    3488:	77 23       	and	r23, r23
    348a:	e1 f7       	brne	.-8      	; 0x3484 <strrev+0x4>
    348c:	32 97       	sbiw	r30, 0x02	; 2
    348e:	04 c0       	rjmp	.+8      	; 0x3498 <strrev+0x18>
    3490:	7c 91       	ld	r23, X
    3492:	6d 93       	st	X+, r22
    3494:	70 83       	st	Z, r23
    3496:	62 91       	ld	r22, -Z
    3498:	ae 17       	cp	r26, r30
    349a:	bf 07       	cpc	r27, r31
    349c:	c8 f3       	brcs	.-14     	; 0x3490 <strrev+0x10>
    349e:	08 95       	ret

000034a0 <_exit>:
    34a0:	f8 94       	cli

000034a2 <__stop_program>:
    34a2:	ff cf       	rjmp	.-2      	; 0x34a2 <__stop_program>

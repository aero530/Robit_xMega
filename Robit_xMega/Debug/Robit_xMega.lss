
Robit_xMega.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003a58  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000082  00802000  00003a58  00003aec  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000343  00802084  00802084  00003b70  2**2
                  ALLOC
  3 .comment      00000030  00000000  00000000  00003b6e  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000970  00000000  00000000  00003ba0  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0001266f  00000000  00000000  00004510  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00002dd4  00000000  00000000  00016b7f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000b889  00000000  00000000  00019953  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000022f0  00000000  00000000  000251dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0003381c  00000000  00000000  000274cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00009ac9  00000000  00000000  0005ace8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000858  00000000  00000000  000647b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0000cb45  00000000  00000000  00065010  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	14 c1       	rjmp	.+552    	; 0x22a <__ctors_end>
       2:	00 00       	nop
       4:	33 c1       	rjmp	.+614    	; 0x26c <__bad_interrupt>
       6:	00 00       	nop
       8:	31 c1       	rjmp	.+610    	; 0x26c <__bad_interrupt>
       a:	00 00       	nop
       c:	2f c1       	rjmp	.+606    	; 0x26c <__bad_interrupt>
       e:	00 00       	nop
      10:	2d c1       	rjmp	.+602    	; 0x26c <__bad_interrupt>
      12:	00 00       	nop
      14:	2b c1       	rjmp	.+598    	; 0x26c <__bad_interrupt>
      16:	00 00       	nop
      18:	29 c1       	rjmp	.+594    	; 0x26c <__bad_interrupt>
      1a:	00 00       	nop
      1c:	27 c1       	rjmp	.+590    	; 0x26c <__bad_interrupt>
      1e:	00 00       	nop
      20:	25 c1       	rjmp	.+586    	; 0x26c <__bad_interrupt>
      22:	00 00       	nop
      24:	23 c1       	rjmp	.+582    	; 0x26c <__bad_interrupt>
      26:	00 00       	nop
      28:	21 c1       	rjmp	.+578    	; 0x26c <__bad_interrupt>
      2a:	00 00       	nop
      2c:	1f c1       	rjmp	.+574    	; 0x26c <__bad_interrupt>
      2e:	00 00       	nop
      30:	1d c1       	rjmp	.+570    	; 0x26c <__bad_interrupt>
      32:	00 00       	nop
      34:	1b c1       	rjmp	.+566    	; 0x26c <__bad_interrupt>
      36:	00 00       	nop
      38:	24 c7       	rjmp	.+3656   	; 0xe82 <__vector_14>
      3a:	00 00       	nop
      3c:	4f c7       	rjmp	.+3742   	; 0xedc <__vector_15>
      3e:	00 00       	nop
      40:	7a c7       	rjmp	.+3828   	; 0xf36 <__vector_16>
      42:	00 00       	nop
      44:	a5 c7       	rjmp	.+3914   	; 0xf90 <__vector_17>
      46:	00 00       	nop
      48:	d0 c7       	rjmp	.+4000   	; 0xfea <__vector_18>
      4a:	00 00       	nop
      4c:	fb c7       	rjmp	.+4086   	; 0x1044 <__vector_19>
      4e:	00 00       	nop
      50:	0c 94 4f 08 	jmp	0x109e	; 0x109e <__vector_20>
      54:	0c 94 7c 08 	jmp	0x10f8	; 0x10f8 <__vector_21>
      58:	0c 94 a9 08 	jmp	0x1152	; 0x1152 <__vector_22>
      5c:	0c 94 d6 08 	jmp	0x11ac	; 0x11ac <__vector_23>
      60:	05 c1       	rjmp	.+522    	; 0x26c <__bad_interrupt>
      62:	00 00       	nop
      64:	03 c1       	rjmp	.+518    	; 0x26c <__bad_interrupt>
      66:	00 00       	nop
      68:	01 c1       	rjmp	.+514    	; 0x26c <__bad_interrupt>
      6a:	00 00       	nop
      6c:	ff c0       	rjmp	.+510    	; 0x26c <__bad_interrupt>
      6e:	00 00       	nop
      70:	fd c0       	rjmp	.+506    	; 0x26c <__bad_interrupt>
      72:	00 00       	nop
      74:	fb c0       	rjmp	.+502    	; 0x26c <__bad_interrupt>
      76:	00 00       	nop
      78:	f9 c0       	rjmp	.+498    	; 0x26c <__bad_interrupt>
      7a:	00 00       	nop
      7c:	f7 c0       	rjmp	.+494    	; 0x26c <__bad_interrupt>
      7e:	00 00       	nop
      80:	f5 c0       	rjmp	.+490    	; 0x26c <__bad_interrupt>
      82:	00 00       	nop
      84:	f3 c0       	rjmp	.+486    	; 0x26c <__bad_interrupt>
      86:	00 00       	nop
      88:	f1 c0       	rjmp	.+482    	; 0x26c <__bad_interrupt>
      8a:	00 00       	nop
      8c:	ef c0       	rjmp	.+478    	; 0x26c <__bad_interrupt>
      8e:	00 00       	nop
      90:	ed c0       	rjmp	.+474    	; 0x26c <__bad_interrupt>
      92:	00 00       	nop
      94:	eb c0       	rjmp	.+470    	; 0x26c <__bad_interrupt>
      96:	00 00       	nop
      98:	e9 c0       	rjmp	.+466    	; 0x26c <__bad_interrupt>
      9a:	00 00       	nop
      9c:	e7 c0       	rjmp	.+462    	; 0x26c <__bad_interrupt>
      9e:	00 00       	nop
      a0:	e5 c0       	rjmp	.+458    	; 0x26c <__bad_interrupt>
      a2:	00 00       	nop
      a4:	e3 c0       	rjmp	.+454    	; 0x26c <__bad_interrupt>
      a6:	00 00       	nop
      a8:	e1 c0       	rjmp	.+450    	; 0x26c <__bad_interrupt>
      aa:	00 00       	nop
      ac:	df c0       	rjmp	.+446    	; 0x26c <__bad_interrupt>
      ae:	00 00       	nop
      b0:	dd c0       	rjmp	.+442    	; 0x26c <__bad_interrupt>
      b2:	00 00       	nop
      b4:	db c0       	rjmp	.+438    	; 0x26c <__bad_interrupt>
      b6:	00 00       	nop
      b8:	d9 c0       	rjmp	.+434    	; 0x26c <__bad_interrupt>
      ba:	00 00       	nop
      bc:	0c 94 c5 0a 	jmp	0x158a	; 0x158a <__vector_47>
      c0:	0c 94 f2 0a 	jmp	0x15e4	; 0x15e4 <__vector_48>
      c4:	0c 94 1f 0b 	jmp	0x163e	; 0x163e <__vector_49>
      c8:	0c 94 4c 0b 	jmp	0x1698	; 0x1698 <__vector_50>
      cc:	0c 94 79 0b 	jmp	0x16f2	; 0x16f2 <__vector_51>
      d0:	0c 94 a6 0b 	jmp	0x174c	; 0x174c <__vector_52>
      d4:	0c 94 d3 0b 	jmp	0x17a6	; 0x17a6 <__vector_53>
      d8:	0c 94 00 0c 	jmp	0x1800	; 0x1800 <__vector_54>
      dc:	0c 94 2d 0c 	jmp	0x185a	; 0x185a <__vector_55>
      e0:	0c 94 5a 0c 	jmp	0x18b4	; 0x18b4 <__vector_56>
      e4:	c3 c0       	rjmp	.+390    	; 0x26c <__bad_interrupt>
      e6:	00 00       	nop
      e8:	c1 c0       	rjmp	.+386    	; 0x26c <__bad_interrupt>
      ea:	00 00       	nop
      ec:	bf c0       	rjmp	.+382    	; 0x26c <__bad_interrupt>
      ee:	00 00       	nop
      f0:	bd c0       	rjmp	.+378    	; 0x26c <__bad_interrupt>
      f2:	00 00       	nop
      f4:	bb c0       	rjmp	.+374    	; 0x26c <__bad_interrupt>
      f6:	00 00       	nop
      f8:	b9 c0       	rjmp	.+370    	; 0x26c <__bad_interrupt>
      fa:	00 00       	nop
      fc:	b7 c0       	rjmp	.+366    	; 0x26c <__bad_interrupt>
      fe:	00 00       	nop
     100:	b5 c0       	rjmp	.+362    	; 0x26c <__bad_interrupt>
     102:	00 00       	nop
     104:	b3 c0       	rjmp	.+358    	; 0x26c <__bad_interrupt>
     106:	00 00       	nop
     108:	b1 c0       	rjmp	.+354    	; 0x26c <__bad_interrupt>
     10a:	00 00       	nop
     10c:	af c0       	rjmp	.+350    	; 0x26c <__bad_interrupt>
     10e:	00 00       	nop
     110:	ad c0       	rjmp	.+346    	; 0x26c <__bad_interrupt>
     112:	00 00       	nop
     114:	ab c0       	rjmp	.+342    	; 0x26c <__bad_interrupt>
     116:	00 00       	nop
     118:	a9 c0       	rjmp	.+338    	; 0x26c <__bad_interrupt>
     11a:	00 00       	nop
     11c:	a7 c0       	rjmp	.+334    	; 0x26c <__bad_interrupt>
     11e:	00 00       	nop
     120:	a5 c0       	rjmp	.+330    	; 0x26c <__bad_interrupt>
     122:	00 00       	nop
     124:	a3 c0       	rjmp	.+326    	; 0x26c <__bad_interrupt>
     126:	00 00       	nop
     128:	a1 c0       	rjmp	.+322    	; 0x26c <__bad_interrupt>
     12a:	00 00       	nop
     12c:	9f c0       	rjmp	.+318    	; 0x26c <__bad_interrupt>
     12e:	00 00       	nop
     130:	9d c0       	rjmp	.+314    	; 0x26c <__bad_interrupt>
     132:	00 00       	nop
     134:	0c 94 03 09 	jmp	0x1206	; 0x1206 <__vector_77>
     138:	0c 94 30 09 	jmp	0x1260	; 0x1260 <__vector_78>
     13c:	0c 94 5d 09 	jmp	0x12ba	; 0x12ba <__vector_79>
     140:	0c 94 8a 09 	jmp	0x1314	; 0x1314 <__vector_80>
     144:	0c 94 b7 09 	jmp	0x136e	; 0x136e <__vector_81>
     148:	0c 94 e4 09 	jmp	0x13c8	; 0x13c8 <__vector_82>
     14c:	0c 94 11 0a 	jmp	0x1422	; 0x1422 <__vector_83>
     150:	0c 94 3e 0a 	jmp	0x147c	; 0x147c <__vector_84>
     154:	0c 94 6b 0a 	jmp	0x14d6	; 0x14d6 <__vector_85>
     158:	0c 94 98 0a 	jmp	0x1530	; 0x1530 <__vector_86>
     15c:	87 c0       	rjmp	.+270    	; 0x26c <__bad_interrupt>
     15e:	00 00       	nop
     160:	85 c0       	rjmp	.+266    	; 0x26c <__bad_interrupt>
     162:	00 00       	nop
     164:	83 c0       	rjmp	.+262    	; 0x26c <__bad_interrupt>
     166:	00 00       	nop
     168:	81 c0       	rjmp	.+258    	; 0x26c <__bad_interrupt>
     16a:	00 00       	nop
     16c:	7f c0       	rjmp	.+254    	; 0x26c <__bad_interrupt>
     16e:	00 00       	nop
     170:	7d c0       	rjmp	.+250    	; 0x26c <__bad_interrupt>
     172:	00 00       	nop
     174:	7b c0       	rjmp	.+246    	; 0x26c <__bad_interrupt>
     176:	00 00       	nop
     178:	79 c0       	rjmp	.+242    	; 0x26c <__bad_interrupt>
     17a:	00 00       	nop
     17c:	77 c0       	rjmp	.+238    	; 0x26c <__bad_interrupt>
     17e:	00 00       	nop
     180:	75 c0       	rjmp	.+234    	; 0x26c <__bad_interrupt>
     182:	00 00       	nop
     184:	73 c0       	rjmp	.+230    	; 0x26c <__bad_interrupt>
     186:	00 00       	nop
     188:	71 c0       	rjmp	.+226    	; 0x26c <__bad_interrupt>
     18a:	00 00       	nop
     18c:	6f c0       	rjmp	.+222    	; 0x26c <__bad_interrupt>
     18e:	00 00       	nop
     190:	6d c0       	rjmp	.+218    	; 0x26c <__bad_interrupt>
     192:	00 00       	nop
     194:	6b c0       	rjmp	.+214    	; 0x26c <__bad_interrupt>
     196:	00 00       	nop
     198:	69 c0       	rjmp	.+210    	; 0x26c <__bad_interrupt>
     19a:	00 00       	nop
     19c:	67 c0       	rjmp	.+206    	; 0x26c <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	65 c0       	rjmp	.+202    	; 0x26c <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	63 c0       	rjmp	.+198    	; 0x26c <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	61 c0       	rjmp	.+194    	; 0x26c <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	5f c0       	rjmp	.+190    	; 0x26c <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	0c 94 87 0c 	jmp	0x190e	; 0x190e <__vector_108>
     1b4:	0c 94 b4 0c 	jmp	0x1968	; 0x1968 <__vector_109>
     1b8:	0c 94 e1 0c 	jmp	0x19c2	; 0x19c2 <__vector_110>
     1bc:	0c 94 0e 0d 	jmp	0x1a1c	; 0x1a1c <__vector_111>
     1c0:	0c 94 3b 0d 	jmp	0x1a76	; 0x1a76 <__vector_112>
     1c4:	0c 94 68 0d 	jmp	0x1ad0	; 0x1ad0 <__vector_113>
     1c8:	51 c0       	rjmp	.+162    	; 0x26c <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	4f c0       	rjmp	.+158    	; 0x26c <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	4d c0       	rjmp	.+154    	; 0x26c <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	4b c0       	rjmp	.+150    	; 0x26c <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	49 c0       	rjmp	.+146    	; 0x26c <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	47 c0       	rjmp	.+142    	; 0x26c <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	45 c0       	rjmp	.+138    	; 0x26c <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	43 c0       	rjmp	.+134    	; 0x26c <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	41 c0       	rjmp	.+130    	; 0x26c <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	3f c0       	rjmp	.+126    	; 0x26c <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	3d c0       	rjmp	.+122    	; 0x26c <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	0c 94 39 14 	jmp	0x2872	; 0x2872 <__vector_125>
     1f8:	0c 94 f3 14 	jmp	0x29e6	; 0x29e6 <__vector_126>
     1fc:	80 0e       	add	r8, r16
     1fe:	95 0e       	add	r9, r21
     200:	aa 0e       	add	r10, r26
     202:	bf 0e       	add	r11, r31
     204:	d4 0e       	add	r13, r20
     206:	e9 0e       	add	r14, r25
     208:	fe 0e       	add	r15, r30
     20a:	42 10       	cpse	r4, r2
     20c:	30 10       	cpse	r3, r0
     20e:	33 10       	cpse	r3, r3
     210:	36 10       	cpse	r3, r6
     212:	39 10       	cpse	r3, r9
     214:	3c 10       	cpse	r3, r12
     216:	3f 10       	cpse	r3, r15

00000218 <__trampolines_end>:
     218:	11 12       	cpse	r1, r17
     21a:	13 14       	cp	r1, r3
     21c:	15 16       	cp	r1, r21

0000021e <child_pipe>:
     21e:	0a 0b 0c 0d 0e 0f                                   ......

00000224 <child_pipe_enable>:
     224:	00 01 02 03 04 05                                   ......

0000022a <__ctors_end>:
     22a:	11 24       	eor	r1, r1
     22c:	1f be       	out	0x3f, r1	; 63
     22e:	cf ef       	ldi	r28, 0xFF	; 255
     230:	cd bf       	out	0x3d, r28	; 61
     232:	df e5       	ldi	r29, 0x5F	; 95
     234:	de bf       	out	0x3e, r29	; 62
     236:	00 e0       	ldi	r16, 0x00	; 0
     238:	0c bf       	out	0x3c, r16	; 60

0000023a <__do_copy_data>:
     23a:	10 e2       	ldi	r17, 0x20	; 32
     23c:	a0 e0       	ldi	r26, 0x00	; 0
     23e:	b0 e2       	ldi	r27, 0x20	; 32
     240:	e8 e5       	ldi	r30, 0x58	; 88
     242:	fa e3       	ldi	r31, 0x3A	; 58
     244:	00 e0       	ldi	r16, 0x00	; 0
     246:	0b bf       	out	0x3b, r16	; 59
     248:	02 c0       	rjmp	.+4      	; 0x24e <__do_copy_data+0x14>
     24a:	07 90       	elpm	r0, Z+
     24c:	0d 92       	st	X+, r0
     24e:	a2 38       	cpi	r26, 0x82	; 130
     250:	b1 07       	cpc	r27, r17
     252:	d9 f7       	brne	.-10     	; 0x24a <__do_copy_data+0x10>

00000254 <__do_clear_bss>:
     254:	23 e2       	ldi	r18, 0x23	; 35
     256:	a4 e8       	ldi	r26, 0x84	; 132
     258:	b0 e2       	ldi	r27, 0x20	; 32
     25a:	01 c0       	rjmp	.+2      	; 0x25e <.do_clear_bss_start>

0000025c <.do_clear_bss_loop>:
     25c:	1d 92       	st	X+, r1

0000025e <.do_clear_bss_start>:
     25e:	a7 3c       	cpi	r26, 0xC7	; 199
     260:	b2 07       	cpc	r27, r18
     262:	e1 f7       	brne	.-8      	; 0x25c <.do_clear_bss_loop>
     264:	0e 94 86 1b 	call	0x370c	; 0x370c <main>
     268:	0c 94 2a 1d 	jmp	0x3a54	; 0x3a54 <_exit>

0000026c <__bad_interrupt>:
     26c:	c9 ce       	rjmp	.-622    	; 0x0 <__vectors>

0000026e <udi_cdc_comm_disable>:
}

iram_size_t udi_cdc_get_nb_received_data(void)
{
	return udi_cdc_multi_get_nb_received_data(0);
}
     26e:	80 91 9a 21 	lds	r24, 0x219A
     272:	81 50       	subi	r24, 0x01	; 1
     274:	80 93 9a 21 	sts	0x219A, r24
     278:	08 95       	ret

0000027a <udi_cdc_data_setup>:
     27a:	80 e0       	ldi	r24, 0x00	; 0
     27c:	08 95       	ret

0000027e <udi_cdc_getsetting>:
     27e:	80 e0       	ldi	r24, 0x00	; 0
     280:	08 95       	ret

00000282 <udi_cdc_comm_setup>:
     282:	80 91 32 23 	lds	r24, 0x2332
     286:	88 23       	and	r24, r24
     288:	dc f4       	brge	.+54     	; 0x2c0 <udi_cdc_comm_setup+0x3e>
     28a:	80 76       	andi	r24, 0x60	; 96
     28c:	80 32       	cpi	r24, 0x20	; 32
     28e:	e9 f5       	brne	.+122    	; 0x30a <udi_cdc_comm_setup+0x88>
     290:	80 91 33 23 	lds	r24, 0x2333
     294:	81 32       	cpi	r24, 0x21	; 33
     296:	d9 f5       	brne	.+118    	; 0x30e <udi_cdc_comm_setup+0x8c>
     298:	80 91 38 23 	lds	r24, 0x2338
     29c:	90 91 39 23 	lds	r25, 0x2339
     2a0:	07 97       	sbiw	r24, 0x07	; 7
     2a2:	b9 f5       	brne	.+110    	; 0x312 <udi_cdc_comm_setup+0x90>
     2a4:	88 ea       	ldi	r24, 0xA8	; 168
     2a6:	91 e2       	ldi	r25, 0x21	; 33
     2a8:	80 93 3a 23 	sts	0x233A, r24
     2ac:	90 93 3b 23 	sts	0x233B, r25
     2b0:	87 e0       	ldi	r24, 0x07	; 7
     2b2:	90 e0       	ldi	r25, 0x00	; 0
     2b4:	80 93 3c 23 	sts	0x233C, r24
     2b8:	90 93 3d 23 	sts	0x233D, r25
     2bc:	81 e0       	ldi	r24, 0x01	; 1
     2be:	08 95       	ret
     2c0:	80 76       	andi	r24, 0x60	; 96
     2c2:	80 32       	cpi	r24, 0x20	; 32
     2c4:	41 f5       	brne	.+80     	; 0x316 <udi_cdc_comm_setup+0x94>
     2c6:	80 91 33 23 	lds	r24, 0x2333
     2ca:	80 32       	cpi	r24, 0x20	; 32
     2cc:	21 f0       	breq	.+8      	; 0x2d6 <udi_cdc_comm_setup+0x54>
     2ce:	82 32       	cpi	r24, 0x22	; 34
     2d0:	21 f5       	brne	.+72     	; 0x31a <udi_cdc_comm_setup+0x98>
     2d2:	81 e0       	ldi	r24, 0x01	; 1
     2d4:	08 95       	ret
     2d6:	80 91 38 23 	lds	r24, 0x2338
     2da:	90 91 39 23 	lds	r25, 0x2339
     2de:	07 97       	sbiw	r24, 0x07	; 7
     2e0:	f1 f4       	brne	.+60     	; 0x31e <udi_cdc_comm_setup+0x9c>
     2e2:	81 e9       	ldi	r24, 0x91	; 145
     2e4:	91 e0       	ldi	r25, 0x01	; 1
     2e6:	80 93 3e 23 	sts	0x233E, r24
     2ea:	90 93 3f 23 	sts	0x233F, r25
     2ee:	88 ea       	ldi	r24, 0xA8	; 168
     2f0:	91 e2       	ldi	r25, 0x21	; 33
     2f2:	80 93 3a 23 	sts	0x233A, r24
     2f6:	90 93 3b 23 	sts	0x233B, r25
     2fa:	87 e0       	ldi	r24, 0x07	; 7
     2fc:	90 e0       	ldi	r25, 0x00	; 0
     2fe:	80 93 3c 23 	sts	0x233C, r24
     302:	90 93 3d 23 	sts	0x233D, r25
     306:	81 e0       	ldi	r24, 0x01	; 1
     308:	08 95       	ret
     30a:	80 e0       	ldi	r24, 0x00	; 0
     30c:	08 95       	ret
     30e:	80 e0       	ldi	r24, 0x00	; 0
     310:	08 95       	ret
     312:	80 e0       	ldi	r24, 0x00	; 0
     314:	08 95       	ret
     316:	80 e0       	ldi	r24, 0x00	; 0
     318:	08 95       	ret
     31a:	80 e0       	ldi	r24, 0x00	; 0
     31c:	08 95       	ret
     31e:	80 e0       	ldi	r24, 0x00	; 0
     320:	08 95       	ret

00000322 <udi_cdc_line_coding_received>:
     322:	08 95       	ret

00000324 <udi_cdc_comm_enable>:
     324:	10 92 9a 21 	sts	0x219A, r1
     328:	10 92 a6 21 	sts	0x21A6, r1
     32c:	10 92 a7 21 	sts	0x21A7, r1
     330:	81 ea       	ldi	r24, 0xA1	; 161
     332:	80 93 9c 21 	sts	0x219C, r24
     336:	80 e2       	ldi	r24, 0x20	; 32
     338:	80 93 9d 21 	sts	0x219D, r24
     33c:	10 92 9e 21 	sts	0x219E, r1
     340:	10 92 9f 21 	sts	0x219F, r1
     344:	10 92 a0 21 	sts	0x21A0, r1
     348:	10 92 a1 21 	sts	0x21A1, r1
     34c:	82 e0       	ldi	r24, 0x02	; 2
     34e:	90 e0       	ldi	r25, 0x00	; 0
     350:	80 93 a2 21 	sts	0x21A2, r24
     354:	90 93 a3 21 	sts	0x21A3, r25
     358:	10 92 a4 21 	sts	0x21A4, r1
     35c:	10 92 a5 21 	sts	0x21A5, r1
     360:	80 e0       	ldi	r24, 0x00	; 0
     362:	92 ec       	ldi	r25, 0xC2	; 194
     364:	a1 e0       	ldi	r26, 0x01	; 1
     366:	b0 e0       	ldi	r27, 0x00	; 0
     368:	80 93 a8 21 	sts	0x21A8, r24
     36c:	90 93 a9 21 	sts	0x21A9, r25
     370:	a0 93 aa 21 	sts	0x21AA, r26
     374:	b0 93 ab 21 	sts	0x21AB, r27
     378:	10 92 ac 21 	sts	0x21AC, r1
     37c:	10 92 ad 21 	sts	0x21AD, r1
     380:	88 e0       	ldi	r24, 0x08	; 8
     382:	80 93 ae 21 	sts	0x21AE, r24
     386:	0e 94 7f 1b 	call	0x36fe	; 0x36fe <callback_cdc_enable>
     38a:	88 23       	and	r24, r24
     38c:	29 f0       	breq	.+10     	; 0x398 <udi_cdc_comm_enable+0x74>
     38e:	90 91 9a 21 	lds	r25, 0x219A
     392:	9f 5f       	subi	r25, 0xFF	; 255
     394:	90 93 9a 21 	sts	0x219A, r25
     398:	08 95       	ret

0000039a <udi_cdc_tx_send>:
     39a:	ff 92       	push	r15
     39c:	0f 93       	push	r16
     39e:	1f 93       	push	r17
     3a0:	cf 93       	push	r28
     3a2:	df 93       	push	r29
     3a4:	80 91 87 20 	lds	r24, 0x2087
     3a8:	81 11       	cpse	r24, r1
     3aa:	9c c0       	rjmp	.+312    	; 0x4e4 <udi_cdc_tx_send+0x14a>
     3ac:	0e 94 7b 12 	call	0x24f6	; 0x24f6 <udd_is_high_speed>
     3b0:	88 23       	and	r24, r24
     3b2:	51 f0       	breq	.+20     	; 0x3c8 <udi_cdc_tx_send+0x2e>
     3b4:	c0 91 88 20 	lds	r28, 0x2088
     3b8:	d0 91 89 20 	lds	r29, 0x2089
     3bc:	0e 94 88 12 	call	0x2510	; 0x2510 <udd_get_micro_frame_number>
     3c0:	c8 17       	cp	r28, r24
     3c2:	d9 07       	cpc	r29, r25
     3c4:	59 f4       	brne	.+22     	; 0x3dc <udi_cdc_tx_send+0x42>
     3c6:	8e c0       	rjmp	.+284    	; 0x4e4 <udi_cdc_tx_send+0x14a>
     3c8:	c0 91 88 20 	lds	r28, 0x2088
     3cc:	d0 91 89 20 	lds	r29, 0x2089
     3d0:	0e 94 83 12 	call	0x2506	; 0x2506 <udd_get_frame_number>
     3d4:	c8 17       	cp	r28, r24
     3d6:	d9 07       	cpc	r29, r25
     3d8:	09 f4       	brne	.+2      	; 0x3dc <udi_cdc_tx_send+0x42>
     3da:	84 c0       	rjmp	.+264    	; 0x4e4 <udi_cdc_tx_send+0x14a>
     3dc:	df b7       	in	r29, 0x3f	; 63
     3de:	f8 94       	cli
     3e0:	c0 91 8a 20 	lds	r28, 0x208A
     3e4:	ec 2f       	mov	r30, r28
     3e6:	f0 e0       	ldi	r31, 0x00	; 0
     3e8:	ee 0f       	add	r30, r30
     3ea:	ff 1f       	adc	r31, r31
     3ec:	e5 57       	subi	r30, 0x75	; 117
     3ee:	ff 4d       	sbci	r31, 0xDF	; 223
     3f0:	80 81       	ld	r24, Z
     3f2:	91 81       	ldd	r25, Z+1	; 0x01
     3f4:	89 2b       	or	r24, r25
     3f6:	09 f5       	brne	.+66     	; 0x43a <udi_cdc_tx_send+0xa0>
     3f8:	80 91 84 20 	lds	r24, 0x2084
     3fc:	90 91 85 20 	lds	r25, 0x2085
     400:	01 96       	adiw	r24, 0x01	; 1
     402:	80 93 84 20 	sts	0x2084, r24
     406:	90 93 85 20 	sts	0x2085, r25
     40a:	0e 94 7b 12 	call	0x24f6	; 0x24f6 <udd_is_high_speed>
     40e:	81 11       	cpse	r24, r1
     410:	07 c0       	rjmp	.+14     	; 0x420 <udi_cdc_tx_send+0x86>
     412:	80 91 84 20 	lds	r24, 0x2084
     416:	90 91 85 20 	lds	r25, 0x2085
     41a:	84 36       	cpi	r24, 0x64	; 100
     41c:	91 05       	cpc	r25, r1
     41e:	58 f0       	brcs	.+22     	; 0x436 <udi_cdc_tx_send+0x9c>
     420:	0e 94 7b 12 	call	0x24f6	; 0x24f6 <udd_is_high_speed>
     424:	88 23       	and	r24, r24
     426:	49 f0       	breq	.+18     	; 0x43a <udi_cdc_tx_send+0xa0>
     428:	80 91 84 20 	lds	r24, 0x2084
     42c:	90 91 85 20 	lds	r25, 0x2085
     430:	80 32       	cpi	r24, 0x20	; 32
     432:	93 40       	sbci	r25, 0x03	; 3
     434:	10 f4       	brcc	.+4      	; 0x43a <udi_cdc_tx_send+0xa0>
     436:	df bf       	out	0x3f, r29	; 63
     438:	55 c0       	rjmp	.+170    	; 0x4e4 <udi_cdc_tx_send+0x14a>
     43a:	10 92 84 20 	sts	0x2084, r1
     43e:	10 92 85 20 	sts	0x2085, r1
     442:	80 91 86 20 	lds	r24, 0x2086
     446:	81 11       	cpse	r24, r1
     448:	06 c0       	rjmp	.+12     	; 0x456 <udi_cdc_tx_send+0xbc>
     44a:	81 e0       	ldi	r24, 0x01	; 1
     44c:	c1 11       	cpse	r28, r1
     44e:	80 e0       	ldi	r24, 0x00	; 0
     450:	80 93 8a 20 	sts	0x208A, r24
     454:	04 c0       	rjmp	.+8      	; 0x45e <udi_cdc_tx_send+0xc4>
     456:	81 e0       	ldi	r24, 0x01	; 1
     458:	c1 11       	cpse	r28, r1
     45a:	80 e0       	ldi	r24, 0x00	; 0
     45c:	c8 2f       	mov	r28, r24
     45e:	81 e0       	ldi	r24, 0x01	; 1
     460:	80 93 87 20 	sts	0x2087, r24
     464:	df bf       	out	0x3f, r29	; 63
     466:	d0 e0       	ldi	r29, 0x00	; 0
     468:	fe 01       	movw	r30, r28
     46a:	ee 0f       	add	r30, r30
     46c:	ff 1f       	adc	r31, r31
     46e:	e5 57       	subi	r30, 0x75	; 117
     470:	ff 4d       	sbci	r31, 0xDF	; 223
     472:	ff 24       	eor	r15, r15
     474:	f3 94       	inc	r15
     476:	80 81       	ld	r24, Z
     478:	91 81       	ldd	r25, Z+1	; 0x01
     47a:	80 34       	cpi	r24, 0x40	; 64
     47c:	91 05       	cpc	r25, r1
     47e:	09 f4       	brne	.+2      	; 0x482 <udi_cdc_tx_send+0xe8>
     480:	f1 2c       	mov	r15, r1
     482:	ff 20       	and	r15, r15
     484:	91 f0       	breq	.+36     	; 0x4aa <udi_cdc_tx_send+0x110>
     486:	0e 94 7b 12 	call	0x24f6	; 0x24f6 <udd_is_high_speed>
     48a:	88 23       	and	r24, r24
     48c:	39 f0       	breq	.+14     	; 0x49c <udi_cdc_tx_send+0x102>
     48e:	0e 94 88 12 	call	0x2510	; 0x2510 <udd_get_micro_frame_number>
     492:	80 93 88 20 	sts	0x2088, r24
     496:	90 93 89 20 	sts	0x2089, r25
     49a:	0b c0       	rjmp	.+22     	; 0x4b2 <udi_cdc_tx_send+0x118>
     49c:	0e 94 83 12 	call	0x2506	; 0x2506 <udd_get_frame_number>
     4a0:	80 93 88 20 	sts	0x2088, r24
     4a4:	90 93 89 20 	sts	0x2089, r25
     4a8:	04 c0       	rjmp	.+8      	; 0x4b2 <udi_cdc_tx_send+0x118>
     4aa:	10 92 88 20 	sts	0x2088, r1
     4ae:	10 92 89 20 	sts	0x2089, r1
     4b2:	fe 01       	movw	r30, r28
     4b4:	ee 0f       	add	r30, r30
     4b6:	ff 1f       	adc	r31, r31
     4b8:	e5 57       	subi	r30, 0x75	; 117
     4ba:	ff 4d       	sbci	r31, 0xDF	; 223
     4bc:	20 81       	ld	r18, Z
     4be:	31 81       	ldd	r19, Z+1	; 0x01
     4c0:	ae 01       	movw	r20, r28
     4c2:	00 24       	eor	r0, r0
     4c4:	56 95       	lsr	r21
     4c6:	47 95       	ror	r20
     4c8:	07 94       	ror	r0
     4ca:	56 95       	lsr	r21
     4cc:	47 95       	ror	r20
     4ce:	07 94       	ror	r0
     4d0:	54 2f       	mov	r21, r20
     4d2:	40 2d       	mov	r20, r0
     4d4:	40 57       	subi	r20, 0x70	; 112
     4d6:	5f 4d       	sbci	r21, 0xDF	; 223
     4d8:	08 e7       	ldi	r16, 0x78	; 120
     4da:	12 e0       	ldi	r17, 0x02	; 2
     4dc:	6f 2d       	mov	r22, r15
     4de:	81 e8       	ldi	r24, 0x81	; 129
     4e0:	0e 94 3a 13 	call	0x2674	; 0x2674 <udd_ep_run>
     4e4:	df 91       	pop	r29
     4e6:	cf 91       	pop	r28
     4e8:	1f 91       	pop	r17
     4ea:	0f 91       	pop	r16
     4ec:	ff 90       	pop	r15
     4ee:	08 95       	ret

000004f0 <udi_cdc_data_sent>:
     4f0:	81 11       	cpse	r24, r1
     4f2:	15 c0       	rjmp	.+42     	; 0x51e <udi_cdc_data_sent+0x2e>
     4f4:	20 91 8a 20 	lds	r18, 0x208A
     4f8:	81 e0       	ldi	r24, 0x01	; 1
     4fa:	90 e0       	ldi	r25, 0x00	; 0
     4fc:	22 23       	and	r18, r18
     4fe:	11 f0       	breq	.+4      	; 0x504 <udi_cdc_data_sent+0x14>
     500:	80 e0       	ldi	r24, 0x00	; 0
     502:	90 e0       	ldi	r25, 0x00	; 0
     504:	fc 01       	movw	r30, r24
     506:	ee 0f       	add	r30, r30
     508:	ff 1f       	adc	r31, r31
     50a:	e5 57       	subi	r30, 0x75	; 117
     50c:	ff 4d       	sbci	r31, 0xDF	; 223
     50e:	10 82       	st	Z, r1
     510:	11 82       	std	Z+1, r1	; 0x01
     512:	10 92 86 20 	sts	0x2086, r1
     516:	10 92 87 20 	sts	0x2087, r1
     51a:	80 e0       	ldi	r24, 0x00	; 0
     51c:	3e cf       	rjmp	.-388    	; 0x39a <udi_cdc_tx_send>
     51e:	08 95       	ret

00000520 <udi_cdc_data_sof_notify>:
     520:	80 e0       	ldi	r24, 0x00	; 0
     522:	3b cf       	rjmp	.-394    	; 0x39a <udi_cdc_tx_send>
     524:	08 95       	ret

00000526 <udi_cdc_data_disable>:
     526:	80 91 99 21 	lds	r24, 0x2199
     52a:	81 50       	subi	r24, 0x01	; 1
     52c:	80 93 99 21 	sts	0x2199, r24
     530:	80 91 99 21 	lds	r24, 0x2199
     534:	0e 94 83 1b 	call	0x3706	; 0x3706 <callback_cdc_disable>
     538:	10 92 98 21 	sts	0x2198, r1
     53c:	08 95       	ret

0000053e <udi_cdc_multi_get_nb_received_data>:
     53e:	4f b7       	in	r20, 0x3f	; 63
     540:	f8 94       	cli
     542:	20 91 11 21 	lds	r18, 0x2111
     546:	30 91 12 21 	lds	r19, 0x2112
     54a:	e0 91 13 21 	lds	r30, 0x2113
     54e:	f0 e0       	ldi	r31, 0x00	; 0
     550:	ee 0f       	add	r30, r30
     552:	ff 1f       	adc	r31, r31
     554:	ec 5e       	subi	r30, 0xEC	; 236
     556:	fe 4d       	sbci	r31, 0xDE	; 222
     558:	80 81       	ld	r24, Z
     55a:	91 81       	ldd	r25, Z+1	; 0x01
     55c:	82 1b       	sub	r24, r18
     55e:	93 0b       	sbc	r25, r19
     560:	4f bf       	out	0x3f, r20	; 63
     562:	08 95       	ret

00000564 <udi_cdc_multi_is_rx_ready>:

bool udi_cdc_multi_is_rx_ready(uint8_t port)
{
	return (udi_cdc_multi_get_nb_received_data(port) > 0);
     564:	ec df       	rcall	.-40     	; 0x53e <udi_cdc_multi_get_nb_received_data>
     566:	21 e0       	ldi	r18, 0x01	; 1
     568:	89 2b       	or	r24, r25
     56a:	09 f4       	brne	.+2      	; 0x56e <udi_cdc_multi_is_rx_ready+0xa>
     56c:	20 e0       	ldi	r18, 0x00	; 0
}
     56e:	82 2f       	mov	r24, r18
     570:	08 95       	ret

00000572 <udi_cdc_rx_start>:
//-------------------------------------------------
//------- Internal routines to process data transfer


static bool udi_cdc_rx_start(uint8_t port)
{
     572:	0f 93       	push	r16
     574:	1f 93       	push	r17
     576:	cf 93       	push	r28
     578:	df 93       	push	r29

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     57a:	4f b7       	in	r20, 0x3f	; 63
	cpu_irq_disable();
     57c:	f8 94       	cli
#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	flags = cpu_irq_save();
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
     57e:	50 91 13 21 	lds	r21, 0x2113
	if (udi_cdc_rx_trans_ongoing[port] ||
     582:	80 91 10 21 	lds	r24, 0x2110
     586:	81 11       	cpse	r24, r1
     588:	10 c0       	rjmp	.+32     	; 0x5aa <udi_cdc_rx_start+0x38>
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
     58a:	20 91 11 21 	lds	r18, 0x2111
     58e:	30 91 12 21 	lds	r19, 0x2112
     592:	c5 2f       	mov	r28, r21
     594:	d0 e0       	ldi	r29, 0x00	; 0
     596:	fe 01       	movw	r30, r28
     598:	ee 0f       	add	r30, r30
     59a:	ff 1f       	adc	r31, r31
     59c:	ec 5e       	subi	r30, 0xEC	; 236
     59e:	fe 4d       	sbci	r31, 0xDE	; 222
	port = 0;
#endif

	flags = cpu_irq_save();
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
	if (udi_cdc_rx_trans_ongoing[port] ||
     5a0:	80 81       	ld	r24, Z
     5a2:	91 81       	ldd	r25, Z+1	; 0x01
     5a4:	28 17       	cp	r18, r24
     5a6:	39 07       	cpc	r19, r25
     5a8:	18 f4       	brcc	.+6      	; 0x5b0 <udi_cdc_rx_start+0x3e>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     5aa:	4f bf       	out	0x3f, r20	; 63
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
		// Transfer already on-going or current buffer no empty
		cpu_irq_restore(flags);
		return false;
     5ac:	80 e0       	ldi	r24, 0x00	; 0
     5ae:	23 c0       	rjmp	.+70     	; 0x5f6 <udi_cdc_rx_start+0x84>
	}

	// Change current buffer
	udi_cdc_rx_pos[port] = 0;
     5b0:	10 92 11 21 	sts	0x2111, r1
     5b4:	10 92 12 21 	sts	0x2112, r1
	udi_cdc_rx_buf_sel[port] = (buf_sel_trans==0)?1:0;
     5b8:	81 e0       	ldi	r24, 0x01	; 1
     5ba:	51 11       	cpse	r21, r1
     5bc:	80 e0       	ldi	r24, 0x00	; 0
     5be:	80 93 13 21 	sts	0x2113, r24

	// Start transfer on RX
	udi_cdc_rx_trans_ongoing[port] = true;
     5c2:	81 e0       	ldi	r24, 0x01	; 1
     5c4:	80 93 10 21 	sts	0x2110, r24
     5c8:	4f bf       	out	0x3f, r20	; 63
	cpu_irq_restore(flags);

	if (udi_cdc_multi_is_rx_ready(port)) {
     5ca:	80 e0       	ldi	r24, 0x00	; 0
     5cc:	cb df       	rcall	.-106    	; 0x564 <udi_cdc_multi_is_rx_ready>
		ep = UDI_CDC_DATA_EP_OUT_0;
		break;
	}
	return udd_ep_run(ep,
			true,
			udi_cdc_rx_buf[port][buf_sel_trans],
     5ce:	ae 01       	movw	r20, r28
     5d0:	00 24       	eor	r0, r0
     5d2:	56 95       	lsr	r21
     5d4:	47 95       	ror	r20
     5d6:	07 94       	ror	r0
     5d8:	56 95       	lsr	r21
     5da:	47 95       	ror	r20
     5dc:	07 94       	ror	r0
     5de:	54 2f       	mov	r21, r20
     5e0:	40 2d       	mov	r20, r0
     5e2:	48 5e       	subi	r20, 0xE8	; 232
     5e4:	5e 4d       	sbci	r21, 0xDE	; 222
#undef UDI_CDC_PORT_TO_DATA_EP_OUT
	default:
		ep = UDI_CDC_DATA_EP_OUT_0;
		break;
	}
	return udd_ep_run(ep,
     5e6:	02 e3       	ldi	r16, 0x32	; 50
     5e8:	13 e0       	ldi	r17, 0x03	; 3
     5ea:	20 e4       	ldi	r18, 0x40	; 64
     5ec:	30 e0       	ldi	r19, 0x00	; 0
     5ee:	61 e0       	ldi	r22, 0x01	; 1
     5f0:	82 e0       	ldi	r24, 0x02	; 2
     5f2:	0e 94 3a 13 	call	0x2674	; 0x2674 <udd_ep_run>
			true,
			udi_cdc_rx_buf[port][buf_sel_trans],
			UDI_CDC_RX_BUFFERS,
			udi_cdc_data_received);
}
     5f6:	df 91       	pop	r29
     5f8:	cf 91       	pop	r28
     5fa:	1f 91       	pop	r17
     5fc:	0f 91       	pop	r16
     5fe:	08 95       	ret

00000600 <udi_cdc_data_enable>:
{
	uint8_t port;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
	udi_cdc_nb_data_enabled = 0;
     600:	10 92 99 21 	sts	0x2199, r1
	}
	port = udi_cdc_nb_data_enabled;
#endif

	// Initialize TX management
	udi_cdc_tx_trans_ongoing[port] = false;
     604:	10 92 87 20 	sts	0x2087, r1
	udi_cdc_tx_both_buf_to_send[port] = false;
     608:	10 92 86 20 	sts	0x2086, r1
	udi_cdc_tx_buf_sel[port] = 0;
     60c:	10 92 8a 20 	sts	0x208A, r1
	udi_cdc_tx_buf_nb[port][0] = 0;
     610:	10 92 8b 20 	sts	0x208B, r1
     614:	10 92 8c 20 	sts	0x208C, r1
	udi_cdc_tx_buf_nb[port][1] = 0;
     618:	10 92 8d 20 	sts	0x208D, r1
     61c:	10 92 8e 20 	sts	0x208E, r1
	udi_cdc_tx_sof_num[port] = 0;
     620:	10 92 88 20 	sts	0x2088, r1
     624:	10 92 89 20 	sts	0x2089, r1
	udi_cdc_tx_send(port);
     628:	80 e0       	ldi	r24, 0x00	; 0
     62a:	b7 de       	rcall	.-658    	; 0x39a <udi_cdc_tx_send>

	// Initialize RX management
	udi_cdc_rx_trans_ongoing[port] = false;
     62c:	10 92 10 21 	sts	0x2110, r1
	udi_cdc_rx_buf_sel[port] = 0;
     630:	10 92 13 21 	sts	0x2113, r1
	udi_cdc_rx_buf_nb[port][0] = 0;
     634:	10 92 14 21 	sts	0x2114, r1
     638:	10 92 15 21 	sts	0x2115, r1
	udi_cdc_rx_pos[port] = 0;
     63c:	10 92 11 21 	sts	0x2111, r1
     640:	10 92 12 21 	sts	0x2112, r1
	if (!udi_cdc_rx_start(port)) {
     644:	80 e0       	ldi	r24, 0x00	; 0
     646:	95 df       	rcall	.-214    	; 0x572 <udi_cdc_rx_start>
     648:	88 23       	and	r24, r24
     64a:	59 f0       	breq	.+22     	; 0x662 <udi_cdc_data_enable+0x62>
		return false;
	}
	udi_cdc_nb_data_enabled++;
     64c:	90 91 99 21 	lds	r25, 0x2199
     650:	9f 5f       	subi	r25, 0xFF	; 255
     652:	90 93 99 21 	sts	0x2199, r25
	if (udi_cdc_nb_data_enabled == UDI_CDC_PORT_NB) {
     656:	90 91 99 21 	lds	r25, 0x2199
     65a:	91 30       	cpi	r25, 0x01	; 1
     65c:	11 f4       	brne	.+4      	; 0x662 <udi_cdc_data_enable+0x62>
		udi_cdc_data_running = true;
     65e:	90 93 98 21 	sts	0x2198, r25
	}
	return true;
}
     662:	08 95       	ret

00000664 <udi_cdc_data_received>:
			udi_cdc_data_received);
}


static void udi_cdc_data_received(udd_ep_status_t status, iram_size_t n, udd_ep_id_t ep)
{
     664:	0f 93       	push	r16
     666:	1f 93       	push	r17
     668:	94 2f       	mov	r25, r20
	default:
		port = 0;
		break;
	}

	if (UDD_EP_TRANSFER_OK != status) {
     66a:	81 11       	cpse	r24, r1
     66c:	29 c0       	rjmp	.+82     	; 0x6c0 <udi_cdc_data_received+0x5c>
		// Abort reception
		return;
	}
	buf_sel_trans = (udi_cdc_rx_buf_sel[port]==0)?1:0;
     66e:	80 91 13 21 	lds	r24, 0x2113
     672:	e1 e0       	ldi	r30, 0x01	; 1
     674:	81 11       	cpse	r24, r1
     676:	e0 e0       	ldi	r30, 0x00	; 0
	if (!n) {
     678:	61 15       	cp	r22, r1
     67a:	71 05       	cpc	r23, r1
     67c:	b1 f4       	brne	.+44     	; 0x6aa <udi_cdc_data_received+0x46>
		udd_ep_run( ep,
				true,
				udi_cdc_rx_buf[port][buf_sel_trans],
     67e:	f0 e0       	ldi	r31, 0x00	; 0
     680:	00 24       	eor	r0, r0
     682:	f6 95       	lsr	r31
     684:	e7 95       	ror	r30
     686:	07 94       	ror	r0
     688:	f6 95       	lsr	r31
     68a:	e7 95       	ror	r30
     68c:	07 94       	ror	r0
     68e:	fe 2f       	mov	r31, r30
     690:	e0 2d       	mov	r30, r0
     692:	af 01       	movw	r20, r30
     694:	48 5e       	subi	r20, 0xE8	; 232
     696:	5e 4d       	sbci	r21, 0xDE	; 222
		// Abort reception
		return;
	}
	buf_sel_trans = (udi_cdc_rx_buf_sel[port]==0)?1:0;
	if (!n) {
		udd_ep_run( ep,
     698:	02 e3       	ldi	r16, 0x32	; 50
     69a:	13 e0       	ldi	r17, 0x03	; 3
     69c:	20 e4       	ldi	r18, 0x40	; 64
     69e:	30 e0       	ldi	r19, 0x00	; 0
     6a0:	61 e0       	ldi	r22, 0x01	; 1
     6a2:	89 2f       	mov	r24, r25
     6a4:	0e 94 3a 13 	call	0x2674	; 0x2674 <udd_ep_run>
				true,
				udi_cdc_rx_buf[port][buf_sel_trans],
				UDI_CDC_RX_BUFFERS,
				udi_cdc_data_received);
		return;
     6a8:	0b c0       	rjmp	.+22     	; 0x6c0 <udi_cdc_data_received+0x5c>
	}
	udi_cdc_rx_buf_nb[port][buf_sel_trans] = n;
     6aa:	f0 e0       	ldi	r31, 0x00	; 0
     6ac:	ee 0f       	add	r30, r30
     6ae:	ff 1f       	adc	r31, r31
     6b0:	ec 5e       	subi	r30, 0xEC	; 236
     6b2:	fe 4d       	sbci	r31, 0xDE	; 222
     6b4:	60 83       	st	Z, r22
     6b6:	71 83       	std	Z+1, r23	; 0x01
	udi_cdc_rx_trans_ongoing[port] = false;
     6b8:	10 92 10 21 	sts	0x2110, r1
	udi_cdc_rx_start(port);
     6bc:	80 e0       	ldi	r24, 0x00	; 0
     6be:	59 df       	rcall	.-334    	; 0x572 <udi_cdc_rx_start>
}
     6c0:	1f 91       	pop	r17
     6c2:	0f 91       	pop	r16
     6c4:	08 95       	ret

000006c6 <udc_next_desc_in_iface>:
/*! \brief Stop the USB Device stack
 */
void udc_stop(void)
{
	udd_disable();
	udc_reset();
     6c6:	e0 91 b4 21 	lds	r30, 0x21B4
     6ca:	f0 91 b5 21 	lds	r31, 0x21B5
     6ce:	01 90       	ld	r0, Z+
     6d0:	f0 81       	ld	r31, Z
     6d2:	e0 2d       	mov	r30, r0
     6d4:	22 81       	ldd	r18, Z+2	; 0x02
     6d6:	33 81       	ldd	r19, Z+3	; 0x03
     6d8:	2e 0f       	add	r18, r30
     6da:	3f 1f       	adc	r19, r31
     6dc:	fc 01       	movw	r30, r24
     6de:	40 81       	ld	r20, Z
     6e0:	e4 0f       	add	r30, r20
     6e2:	f1 1d       	adc	r31, r1
     6e4:	e2 17       	cp	r30, r18
     6e6:	f3 07       	cpc	r31, r19
     6e8:	a0 f4       	brcc	.+40     	; 0x712 <udc_next_desc_in_iface+0x4c>
     6ea:	81 81       	ldd	r24, Z+1	; 0x01
     6ec:	84 30       	cpi	r24, 0x04	; 4
     6ee:	a1 f0       	breq	.+40     	; 0x718 <udc_next_desc_in_iface+0x52>
     6f0:	86 13       	cpse	r24, r22
     6f2:	06 c0       	rjmp	.+12     	; 0x700 <udc_next_desc_in_iface+0x3a>
     6f4:	14 c0       	rjmp	.+40     	; 0x71e <udc_next_desc_in_iface+0x58>
     6f6:	81 81       	ldd	r24, Z+1	; 0x01
     6f8:	84 30       	cpi	r24, 0x04	; 4
     6fa:	a1 f0       	breq	.+40     	; 0x724 <udc_next_desc_in_iface+0x5e>
     6fc:	86 17       	cp	r24, r22
     6fe:	a9 f0       	breq	.+42     	; 0x72a <udc_next_desc_in_iface+0x64>
     700:	80 81       	ld	r24, Z
     702:	e8 0f       	add	r30, r24
     704:	f1 1d       	adc	r31, r1
     706:	e2 17       	cp	r30, r18
     708:	f3 07       	cpc	r31, r19
     70a:	a8 f3       	brcs	.-22     	; 0x6f6 <udc_next_desc_in_iface+0x30>
     70c:	80 e0       	ldi	r24, 0x00	; 0
     70e:	90 e0       	ldi	r25, 0x00	; 0
     710:	08 95       	ret
     712:	80 e0       	ldi	r24, 0x00	; 0
     714:	90 e0       	ldi	r25, 0x00	; 0
     716:	08 95       	ret
     718:	80 e0       	ldi	r24, 0x00	; 0
     71a:	90 e0       	ldi	r25, 0x00	; 0
     71c:	08 95       	ret
     71e:	8e 2f       	mov	r24, r30
     720:	9f 2f       	mov	r25, r31
     722:	08 95       	ret
     724:	80 e0       	ldi	r24, 0x00	; 0
     726:	90 e0       	ldi	r25, 0x00	; 0
     728:	08 95       	ret
     72a:	8e 2f       	mov	r24, r30
     72c:	9f 2f       	mov	r25, r31
     72e:	08 95       	ret

00000730 <udc_valid_address>:
     730:	80 91 34 23 	lds	r24, 0x2334
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	0c 94 7d 12 	jmp	0x24fa	; 0x24fa <udd_set_address>
     73a:	08 95       	ret

0000073c <udc_update_iface_desc>:
     73c:	90 91 b6 21 	lds	r25, 0x21B6
     740:	99 23       	and	r25, r25
     742:	81 f1       	breq	.+96     	; 0x7a4 <udc_update_iface_desc+0x68>
     744:	e0 91 b4 21 	lds	r30, 0x21B4
     748:	f0 91 b5 21 	lds	r31, 0x21B5
     74c:	01 90       	ld	r0, Z+
     74e:	f0 81       	ld	r31, Z
     750:	e0 2d       	mov	r30, r0
     752:	94 81       	ldd	r25, Z+4	; 0x04
     754:	89 17       	cp	r24, r25
     756:	40 f5       	brcc	.+80     	; 0x7a8 <udc_update_iface_desc+0x6c>
     758:	e0 93 b2 21 	sts	0x21B2, r30
     75c:	f0 93 b3 21 	sts	0x21B3, r31
     760:	22 81       	ldd	r18, Z+2	; 0x02
     762:	33 81       	ldd	r19, Z+3	; 0x03
     764:	2e 0f       	add	r18, r30
     766:	3f 1f       	adc	r19, r31
     768:	e2 17       	cp	r30, r18
     76a:	f3 07       	cpc	r31, r19
     76c:	f8 f4       	brcc	.+62     	; 0x7ac <udc_update_iface_desc+0x70>
     76e:	91 81       	ldd	r25, Z+1	; 0x01
     770:	94 30       	cpi	r25, 0x04	; 4
     772:	61 f4       	brne	.+24     	; 0x78c <udc_update_iface_desc+0x50>
     774:	92 81       	ldd	r25, Z+2	; 0x02
     776:	98 13       	cpse	r25, r24
     778:	09 c0       	rjmp	.+18     	; 0x78c <udc_update_iface_desc+0x50>
     77a:	93 81       	ldd	r25, Z+3	; 0x03
     77c:	96 13       	cpse	r25, r22
     77e:	06 c0       	rjmp	.+12     	; 0x78c <udc_update_iface_desc+0x50>
     780:	e0 93 b2 21 	sts	0x21B2, r30
     784:	f0 93 b3 21 	sts	0x21B3, r31
     788:	81 e0       	ldi	r24, 0x01	; 1
     78a:	08 95       	ret
     78c:	90 81       	ld	r25, Z
     78e:	e9 0f       	add	r30, r25
     790:	f1 1d       	adc	r31, r1
     792:	e2 17       	cp	r30, r18
     794:	f3 07       	cpc	r31, r19
     796:	58 f3       	brcs	.-42     	; 0x76e <udc_update_iface_desc+0x32>
     798:	e0 93 b2 21 	sts	0x21B2, r30
     79c:	f0 93 b3 21 	sts	0x21B3, r31
     7a0:	80 e0       	ldi	r24, 0x00	; 0
     7a2:	08 95       	ret
     7a4:	80 e0       	ldi	r24, 0x00	; 0
     7a6:	08 95       	ret
     7a8:	80 e0       	ldi	r24, 0x00	; 0
     7aa:	08 95       	ret
     7ac:	80 e0       	ldi	r24, 0x00	; 0
     7ae:	08 95       	ret

000007b0 <udc_iface_disable>:
     7b0:	ff 92       	push	r15
     7b2:	0f 93       	push	r16
     7b4:	1f 93       	push	r17
     7b6:	cf 93       	push	r28
     7b8:	df 93       	push	r29
     7ba:	c8 2f       	mov	r28, r24
     7bc:	60 e0       	ldi	r22, 0x00	; 0
     7be:	be df       	rcall	.-132    	; 0x73c <udc_update_iface_desc>
     7c0:	f8 2e       	mov	r15, r24
     7c2:	88 23       	and	r24, r24
     7c4:	81 f1       	breq	.+96     	; 0x826 <udc_iface_disable+0x76>
     7c6:	a0 91 b4 21 	lds	r26, 0x21B4
     7ca:	b0 91 b5 21 	lds	r27, 0x21B5
     7ce:	ec 2f       	mov	r30, r28
     7d0:	f0 e0       	ldi	r31, 0x00	; 0
     7d2:	ee 0f       	add	r30, r30
     7d4:	ff 1f       	adc	r31, r31
     7d6:	12 96       	adiw	r26, 0x02	; 2
     7d8:	2d 91       	ld	r18, X+
     7da:	3c 91       	ld	r19, X
     7dc:	13 97       	sbiw	r26, 0x03	; 3
     7de:	e2 0f       	add	r30, r18
     7e0:	f3 1f       	adc	r31, r19
     7e2:	00 81       	ld	r16, Z
     7e4:	11 81       	ldd	r17, Z+1	; 0x01
     7e6:	d8 01       	movw	r26, r16
     7e8:	16 96       	adiw	r26, 0x06	; 6
     7ea:	ed 91       	ld	r30, X+
     7ec:	fc 91       	ld	r31, X
     7ee:	17 97       	sbiw	r26, 0x07	; 7
     7f0:	19 95       	eicall
     7f2:	68 2f       	mov	r22, r24
     7f4:	8c 2f       	mov	r24, r28
     7f6:	a2 df       	rcall	.-188    	; 0x73c <udc_update_iface_desc>
     7f8:	f8 2e       	mov	r15, r24
     7fa:	88 23       	and	r24, r24
     7fc:	a1 f0       	breq	.+40     	; 0x826 <udc_iface_disable+0x76>
     7fe:	c0 91 b2 21 	lds	r28, 0x21B2
     802:	d0 91 b3 21 	lds	r29, 0x21B3
     806:	65 e0       	ldi	r22, 0x05	; 5
     808:	ce 01       	movw	r24, r28
     80a:	5d df       	rcall	.-326    	; 0x6c6 <udc_next_desc_in_iface>
     80c:	ec 01       	movw	r28, r24
     80e:	00 97       	sbiw	r24, 0x00	; 0
     810:	21 f0       	breq	.+8      	; 0x81a <udc_iface_disable+0x6a>
     812:	8a 81       	ldd	r24, Y+2	; 0x02
     814:	0e 94 fb 13 	call	0x27f6	; 0x27f6 <udd_ep_free>
     818:	f6 cf       	rjmp	.-20     	; 0x806 <udc_iface_disable+0x56>
     81a:	d8 01       	movw	r26, r16
     81c:	12 96       	adiw	r26, 0x02	; 2
     81e:	ed 91       	ld	r30, X+
     820:	fc 91       	ld	r31, X
     822:	13 97       	sbiw	r26, 0x03	; 3
     824:	19 95       	eicall
     826:	8f 2d       	mov	r24, r15
     828:	df 91       	pop	r29
     82a:	cf 91       	pop	r28
     82c:	1f 91       	pop	r17
     82e:	0f 91       	pop	r16
     830:	ff 90       	pop	r15
     832:	08 95       	ret

00000834 <udc_iface_enable>:
     834:	1f 93       	push	r17
     836:	cf 93       	push	r28
     838:	df 93       	push	r29
     83a:	18 2f       	mov	r17, r24
     83c:	7f df       	rcall	.-258    	; 0x73c <udc_update_iface_desc>
     83e:	88 23       	and	r24, r24
     840:	41 f1       	breq	.+80     	; 0x892 <udc_iface_enable+0x5e>
     842:	c0 91 b2 21 	lds	r28, 0x21B2
     846:	d0 91 b3 21 	lds	r29, 0x21B3
     84a:	65 e0       	ldi	r22, 0x05	; 5
     84c:	ce 01       	movw	r24, r28
     84e:	3b df       	rcall	.-394    	; 0x6c6 <udc_next_desc_in_iface>
     850:	ec 01       	movw	r28, r24
     852:	00 97       	sbiw	r24, 0x00	; 0
     854:	49 f0       	breq	.+18     	; 0x868 <udc_iface_enable+0x34>
     856:	4c 81       	ldd	r20, Y+4	; 0x04
     858:	5d 81       	ldd	r21, Y+5	; 0x05
     85a:	6b 81       	ldd	r22, Y+3	; 0x03
     85c:	8a 81       	ldd	r24, Y+2	; 0x02
     85e:	0e 94 94 12 	call	0x2528	; 0x2528 <udd_ep_alloc>
     862:	81 11       	cpse	r24, r1
     864:	f2 cf       	rjmp	.-28     	; 0x84a <udc_iface_enable+0x16>
     866:	15 c0       	rjmp	.+42     	; 0x892 <udc_iface_enable+0x5e>
     868:	a0 91 b4 21 	lds	r26, 0x21B4
     86c:	b0 91 b5 21 	lds	r27, 0x21B5
     870:	81 2f       	mov	r24, r17
     872:	90 e0       	ldi	r25, 0x00	; 0
     874:	88 0f       	add	r24, r24
     876:	99 1f       	adc	r25, r25
     878:	12 96       	adiw	r26, 0x02	; 2
     87a:	ed 91       	ld	r30, X+
     87c:	fc 91       	ld	r31, X
     87e:	13 97       	sbiw	r26, 0x03	; 3
     880:	e8 0f       	add	r30, r24
     882:	f9 1f       	adc	r31, r25
     884:	01 90       	ld	r0, Z+
     886:	f0 81       	ld	r31, Z
     888:	e0 2d       	mov	r30, r0
     88a:	01 90       	ld	r0, Z+
     88c:	f0 81       	ld	r31, Z
     88e:	e0 2d       	mov	r30, r0
     890:	19 95       	eicall
     892:	df 91       	pop	r29
     894:	cf 91       	pop	r28
     896:	1f 91       	pop	r17
     898:	08 95       	ret

0000089a <udc_start>:
     89a:	0c 94 07 12 	jmp	0x240e	; 0x240e <udd_enable>
     89e:	08 95       	ret

000008a0 <udc_reset>:
     8a0:	cf 93       	push	r28
     8a2:	80 91 b6 21 	lds	r24, 0x21B6
     8a6:	88 23       	and	r24, r24
     8a8:	c1 f0       	breq	.+48     	; 0x8da <udc_reset+0x3a>
     8aa:	e0 91 b4 21 	lds	r30, 0x21B4
     8ae:	f0 91 b5 21 	lds	r31, 0x21B5
     8b2:	01 90       	ld	r0, Z+
     8b4:	f0 81       	ld	r31, Z
     8b6:	e0 2d       	mov	r30, r0
     8b8:	84 81       	ldd	r24, Z+4	; 0x04
     8ba:	88 23       	and	r24, r24
     8bc:	71 f0       	breq	.+28     	; 0x8da <udc_reset+0x3a>
     8be:	c0 e0       	ldi	r28, 0x00	; 0
     8c0:	8c 2f       	mov	r24, r28
     8c2:	76 df       	rcall	.-276    	; 0x7b0 <udc_iface_disable>
     8c4:	cf 5f       	subi	r28, 0xFF	; 255
     8c6:	e0 91 b4 21 	lds	r30, 0x21B4
     8ca:	f0 91 b5 21 	lds	r31, 0x21B5
     8ce:	01 90       	ld	r0, Z+
     8d0:	f0 81       	ld	r31, Z
     8d2:	e0 2d       	mov	r30, r0
     8d4:	84 81       	ldd	r24, Z+4	; 0x04
     8d6:	c8 17       	cp	r28, r24
     8d8:	98 f3       	brcs	.-26     	; 0x8c0 <udc_reset+0x20>
     8da:	10 92 b6 21 	sts	0x21B6, r1
     8de:	81 e0       	ldi	r24, 0x01	; 1
     8e0:	90 e0       	ldi	r25, 0x00	; 0
     8e2:	80 93 ba 21 	sts	0x21BA, r24
     8e6:	90 93 bb 21 	sts	0x21BB, r25
     8ea:	cf 91       	pop	r28
     8ec:	08 95       	ret

000008ee <udc_sof_notify>:
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}

void udc_sof_notify(void)
{
     8ee:	cf 93       	push	r28
	uint8_t iface_num;

	if (udc_num_configuration) {
     8f0:	80 91 b6 21 	lds	r24, 0x21B6
     8f4:	88 23       	and	r24, r24
     8f6:	41 f1       	breq	.+80     	; 0x948 <udc_sof_notify+0x5a>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     8f8:	e0 91 b4 21 	lds	r30, 0x21B4
     8fc:	f0 91 b5 21 	lds	r31, 0x21B5
     900:	a0 81       	ld	r26, Z
     902:	b1 81       	ldd	r27, Z+1	; 0x01
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
     904:	14 96       	adiw	r26, 0x04	; 4
     906:	8c 91       	ld	r24, X
     908:	88 23       	and	r24, r24
     90a:	f1 f0       	breq	.+60     	; 0x948 <udc_sof_notify+0x5a>
     90c:	c0 e0       	ldi	r28, 0x00	; 0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
     90e:	8c 2f       	mov	r24, r28
     910:	90 e0       	ldi	r25, 0x00	; 0
     912:	88 0f       	add	r24, r24
     914:	99 1f       	adc	r25, r25
     916:	02 80       	ldd	r0, Z+2	; 0x02
     918:	f3 81       	ldd	r31, Z+3	; 0x03
     91a:	e0 2d       	mov	r30, r0
     91c:	e8 0f       	add	r30, r24
     91e:	f9 1f       	adc	r31, r25
     920:	01 90       	ld	r0, Z+
     922:	f0 81       	ld	r31, Z
     924:	e0 2d       	mov	r30, r0
     926:	00 84       	ldd	r0, Z+8	; 0x08
     928:	f1 85       	ldd	r31, Z+9	; 0x09
     92a:	e0 2d       	mov	r30, r0
     92c:	30 97       	sbiw	r30, 0x00	; 0
     92e:	09 f0       	breq	.+2      	; 0x932 <udc_sof_notify+0x44>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
     930:	19 95       	eicall
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
     932:	cf 5f       	subi	r28, 0xFF	; 255
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     934:	e0 91 b4 21 	lds	r30, 0x21B4
     938:	f0 91 b5 21 	lds	r31, 0x21B5
     93c:	a0 81       	ld	r26, Z
     93e:	b1 81       	ldd	r27, Z+1	; 0x01
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
     940:	14 96       	adiw	r26, 0x04	; 4
     942:	8c 91       	ld	r24, X
     944:	c8 17       	cp	r28, r24
     946:	18 f3       	brcs	.-58     	; 0x90e <udc_sof_notify+0x20>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
			}
		}
	}
}
     948:	cf 91       	pop	r28
     94a:	08 95       	ret

0000094c <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
     94c:	ef 92       	push	r14
     94e:	ff 92       	push	r15
     950:	0f 93       	push	r16
     952:	1f 93       	push	r17
     954:	cf 93       	push	r28
     956:	df 93       	push	r29
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
     958:	10 92 3c 23 	sts	0x233C, r1
     95c:	10 92 3d 23 	sts	0x233D, r1
	udd_g_ctrlreq.callback = NULL;
     960:	10 92 3e 23 	sts	0x233E, r1
     964:	10 92 3f 23 	sts	0x233F, r1
	udd_g_ctrlreq.over_under_run = NULL;
     968:	10 92 40 23 	sts	0x2340, r1
     96c:	10 92 41 23 	sts	0x2341, r1

	if (Udd_setup_is_in()) {
     970:	20 91 32 23 	lds	r18, 0x2332
     974:	22 23       	and	r18, r18
     976:	0c f0       	brlt	.+2      	; 0x97a <udc_process_setup+0x2e>
     978:	72 c2       	rjmp	.+1252   	; 0xe5e <udc_process_setup+0x512>
		if (udd_g_ctrlreq.req.wLength == 0) {
     97a:	80 91 38 23 	lds	r24, 0x2338
     97e:	90 91 39 23 	lds	r25, 0x2339
     982:	00 97       	sbiw	r24, 0x00	; 0
     984:	09 f0       	breq	.+2      	; 0x988 <udc_process_setup+0x3c>
     986:	70 c2       	rjmp	.+1248   	; 0xe68 <udc_process_setup+0x51c>
     988:	66 c2       	rjmp	.+1228   	; 0xe56 <udc_process_setup+0x50a>
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error for USB host
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
     98a:	2f 71       	andi	r18, 0x1F	; 31
     98c:	09 f0       	breq	.+2      	; 0x990 <udc_process_setup+0x44>
     98e:	91 c0       	rjmp	.+290    	; 0xab2 <udc_process_setup+0x166>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
     990:	30 91 33 23 	lds	r19, 0x2333
     994:	36 30       	cpi	r19, 0x06	; 6
     996:	89 f0       	breq	.+34     	; 0x9ba <udc_process_setup+0x6e>
     998:	38 30       	cpi	r19, 0x08	; 8
     99a:	09 f4       	brne	.+2      	; 0x99e <udc_process_setup+0x52>
     99c:	7e c0       	rjmp	.+252    	; 0xa9a <udc_process_setup+0x14e>
     99e:	31 11       	cpse	r19, r1
     9a0:	88 c0       	rjmp	.+272    	; 0xab2 <udc_process_setup+0x166>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
     9a2:	02 97       	sbiw	r24, 0x02	; 2
     9a4:	41 f4       	brne	.+16     	; 0x9b6 <udc_process_setup+0x6a>
		return false;
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
     9a6:	62 e0       	ldi	r22, 0x02	; 2
     9a8:	70 e0       	ldi	r23, 0x00	; 0
     9aa:	8a eb       	ldi	r24, 0xBA	; 186
     9ac:	91 e2       	ldi	r25, 0x21	; 33
     9ae:	0e 94 8b 12 	call	0x2516	; 0x2516 <udd_set_setup_payload>
			sizeof(udc_device_status));
	return true;
     9b2:	01 e0       	ldi	r16, 0x01	; 1
     9b4:	d3 c1       	rjmp	.+934    	; 0xd5c <udc_process_setup+0x410>
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
		return false;
     9b6:	00 e0       	ldi	r16, 0x00	; 0
     9b8:	d1 c1       	rjmp	.+930    	; 0xd5c <udc_process_setup+0x410>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
     9ba:	20 91 34 23 	lds	r18, 0x2334
     9be:	30 91 35 23 	lds	r19, 0x2335

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
     9c2:	83 2f       	mov	r24, r19
     9c4:	99 27       	eor	r25, r25
     9c6:	82 30       	cpi	r24, 0x02	; 2
     9c8:	91 05       	cpc	r25, r1
     9ca:	a1 f0       	breq	.+40     	; 0x9f4 <udc_process_setup+0xa8>
     9cc:	1c f4       	brge	.+6      	; 0x9d4 <udc_process_setup+0x88>
     9ce:	01 97       	sbiw	r24, 0x01	; 1
     9d0:	39 f0       	breq	.+14     	; 0x9e0 <udc_process_setup+0x94>
     9d2:	59 c0       	rjmp	.+178    	; 0xa86 <udc_process_setup+0x13a>
     9d4:	83 30       	cpi	r24, 0x03	; 3
     9d6:	91 05       	cpc	r25, r1
     9d8:	e9 f1       	breq	.+122    	; 0xa54 <udc_process_setup+0x108>
     9da:	0f 97       	sbiw	r24, 0x0f	; 15
     9dc:	69 f1       	breq	.+90     	; 0xa38 <udc_process_setup+0xec>
     9de:	53 c0       	rjmp	.+166    	; 0xa86 <udc_process_setup+0x13a>
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
     9e0:	80 91 18 20 	lds	r24, 0x2018
     9e4:	90 91 19 20 	lds	r25, 0x2019
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
     9e8:	dc 01       	movw	r26, r24
     9ea:	6c 91       	ld	r22, X
     9ec:	70 e0       	ldi	r23, 0x00	; 0
     9ee:	0e 94 8b 12 	call	0x2516	; 0x2516 <udd_set_setup_payload>
     9f2:	38 c0       	rjmp	.+112    	; 0xa64 <udc_process_setup+0x118>
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
     9f4:	e0 91 18 20 	lds	r30, 0x2018
     9f8:	f0 91 19 20 	lds	r31, 0x2019
     9fc:	81 89       	ldd	r24, Z+17	; 0x11
     9fe:	28 17       	cp	r18, r24
     a00:	08 f0       	brcs	.+2      	; 0xa04 <udc_process_setup+0xb8>
     a02:	43 c0       	rjmp	.+134    	; 0xa8a <udc_process_setup+0x13e>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
     a04:	c9 01       	movw	r24, r18
     a06:	99 27       	eor	r25, r25
     a08:	88 0f       	add	r24, r24
     a0a:	99 1f       	adc	r25, r25
     a0c:	88 0f       	add	r24, r24
     a0e:	99 1f       	adc	r25, r25
     a10:	e0 91 1a 20 	lds	r30, 0x201A
     a14:	f0 91 1b 20 	lds	r31, 0x201B
     a18:	e8 0f       	add	r30, r24
     a1a:	f9 1f       	adc	r31, r25
     a1c:	80 81       	ld	r24, Z
     a1e:	91 81       	ldd	r25, Z+1	; 0x01
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
     a20:	fc 01       	movw	r30, r24
     a22:	62 81       	ldd	r22, Z+2	; 0x02
     a24:	73 81       	ldd	r23, Z+3	; 0x03
     a26:	0e 94 8b 12 	call	0x2516	; 0x2516 <udd_set_setup_payload>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
     a2a:	e0 91 3a 23 	lds	r30, 0x233A
     a2e:	f0 91 3b 23 	lds	r31, 0x233B
     a32:	82 e0       	ldi	r24, 0x02	; 2
     a34:	81 83       	std	Z+1, r24	; 0x01
     a36:	16 c0       	rjmp	.+44     	; 0xa64 <udc_process_setup+0x118>
		break;
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
     a38:	80 91 1c 20 	lds	r24, 0x201C
     a3c:	90 91 1d 20 	lds	r25, 0x201D
     a40:	00 97       	sbiw	r24, 0x00	; 0
     a42:	29 f1       	breq	.+74     	; 0xa8e <udc_process_setup+0x142>
			return false;
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
     a44:	dc 01       	movw	r26, r24
     a46:	12 96       	adiw	r26, 0x02	; 2
     a48:	6d 91       	ld	r22, X+
     a4a:	7c 91       	ld	r23, X
     a4c:	13 97       	sbiw	r26, 0x03	; 3
     a4e:	0e 94 8b 12 	call	0x2516	; 0x2516 <udd_set_setup_payload>
     a52:	08 c0       	rjmp	.+16     	; 0xa64 <udc_process_setup+0x118>
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
     a54:	21 11       	cpse	r18, r1
     a56:	1d c0       	rjmp	.+58     	; 0xa92 <udc_process_setup+0x146>
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
     a58:	64 e0       	ldi	r22, 0x04	; 4
     a5a:	70 e0       	ldi	r23, 0x00	; 0
     a5c:	84 e1       	ldi	r24, 0x14	; 20
     a5e:	90 e2       	ldi	r25, 0x20	; 32
     a60:	0e 94 8b 12 	call	0x2516	; 0x2516 <udd_set_setup_payload>
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
     a64:	80 91 38 23 	lds	r24, 0x2338
     a68:	90 91 39 23 	lds	r25, 0x2339
     a6c:	20 91 3c 23 	lds	r18, 0x233C
     a70:	30 91 3d 23 	lds	r19, 0x233D
     a74:	82 17       	cp	r24, r18
     a76:	93 07       	cpc	r25, r19
     a78:	70 f4       	brcc	.+28     	; 0xa96 <udc_process_setup+0x14a>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
     a7a:	80 93 3c 23 	sts	0x233C, r24
     a7e:	90 93 3d 23 	sts	0x233D, r25
	}
	return true;
     a82:	01 e0       	ldi	r16, 0x01	; 1
     a84:	6b c1       	rjmp	.+726    	; 0xd5c <udc_process_setup+0x410>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
     a86:	00 e0       	ldi	r16, 0x00	; 0
     a88:	69 c1       	rjmp	.+722    	; 0xd5c <udc_process_setup+0x410>
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
     a8a:	00 e0       	ldi	r16, 0x00	; 0
     a8c:	67 c1       	rjmp	.+718    	; 0xd5c <udc_process_setup+0x410>
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
			return false;
     a8e:	00 e0       	ldi	r16, 0x00	; 0
     a90:	65 c1       	rjmp	.+714    	; 0xd5c <udc_process_setup+0x410>
		break;

	case USB_DT_STRING:
		// String descriptor requested
		if (!udc_req_std_dev_get_str_desc()) {
			return false;
     a92:	00 e0       	ldi	r16, 0x00	; 0
     a94:	63 c1       	rjmp	.+710    	; 0xd5c <udc_process_setup+0x410>
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
	}
	return true;
     a96:	01 e0       	ldi	r16, 0x01	; 1
     a98:	61 c1       	rjmp	.+706    	; 0xd5c <udc_process_setup+0x410>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
     a9a:	01 97       	sbiw	r24, 0x01	; 1
     a9c:	41 f4       	brne	.+16     	; 0xaae <udc_process_setup+0x162>
		return false;
	}

	udd_set_setup_payload(&udc_num_configuration,1);
     a9e:	61 e0       	ldi	r22, 0x01	; 1
     aa0:	70 e0       	ldi	r23, 0x00	; 0
     aa2:	86 eb       	ldi	r24, 0xB6	; 182
     aa4:	91 e2       	ldi	r25, 0x21	; 33
     aa6:	0e 94 8b 12 	call	0x2516	; 0x2516 <udd_set_setup_payload>
	return true;
     aaa:	01 e0       	ldi	r16, 0x01	; 1
     aac:	57 c1       	rjmp	.+686    	; 0xd5c <udc_process_setup+0x410>
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
		return false;
     aae:	00 e0       	ldi	r16, 0x00	; 0
     ab0:	55 c1       	rjmp	.+682    	; 0xd5c <udc_process_setup+0x410>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
     ab2:	21 30       	cpi	r18, 0x01	; 1
     ab4:	09 f0       	breq	.+2      	; 0xab8 <udc_process_setup+0x16c>
     ab6:	40 c0       	rjmp	.+128    	; 0xb38 <udc_process_setup+0x1ec>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
     ab8:	30 91 33 23 	lds	r19, 0x2333
     abc:	3a 30       	cpi	r19, 0x0A	; 10
     abe:	e1 f5       	brne	.+120    	; 0xb38 <udc_process_setup+0x1ec>
static bool udc_req_std_iface_get_setting(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
     ac0:	01 97       	sbiw	r24, 0x01	; 1
     ac2:	a1 f5       	brne	.+104    	; 0xb2c <udc_process_setup+0x1e0>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
     ac4:	80 91 b6 21 	lds	r24, 0x21B6
     ac8:	88 23       	and	r24, r24
     aca:	91 f1       	breq	.+100    	; 0xb30 <udc_process_setup+0x1e4>
		return false; // The device is not is configured state yet
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
     acc:	c0 91 36 23 	lds	r28, 0x2336
     ad0:	d0 91 37 23 	lds	r29, 0x2337
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
     ad4:	e0 90 b4 21 	lds	r14, 0x21B4
     ad8:	f0 90 b5 21 	lds	r15, 0x21B5
     adc:	d7 01       	movw	r26, r14
     ade:	ed 91       	ld	r30, X+
     ae0:	fc 91       	ld	r31, X
     ae2:	84 81       	ldd	r24, Z+4	; 0x04
     ae4:	c8 17       	cp	r28, r24
     ae6:	30 f5       	brcc	.+76     	; 0xb34 <udc_process_setup+0x1e8>
		return false;
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
     ae8:	60 e0       	ldi	r22, 0x00	; 0
     aea:	8c 2f       	mov	r24, r28
     aec:	27 de       	rcall	.-946    	; 0x73c <udc_update_iface_desc>
     aee:	08 2f       	mov	r16, r24
     af0:	88 23       	and	r24, r24
     af2:	09 f4       	brne	.+2      	; 0xaf6 <udc_process_setup+0x1aa>
     af4:	33 c1       	rjmp	.+614    	; 0xd5c <udc_process_setup+0x410>
		return false;
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
     af6:	ce 01       	movw	r24, r28
     af8:	99 27       	eor	r25, r25
     afa:	88 0f       	add	r24, r24
     afc:	99 1f       	adc	r25, r25
     afe:	d7 01       	movw	r26, r14
     b00:	12 96       	adiw	r26, 0x02	; 2
     b02:	ed 91       	ld	r30, X+
     b04:	fc 91       	ld	r31, X
     b06:	13 97       	sbiw	r26, 0x03	; 3
     b08:	e8 0f       	add	r30, r24
     b0a:	f9 1f       	adc	r31, r25
	udc_iface_setting = udi_api->getsetting();
     b0c:	01 90       	ld	r0, Z+
     b0e:	f0 81       	ld	r31, Z
     b10:	e0 2d       	mov	r30, r0
     b12:	06 80       	ldd	r0, Z+6	; 0x06
     b14:	f7 81       	ldd	r31, Z+7	; 0x07
     b16:	e0 2d       	mov	r30, r0
     b18:	19 95       	eicall
     b1a:	80 93 b8 21 	sts	0x21B8, r24

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
     b1e:	61 e0       	ldi	r22, 0x01	; 1
     b20:	70 e0       	ldi	r23, 0x00	; 0
     b22:	88 eb       	ldi	r24, 0xB8	; 184
     b24:	91 e2       	ldi	r25, 0x21	; 33
     b26:	0e 94 8b 12 	call	0x2516	; 0x2516 <udd_set_setup_payload>
     b2a:	18 c1       	rjmp	.+560    	; 0xd5c <udc_process_setup+0x410>
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
		return false; // Error in request
     b2c:	00 e0       	ldi	r16, 0x00	; 0
     b2e:	16 c1       	rjmp	.+556    	; 0xd5c <udc_process_setup+0x410>
	}
	if (!udc_num_configuration) {
		return false; // The device is not is configured state yet
     b30:	00 e0       	ldi	r16, 0x00	; 0
     b32:	14 c1       	rjmp	.+552    	; 0xd5c <udc_process_setup+0x410>
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
		return false;
     b34:	00 e0       	ldi	r16, 0x00	; 0
     b36:	12 c1       	rjmp	.+548    	; 0xd5c <udc_process_setup+0x410>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
     b38:	22 30       	cpi	r18, 0x02	; 2
     b3a:	09 f0       	breq	.+2      	; 0xb3e <udc_process_setup+0x1f2>
     b3c:	11 c1       	rjmp	.+546    	; 0xd60 <udc_process_setup+0x414>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
     b3e:	20 91 33 23 	lds	r18, 0x2333
     b42:	21 11       	cpse	r18, r1
     b44:	06 c1       	rjmp	.+524    	; 0xd52 <udc_process_setup+0x406>
 */
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
     b46:	02 97       	sbiw	r24, 0x02	; 2
     b48:	89 f4       	brne	.+34     	; 0xb6c <udc_process_setup+0x220>
		return false;
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
     b4a:	80 91 36 23 	lds	r24, 0x2336
     b4e:	0e 94 f5 12 	call	0x25ea	; 0x25ea <udd_ep_is_halted>
     b52:	90 e0       	ldi	r25, 0x00	; 0
     b54:	80 93 b0 21 	sts	0x21B0, r24
     b58:	90 93 b1 21 	sts	0x21B1, r25
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
     b5c:	62 e0       	ldi	r22, 0x02	; 2
     b5e:	70 e0       	ldi	r23, 0x00	; 0
     b60:	80 eb       	ldi	r24, 0xB0	; 176
     b62:	91 e2       	ldi	r25, 0x21	; 33
     b64:	0e 94 8b 12 	call	0x2516	; 0x2516 <udd_set_setup_payload>
			sizeof(udc_ep_status));
	return true;
     b68:	01 e0       	ldi	r16, 0x01	; 1
     b6a:	f8 c0       	rjmp	.+496    	; 0xd5c <udc_process_setup+0x410>
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
		return false;
     b6c:	00 e0       	ldi	r16, 0x00	; 0
     b6e:	f6 c0       	rjmp	.+492    	; 0xd5c <udc_process_setup+0x410>
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
     b70:	2f 71       	andi	r18, 0x1F	; 31
     b72:	09 f0       	breq	.+2      	; 0xb76 <udc_process_setup+0x22a>
     b74:	91 c0       	rjmp	.+290    	; 0xc98 <udc_process_setup+0x34c>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
     b76:	80 91 33 23 	lds	r24, 0x2333
     b7a:	83 30       	cpi	r24, 0x03	; 3
     b7c:	09 f4       	brne	.+2      	; 0xb80 <udc_process_setup+0x234>
     b7e:	eb c0       	rjmp	.+470    	; 0xd56 <udc_process_setup+0x40a>
     b80:	18 f4       	brcc	.+6      	; 0xb88 <udc_process_setup+0x23c>
     b82:	81 30       	cpi	r24, 0x01	; 1
     b84:	b1 f0       	breq	.+44     	; 0xbb2 <udc_process_setup+0x266>
     b86:	88 c0       	rjmp	.+272    	; 0xc98 <udc_process_setup+0x34c>
     b88:	85 30       	cpi	r24, 0x05	; 5
     b8a:	19 f0       	breq	.+6      	; 0xb92 <udc_process_setup+0x246>
     b8c:	89 30       	cpi	r24, 0x09	; 9
     b8e:	61 f1       	breq	.+88     	; 0xbe8 <udc_process_setup+0x29c>
     b90:	83 c0       	rjmp	.+262    	; 0xc98 <udc_process_setup+0x34c>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
     b92:	80 91 38 23 	lds	r24, 0x2338
     b96:	90 91 39 23 	lds	r25, 0x2339
     b9a:	89 2b       	or	r24, r25
     b9c:	41 f4       	brne	.+16     	; 0xbae <udc_process_setup+0x262>
		return false;
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
     b9e:	88 e9       	ldi	r24, 0x98	; 152
     ba0:	93 e0       	ldi	r25, 0x03	; 3
     ba2:	80 93 3e 23 	sts	0x233E, r24
     ba6:	90 93 3f 23 	sts	0x233F, r25
	return true;
     baa:	01 e0       	ldi	r16, 0x01	; 1
     bac:	d7 c0       	rjmp	.+430    	; 0xd5c <udc_process_setup+0x410>
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
     bae:	00 e0       	ldi	r16, 0x00	; 0
     bb0:	d5 c0       	rjmp	.+426    	; 0xd5c <udc_process_setup+0x410>
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
     bb2:	80 91 38 23 	lds	r24, 0x2338
     bb6:	90 91 39 23 	lds	r25, 0x2339
     bba:	89 2b       	or	r24, r25
     bbc:	89 f4       	brne	.+34     	; 0xbe0 <udc_process_setup+0x294>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
     bbe:	80 91 34 23 	lds	r24, 0x2334
     bc2:	90 91 35 23 	lds	r25, 0x2335
     bc6:	01 97       	sbiw	r24, 0x01	; 1
     bc8:	69 f4       	brne	.+26     	; 0xbe4 <udc_process_setup+0x298>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
     bca:	80 91 ba 21 	lds	r24, 0x21BA
     bce:	90 91 bb 21 	lds	r25, 0x21BB
     bd2:	8d 7f       	andi	r24, 0xFD	; 253
     bd4:	80 93 ba 21 	sts	0x21BA, r24
     bd8:	90 93 bb 21 	sts	0x21BB, r25
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
#endif
		return true;
     bdc:	01 e0       	ldi	r16, 0x01	; 1
     bde:	be c0       	rjmp	.+380    	; 0xd5c <udc_process_setup+0x410>
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
     be0:	00 e0       	ldi	r16, 0x00	; 0
     be2:	bc c0       	rjmp	.+376    	; 0xd5c <udc_process_setup+0x410>
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
#endif
		return true;
	}
	return false;
     be4:	00 e0       	ldi	r16, 0x00	; 0
     be6:	ba c0       	rjmp	.+372    	; 0xd5c <udc_process_setup+0x410>
static bool udc_req_std_dev_set_configuration(void)
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
     be8:	80 91 38 23 	lds	r24, 0x2338
     bec:	90 91 39 23 	lds	r25, 0x2339
     bf0:	89 2b       	or	r24, r25
     bf2:	09 f0       	breq	.+2      	; 0xbf6 <udc_process_setup+0x2aa>
     bf4:	47 c0       	rjmp	.+142    	; 0xc84 <udc_process_setup+0x338>
		return false;
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
     bf6:	0e 94 80 12 	call	0x2500	; 0x2500 <udd_getaddress>
     bfa:	88 23       	and	r24, r24
     bfc:	09 f4       	brne	.+2      	; 0xc00 <udc_process_setup+0x2b4>
     bfe:	44 c0       	rjmp	.+136    	; 0xc88 <udc_process_setup+0x33c>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
     c00:	20 91 34 23 	lds	r18, 0x2334
     c04:	30 91 35 23 	lds	r19, 0x2335
     c08:	33 27       	eor	r19, r19
				udc_config.confdev_lsfs->bNumConfigurations) {
     c0a:	e0 91 18 20 	lds	r30, 0x2018
     c0e:	f0 91 19 20 	lds	r31, 0x2019
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
     c12:	81 89       	ldd	r24, Z+17	; 0x11
     c14:	90 e0       	ldi	r25, 0x00	; 0
     c16:	82 17       	cp	r24, r18
     c18:	93 07       	cpc	r25, r19
     c1a:	c0 f1       	brcs	.+112    	; 0xc8c <udc_process_setup+0x340>
			return false;
		}
	}

	// Reset current configuration
	udc_reset();
     c1c:	41 de       	rcall	.-894    	; 0x8a0 <udc_reset>

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
     c1e:	80 91 34 23 	lds	r24, 0x2334
     c22:	90 91 35 23 	lds	r25, 0x2335
     c26:	80 93 b6 21 	sts	0x21B6, r24
	if (udc_num_configuration == 0) {
     c2a:	88 23       	and	r24, r24
     c2c:	89 f1       	breq	.+98     	; 0xc90 <udc_process_setup+0x344>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
     c2e:	99 27       	eor	r25, r25
     c30:	81 50       	subi	r24, 0x01	; 1
     c32:	90 4c       	sbci	r25, 0xC0	; 192
     c34:	88 0f       	add	r24, r24
     c36:	99 1f       	adc	r25, r25
     c38:	88 0f       	add	r24, r24
     c3a:	99 1f       	adc	r25, r25
     c3c:	e0 91 1a 20 	lds	r30, 0x201A
     c40:	f0 91 1b 20 	lds	r31, 0x201B
     c44:	e8 0f       	add	r30, r24
     c46:	f9 1f       	adc	r31, r25
     c48:	e0 93 b4 21 	sts	0x21B4, r30
     c4c:	f0 93 b5 21 	sts	0x21B5, r31
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
     c50:	01 90       	ld	r0, Z+
     c52:	f0 81       	ld	r31, Z
     c54:	e0 2d       	mov	r30, r0
     c56:	84 81       	ldd	r24, Z+4	; 0x04
     c58:	88 23       	and	r24, r24
     c5a:	e1 f0       	breq	.+56     	; 0xc94 <udc_process_setup+0x348>
     c5c:	c0 e0       	ldi	r28, 0x00	; 0
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
     c5e:	60 e0       	ldi	r22, 0x00	; 0
     c60:	8c 2f       	mov	r24, r28
     c62:	e8 dd       	rcall	.-1072   	; 0x834 <udc_iface_enable>
     c64:	08 2f       	mov	r16, r24
     c66:	88 23       	and	r24, r24
     c68:	09 f4       	brne	.+2      	; 0xc6c <udc_process_setup+0x320>
     c6a:	78 c0       	rjmp	.+240    	; 0xd5c <udc_process_setup+0x410>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
     c6c:	cf 5f       	subi	r28, 0xFF	; 255
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
     c6e:	e0 91 b4 21 	lds	r30, 0x21B4
     c72:	f0 91 b5 21 	lds	r31, 0x21B5
     c76:	01 90       	ld	r0, Z+
     c78:	f0 81       	ld	r31, Z
     c7a:	e0 2d       	mov	r30, r0
     c7c:	84 81       	ldd	r24, Z+4	; 0x04
     c7e:	c8 17       	cp	r28, r24
     c80:	70 f3       	brcs	.-36     	; 0xc5e <udc_process_setup+0x312>
     c82:	6c c0       	rjmp	.+216    	; 0xd5c <udc_process_setup+0x410>
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
		return false;
     c84:	00 e0       	ldi	r16, 0x00	; 0
     c86:	6a c0       	rjmp	.+212    	; 0xd5c <udc_process_setup+0x410>
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
		return false;
     c88:	00 e0       	ldi	r16, 0x00	; 0
     c8a:	68 c0       	rjmp	.+208    	; 0xd5c <udc_process_setup+0x410>
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
				udc_config.confdev_lsfs->bNumConfigurations) {
			return false;
     c8c:	00 e0       	ldi	r16, 0x00	; 0
     c8e:	66 c0       	rjmp	.+204    	; 0xd5c <udc_process_setup+0x410>
	udc_reset();

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
	if (udc_num_configuration == 0) {
		return true; // Default empty configuration requested
     c90:	01 e0       	ldi	r16, 0x01	; 1
     c92:	64 c0       	rjmp	.+200    	; 0xd5c <udc_process_setup+0x410>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
			return false;
		}
	}
	return true;
     c94:	01 e0       	ldi	r16, 0x01	; 1
     c96:	62 c0       	rjmp	.+196    	; 0xd5c <udc_process_setup+0x410>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
     c98:	21 30       	cpi	r18, 0x01	; 1
     c9a:	09 f5       	brne	.+66     	; 0xcde <udc_process_setup+0x392>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
     c9c:	80 91 33 23 	lds	r24, 0x2333
     ca0:	8b 30       	cpi	r24, 0x0B	; 11
     ca2:	e9 f4       	brne	.+58     	; 0xcde <udc_process_setup+0x392>
 */
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
     ca4:	80 91 38 23 	lds	r24, 0x2338
     ca8:	90 91 39 23 	lds	r25, 0x2339
     cac:	89 2b       	or	r24, r25
     cae:	99 f4       	brne	.+38     	; 0xcd6 <udc_process_setup+0x38a>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
     cb0:	80 91 b6 21 	lds	r24, 0x21B6
     cb4:	88 23       	and	r24, r24
     cb6:	89 f0       	breq	.+34     	; 0xcda <udc_process_setup+0x38e>
		return false; // The device is not is configured state yet
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
     cb8:	c0 91 36 23 	lds	r28, 0x2336
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
     cbc:	d0 91 34 23 	lds	r29, 0x2334

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
     cc0:	8c 2f       	mov	r24, r28
     cc2:	76 dd       	rcall	.-1300   	; 0x7b0 <udc_iface_disable>
     cc4:	08 2f       	mov	r16, r24
     cc6:	88 23       	and	r24, r24
     cc8:	09 f4       	brne	.+2      	; 0xccc <udc_process_setup+0x380>
     cca:	48 c0       	rjmp	.+144    	; 0xd5c <udc_process_setup+0x410>
		return false;
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
     ccc:	6d 2f       	mov	r22, r29
     cce:	8c 2f       	mov	r24, r28
     cd0:	b1 dd       	rcall	.-1182   	; 0x834 <udc_iface_enable>
     cd2:	08 2f       	mov	r16, r24
     cd4:	43 c0       	rjmp	.+134    	; 0xd5c <udc_process_setup+0x410>
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
		return false; // Error in request
     cd6:	00 e0       	ldi	r16, 0x00	; 0
     cd8:	41 c0       	rjmp	.+130    	; 0xd5c <udc_process_setup+0x410>
	}
	if (!udc_num_configuration) {
		return false; // The device is not is configured state yet
     cda:	00 e0       	ldi	r16, 0x00	; 0
     cdc:	3f c0       	rjmp	.+126    	; 0xd5c <udc_process_setup+0x410>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
     cde:	22 30       	cpi	r18, 0x02	; 2
     ce0:	09 f0       	breq	.+2      	; 0xce4 <udc_process_setup+0x398>
     ce2:	3e c0       	rjmp	.+124    	; 0xd60 <udc_process_setup+0x414>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
     ce4:	80 91 33 23 	lds	r24, 0x2333
     ce8:	81 30       	cpi	r24, 0x01	; 1
     cea:	19 f0       	breq	.+6      	; 0xcf2 <udc_process_setup+0x3a6>
     cec:	83 30       	cpi	r24, 0x03	; 3
     cee:	b9 f0       	breq	.+46     	; 0xd1e <udc_process_setup+0x3d2>
     cf0:	34 c0       	rjmp	.+104    	; 0xd5a <udc_process_setup+0x40e>
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
     cf2:	80 91 38 23 	lds	r24, 0x2338
     cf6:	90 91 39 23 	lds	r25, 0x2339
     cfa:	89 2b       	or	r24, r25
     cfc:	61 f4       	brne	.+24     	; 0xd16 <udc_process_setup+0x3ca>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
     cfe:	80 91 34 23 	lds	r24, 0x2334
     d02:	90 91 35 23 	lds	r25, 0x2335
     d06:	89 2b       	or	r24, r25
     d08:	41 f4       	brne	.+16     	; 0xd1a <udc_process_setup+0x3ce>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
     d0a:	80 91 36 23 	lds	r24, 0x2336
     d0e:	0e 94 10 13 	call	0x2620	; 0x2620 <udd_ep_clear_halt>
     d12:	08 2f       	mov	r16, r24
     d14:	23 c0       	rjmp	.+70     	; 0xd5c <udc_process_setup+0x410>
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
     d16:	00 e0       	ldi	r16, 0x00	; 0
     d18:	21 c0       	rjmp	.+66     	; 0xd5c <udc_process_setup+0x410>
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
	}
	return false;
     d1a:	00 e0       	ldi	r16, 0x00	; 0
     d1c:	1f c0       	rjmp	.+62     	; 0xd5c <udc_process_setup+0x410>
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
     d1e:	80 91 38 23 	lds	r24, 0x2338
     d22:	90 91 39 23 	lds	r25, 0x2339
     d26:	89 2b       	or	r24, r25
     d28:	81 f4       	brne	.+32     	; 0xd4a <udc_process_setup+0x3fe>
		return false;
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
     d2a:	80 91 34 23 	lds	r24, 0x2334
     d2e:	90 91 35 23 	lds	r25, 0x2335
     d32:	89 2b       	or	r24, r25
     d34:	61 f4       	brne	.+24     	; 0xd4e <udc_process_setup+0x402>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
     d36:	c6 e3       	ldi	r28, 0x36	; 54
     d38:	d3 e2       	ldi	r29, 0x23	; 35
     d3a:	88 81       	ld	r24, Y
     d3c:	0e 94 c2 13 	call	0x2784	; 0x2784 <udd_ep_abort>
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
     d40:	88 81       	ld	r24, Y
     d42:	0e 94 18 14 	call	0x2830	; 0x2830 <udd_ep_set_halt>
     d46:	08 2f       	mov	r16, r24
     d48:	09 c0       	rjmp	.+18     	; 0xd5c <udc_process_setup+0x410>
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
     d4a:	00 e0       	ldi	r16, 0x00	; 0
     d4c:	07 c0       	rjmp	.+14     	; 0xd5c <udc_process_setup+0x410>
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
	}
	return false;
     d4e:	00 e0       	ldi	r16, 0x00	; 0
     d50:	05 c0       	rjmp	.+10     	; 0xd5c <udc_process_setup+0x410>
				break;
			}
		}
#endif
	}
	return false;
     d52:	00 e0       	ldi	r16, 0x00	; 0
     d54:	03 c0       	rjmp	.+6      	; 0xd5c <udc_process_setup+0x410>
			case USB_REQ_SET_ADDRESS:
				return udc_req_std_dev_set_address();
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_dev_clear_feature();
			case USB_REQ_SET_FEATURE:
				return udc_req_std_dev_set_feature();
     d56:	00 e0       	ldi	r16, 0x00	; 0
     d58:	01 c0       	rjmp	.+2      	; 0xd5c <udc_process_setup+0x410>
				break;
			}
		}
#endif
	}
	return false;
     d5a:	00 e0       	ldi	r16, 0x00	; 0
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
     d5c:	01 11       	cpse	r16, r1
     d5e:	89 c0       	rjmp	.+274    	; 0xe72 <udc_process_setup+0x526>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
     d60:	80 91 32 23 	lds	r24, 0x2332
     d64:	8f 71       	andi	r24, 0x1F	; 31
     d66:	81 30       	cpi	r24, 0x01	; 1
     d68:	c1 f5       	brne	.+112    	; 0xdda <udc_process_setup+0x48e>
static bool udc_req_iface(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
     d6a:	80 91 b6 21 	lds	r24, 0x21B6
     d6e:	88 23       	and	r24, r24
     d70:	a1 f1       	breq	.+104    	; 0xdda <udc_process_setup+0x48e>
		return false; // The device is not is configured state yet
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
     d72:	c0 91 36 23 	lds	r28, 0x2336
     d76:	d0 91 37 23 	lds	r29, 0x2337
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
     d7a:	00 91 b4 21 	lds	r16, 0x21B4
     d7e:	10 91 b5 21 	lds	r17, 0x21B5
     d82:	d8 01       	movw	r26, r16
     d84:	ed 91       	ld	r30, X+
     d86:	fc 91       	ld	r31, X
     d88:	84 81       	ldd	r24, Z+4	; 0x04
     d8a:	c8 17       	cp	r28, r24
     d8c:	30 f5       	brcc	.+76     	; 0xdda <udc_process_setup+0x48e>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
     d8e:	60 e0       	ldi	r22, 0x00	; 0
     d90:	8c 2f       	mov	r24, r28
     d92:	d4 dc       	rcall	.-1624   	; 0x73c <udc_update_iface_desc>
     d94:	88 23       	and	r24, r24
     d96:	09 f1       	breq	.+66     	; 0xdda <udc_process_setup+0x48e>
		return false;
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
     d98:	ce 01       	movw	r24, r28
     d9a:	99 27       	eor	r25, r25
     d9c:	88 0f       	add	r24, r24
     d9e:	99 1f       	adc	r25, r25
     da0:	d8 01       	movw	r26, r16
     da2:	12 96       	adiw	r26, 0x02	; 2
     da4:	ed 91       	ld	r30, X+
     da6:	fc 91       	ld	r31, X
     da8:	13 97       	sbiw	r26, 0x03	; 3
     daa:	e8 0f       	add	r30, r24
     dac:	f9 1f       	adc	r31, r25
     dae:	00 81       	ld	r16, Z
     db0:	11 81       	ldd	r17, Z+1	; 0x01
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
     db2:	d8 01       	movw	r26, r16
     db4:	16 96       	adiw	r26, 0x06	; 6
     db6:	ed 91       	ld	r30, X+
     db8:	fc 91       	ld	r31, X
     dba:	17 97       	sbiw	r26, 0x07	; 7
     dbc:	19 95       	eicall
     dbe:	68 2f       	mov	r22, r24
     dc0:	8c 2f       	mov	r24, r28
     dc2:	bc dc       	rcall	.-1672   	; 0x73c <udc_update_iface_desc>
     dc4:	88 23       	and	r24, r24
     dc6:	49 f0       	breq	.+18     	; 0xdda <udc_process_setup+0x48e>
		return false;
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
     dc8:	d8 01       	movw	r26, r16
     dca:	14 96       	adiw	r26, 0x04	; 4
     dcc:	ed 91       	ld	r30, X+
     dce:	fc 91       	ld	r31, X
     dd0:	15 97       	sbiw	r26, 0x05	; 5
     dd2:	19 95       	eicall
     dd4:	08 2f       	mov	r16, r24
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
		if (udc_req_iface()) {
     dd6:	81 11       	cpse	r24, r1
     dd8:	4c c0       	rjmp	.+152    	; 0xe72 <udc_process_setup+0x526>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
     dda:	80 91 32 23 	lds	r24, 0x2332
     dde:	8f 71       	andi	r24, 0x1F	; 31
     de0:	82 30       	cpi	r24, 0x02	; 2
     de2:	d9 f5       	brne	.+118    	; 0xe5a <udc_process_setup+0x50e>
static bool udc_req_ep(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
     de4:	80 91 b6 21 	lds	r24, 0x21B6
     de8:	88 23       	and	r24, r24
     dea:	89 f1       	breq	.+98     	; 0xe4e <udc_process_setup+0x502>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
     dec:	e0 91 b4 21 	lds	r30, 0x21B4
     df0:	f0 91 b5 21 	lds	r31, 0x21B5
     df4:	a0 81       	ld	r26, Z
     df6:	b1 81       	ldd	r27, Z+1	; 0x01
     df8:	14 96       	adiw	r26, 0x04	; 4
     dfa:	8c 91       	ld	r24, X
     dfc:	88 23       	and	r24, r24
     dfe:	49 f1       	breq	.+82     	; 0xe52 <udc_process_setup+0x506>
     e00:	10 e0       	ldi	r17, 0x00	; 0
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
     e02:	21 2f       	mov	r18, r17
     e04:	30 e0       	ldi	r19, 0x00	; 0
     e06:	22 0f       	add	r18, r18
     e08:	33 1f       	adc	r19, r19
     e0a:	02 80       	ldd	r0, Z+2	; 0x02
     e0c:	f3 81       	ldd	r31, Z+3	; 0x03
     e0e:	e0 2d       	mov	r30, r0
     e10:	e2 0f       	add	r30, r18
     e12:	f3 1f       	adc	r31, r19
     e14:	c0 81       	ld	r28, Z
     e16:	d1 81       	ldd	r29, Z+1	; 0x01
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
     e18:	ee 81       	ldd	r30, Y+6	; 0x06
     e1a:	ff 81       	ldd	r31, Y+7	; 0x07
     e1c:	19 95       	eicall
     e1e:	68 2f       	mov	r22, r24
     e20:	81 2f       	mov	r24, r17
     e22:	8c dc       	rcall	.-1768   	; 0x73c <udc_update_iface_desc>
     e24:	08 2f       	mov	r16, r24
     e26:	88 23       	and	r24, r24
     e28:	21 f1       	breq	.+72     	; 0xe72 <udc_process_setup+0x526>
			return false;
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
     e2a:	ec 81       	ldd	r30, Y+4	; 0x04
     e2c:	fd 81       	ldd	r31, Y+5	; 0x05
     e2e:	19 95       	eicall
     e30:	08 2f       	mov	r16, r24
     e32:	81 11       	cpse	r24, r1
     e34:	1e c0       	rjmp	.+60     	; 0xe72 <udc_process_setup+0x526>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
     e36:	1f 5f       	subi	r17, 0xFF	; 255
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
     e38:	e0 91 b4 21 	lds	r30, 0x21B4
     e3c:	f0 91 b5 21 	lds	r31, 0x21B5
     e40:	a0 81       	ld	r26, Z
     e42:	b1 81       	ldd	r27, Z+1	; 0x01
     e44:	14 96       	adiw	r26, 0x04	; 4
     e46:	8c 91       	ld	r24, X
     e48:	18 17       	cp	r17, r24
     e4a:	d8 f2       	brcs	.-74     	; 0xe02 <udc_process_setup+0x4b6>
     e4c:	12 c0       	rjmp	.+36     	; 0xe72 <udc_process_setup+0x526>
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
     e4e:	00 e0       	ldi	r16, 0x00	; 0
     e50:	10 c0       	rjmp	.+32     	; 0xe72 <udc_process_setup+0x526>
		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
		}
	}
	return false;
     e52:	00 e0       	ldi	r16, 0x00	; 0
     e54:	0e c0       	rjmp	.+28     	; 0xe72 <udc_process_setup+0x526>
	udd_g_ctrlreq.callback = NULL;
	udd_g_ctrlreq.over_under_run = NULL;

	if (Udd_setup_is_in()) {
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error from USB host
     e56:	00 e0       	ldi	r16, 0x00	; 0
     e58:	0c c0       	rjmp	.+24     	; 0xe72 <udc_process_setup+0x526>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
     e5a:	00 e0       	ldi	r16, 0x00	; 0
     e5c:	0a c0       	rjmp	.+20     	; 0xe72 <udc_process_setup+0x526>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
     e5e:	82 2f       	mov	r24, r18
     e60:	80 76       	andi	r24, 0x60	; 96
     e62:	09 f0       	breq	.+2      	; 0xe66 <udc_process_setup+0x51a>
     e64:	7d cf       	rjmp	.-262    	; 0xd60 <udc_process_setup+0x414>
     e66:	84 ce       	rjmp	.-760    	; 0xb70 <udc_process_setup+0x224>
     e68:	32 2f       	mov	r19, r18
     e6a:	30 76       	andi	r19, 0x60	; 96
     e6c:	09 f0       	breq	.+2      	; 0xe70 <udc_process_setup+0x524>
     e6e:	78 cf       	rjmp	.-272    	; 0xd60 <udc_process_setup+0x414>
     e70:	8c cd       	rjmp	.-1256   	; 0x98a <udc_process_setup+0x3e>
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
#endif
}
     e72:	80 2f       	mov	r24, r16
     e74:	df 91       	pop	r29
     e76:	cf 91       	pop	r28
     e78:	1f 91       	pop	r17
     e7a:	0f 91       	pop	r16
     e7c:	ff 90       	pop	r15
     e7e:	ef 90       	pop	r14
     e80:	08 95       	ret

00000e82 <__vector_14>:
 *
 * This function will handle interrupt on Timer Counter CO overflow and
 * call the callback function.
 */
ISR(TCC0_OVF_vect)
{
     e82:	1f 92       	push	r1
     e84:	0f 92       	push	r0
     e86:	0f b6       	in	r0, 0x3f	; 63
     e88:	0f 92       	push	r0
     e8a:	11 24       	eor	r1, r1
     e8c:	0b b6       	in	r0, 0x3b	; 59
     e8e:	0f 92       	push	r0
     e90:	2f 93       	push	r18
     e92:	3f 93       	push	r19
     e94:	4f 93       	push	r20
     e96:	5f 93       	push	r21
     e98:	6f 93       	push	r22
     e9a:	7f 93       	push	r23
     e9c:	8f 93       	push	r24
     e9e:	9f 93       	push	r25
     ea0:	af 93       	push	r26
     ea2:	bf 93       	push	r27
     ea4:	ef 93       	push	r30
     ea6:	ff 93       	push	r31
	if (tc_tcc0_ovf_callback) {
     ea8:	e0 91 02 22 	lds	r30, 0x2202
     eac:	f0 91 03 22 	lds	r31, 0x2203
     eb0:	30 97       	sbiw	r30, 0x00	; 0
     eb2:	09 f0       	breq	.+2      	; 0xeb6 <__vector_14+0x34>
		tc_tcc0_ovf_callback();
     eb4:	19 95       	eicall
	}
}
     eb6:	ff 91       	pop	r31
     eb8:	ef 91       	pop	r30
     eba:	bf 91       	pop	r27
     ebc:	af 91       	pop	r26
     ebe:	9f 91       	pop	r25
     ec0:	8f 91       	pop	r24
     ec2:	7f 91       	pop	r23
     ec4:	6f 91       	pop	r22
     ec6:	5f 91       	pop	r21
     ec8:	4f 91       	pop	r20
     eca:	3f 91       	pop	r19
     ecc:	2f 91       	pop	r18
     ece:	0f 90       	pop	r0
     ed0:	0b be       	out	0x3b, r0	; 59
     ed2:	0f 90       	pop	r0
     ed4:	0f be       	out	0x3f, r0	; 63
     ed6:	0f 90       	pop	r0
     ed8:	1f 90       	pop	r1
     eda:	18 95       	reti

00000edc <__vector_15>:
 *
 * This function will handle interrupt on Timer Counter CO error and
 * call the callback function.
 */
ISR(TCC0_ERR_vect)
{
     edc:	1f 92       	push	r1
     ede:	0f 92       	push	r0
     ee0:	0f b6       	in	r0, 0x3f	; 63
     ee2:	0f 92       	push	r0
     ee4:	11 24       	eor	r1, r1
     ee6:	0b b6       	in	r0, 0x3b	; 59
     ee8:	0f 92       	push	r0
     eea:	2f 93       	push	r18
     eec:	3f 93       	push	r19
     eee:	4f 93       	push	r20
     ef0:	5f 93       	push	r21
     ef2:	6f 93       	push	r22
     ef4:	7f 93       	push	r23
     ef6:	8f 93       	push	r24
     ef8:	9f 93       	push	r25
     efa:	af 93       	push	r26
     efc:	bf 93       	push	r27
     efe:	ef 93       	push	r30
     f00:	ff 93       	push	r31
	if (tc_tcc0_err_callback) {
     f02:	e0 91 00 22 	lds	r30, 0x2200
     f06:	f0 91 01 22 	lds	r31, 0x2201
     f0a:	30 97       	sbiw	r30, 0x00	; 0
     f0c:	09 f0       	breq	.+2      	; 0xf10 <__vector_15+0x34>
		tc_tcc0_err_callback();
     f0e:	19 95       	eicall
	}
}
     f10:	ff 91       	pop	r31
     f12:	ef 91       	pop	r30
     f14:	bf 91       	pop	r27
     f16:	af 91       	pop	r26
     f18:	9f 91       	pop	r25
     f1a:	8f 91       	pop	r24
     f1c:	7f 91       	pop	r23
     f1e:	6f 91       	pop	r22
     f20:	5f 91       	pop	r21
     f22:	4f 91       	pop	r20
     f24:	3f 91       	pop	r19
     f26:	2f 91       	pop	r18
     f28:	0f 90       	pop	r0
     f2a:	0b be       	out	0x3b, r0	; 59
     f2c:	0f 90       	pop	r0
     f2e:	0f be       	out	0x3f, r0	; 63
     f30:	0f 90       	pop	r0
     f32:	1f 90       	pop	r1
     f34:	18 95       	reti

00000f36 <__vector_16>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC0_CCA_vect)
{
     f36:	1f 92       	push	r1
     f38:	0f 92       	push	r0
     f3a:	0f b6       	in	r0, 0x3f	; 63
     f3c:	0f 92       	push	r0
     f3e:	11 24       	eor	r1, r1
     f40:	0b b6       	in	r0, 0x3b	; 59
     f42:	0f 92       	push	r0
     f44:	2f 93       	push	r18
     f46:	3f 93       	push	r19
     f48:	4f 93       	push	r20
     f4a:	5f 93       	push	r21
     f4c:	6f 93       	push	r22
     f4e:	7f 93       	push	r23
     f50:	8f 93       	push	r24
     f52:	9f 93       	push	r25
     f54:	af 93       	push	r26
     f56:	bf 93       	push	r27
     f58:	ef 93       	push	r30
     f5a:	ff 93       	push	r31
	if (tc_tcc0_cca_callback) {
     f5c:	e0 91 fe 21 	lds	r30, 0x21FE
     f60:	f0 91 ff 21 	lds	r31, 0x21FF
     f64:	30 97       	sbiw	r30, 0x00	; 0
     f66:	09 f0       	breq	.+2      	; 0xf6a <__vector_16+0x34>
		tc_tcc0_cca_callback();
     f68:	19 95       	eicall
	}
}
     f6a:	ff 91       	pop	r31
     f6c:	ef 91       	pop	r30
     f6e:	bf 91       	pop	r27
     f70:	af 91       	pop	r26
     f72:	9f 91       	pop	r25
     f74:	8f 91       	pop	r24
     f76:	7f 91       	pop	r23
     f78:	6f 91       	pop	r22
     f7a:	5f 91       	pop	r21
     f7c:	4f 91       	pop	r20
     f7e:	3f 91       	pop	r19
     f80:	2f 91       	pop	r18
     f82:	0f 90       	pop	r0
     f84:	0b be       	out	0x3b, r0	; 59
     f86:	0f 90       	pop	r0
     f88:	0f be       	out	0x3f, r0	; 63
     f8a:	0f 90       	pop	r0
     f8c:	1f 90       	pop	r1
     f8e:	18 95       	reti

00000f90 <__vector_17>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC0_CCB_vect)
{
     f90:	1f 92       	push	r1
     f92:	0f 92       	push	r0
     f94:	0f b6       	in	r0, 0x3f	; 63
     f96:	0f 92       	push	r0
     f98:	11 24       	eor	r1, r1
     f9a:	0b b6       	in	r0, 0x3b	; 59
     f9c:	0f 92       	push	r0
     f9e:	2f 93       	push	r18
     fa0:	3f 93       	push	r19
     fa2:	4f 93       	push	r20
     fa4:	5f 93       	push	r21
     fa6:	6f 93       	push	r22
     fa8:	7f 93       	push	r23
     faa:	8f 93       	push	r24
     fac:	9f 93       	push	r25
     fae:	af 93       	push	r26
     fb0:	bf 93       	push	r27
     fb2:	ef 93       	push	r30
     fb4:	ff 93       	push	r31
	if (tc_tcc0_ccb_callback) {
     fb6:	e0 91 fc 21 	lds	r30, 0x21FC
     fba:	f0 91 fd 21 	lds	r31, 0x21FD
     fbe:	30 97       	sbiw	r30, 0x00	; 0
     fc0:	09 f0       	breq	.+2      	; 0xfc4 <__vector_17+0x34>
		tc_tcc0_ccb_callback();
     fc2:	19 95       	eicall
	}
}
     fc4:	ff 91       	pop	r31
     fc6:	ef 91       	pop	r30
     fc8:	bf 91       	pop	r27
     fca:	af 91       	pop	r26
     fcc:	9f 91       	pop	r25
     fce:	8f 91       	pop	r24
     fd0:	7f 91       	pop	r23
     fd2:	6f 91       	pop	r22
     fd4:	5f 91       	pop	r21
     fd6:	4f 91       	pop	r20
     fd8:	3f 91       	pop	r19
     fda:	2f 91       	pop	r18
     fdc:	0f 90       	pop	r0
     fde:	0b be       	out	0x3b, r0	; 59
     fe0:	0f 90       	pop	r0
     fe2:	0f be       	out	0x3f, r0	; 63
     fe4:	0f 90       	pop	r0
     fe6:	1f 90       	pop	r1
     fe8:	18 95       	reti

00000fea <__vector_18>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureC and
 * call the callback function.
 */
ISR(TCC0_CCC_vect)
{
     fea:	1f 92       	push	r1
     fec:	0f 92       	push	r0
     fee:	0f b6       	in	r0, 0x3f	; 63
     ff0:	0f 92       	push	r0
     ff2:	11 24       	eor	r1, r1
     ff4:	0b b6       	in	r0, 0x3b	; 59
     ff6:	0f 92       	push	r0
     ff8:	2f 93       	push	r18
     ffa:	3f 93       	push	r19
     ffc:	4f 93       	push	r20
     ffe:	5f 93       	push	r21
    1000:	6f 93       	push	r22
    1002:	7f 93       	push	r23
    1004:	8f 93       	push	r24
    1006:	9f 93       	push	r25
    1008:	af 93       	push	r26
    100a:	bf 93       	push	r27
    100c:	ef 93       	push	r30
    100e:	ff 93       	push	r31
	if (tc_tcc0_ccc_callback) {
    1010:	e0 91 fa 21 	lds	r30, 0x21FA
    1014:	f0 91 fb 21 	lds	r31, 0x21FB
    1018:	30 97       	sbiw	r30, 0x00	; 0
    101a:	09 f0       	breq	.+2      	; 0x101e <__vector_18+0x34>
		tc_tcc0_ccc_callback();
    101c:	19 95       	eicall
	}
}
    101e:	ff 91       	pop	r31
    1020:	ef 91       	pop	r30
    1022:	bf 91       	pop	r27
    1024:	af 91       	pop	r26
    1026:	9f 91       	pop	r25
    1028:	8f 91       	pop	r24
    102a:	7f 91       	pop	r23
    102c:	6f 91       	pop	r22
    102e:	5f 91       	pop	r21
    1030:	4f 91       	pop	r20
    1032:	3f 91       	pop	r19
    1034:	2f 91       	pop	r18
    1036:	0f 90       	pop	r0
    1038:	0b be       	out	0x3b, r0	; 59
    103a:	0f 90       	pop	r0
    103c:	0f be       	out	0x3f, r0	; 63
    103e:	0f 90       	pop	r0
    1040:	1f 90       	pop	r1
    1042:	18 95       	reti

00001044 <__vector_19>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureD and
 * call the callback function.
 */
ISR(TCC0_CCD_vect)
{
    1044:	1f 92       	push	r1
    1046:	0f 92       	push	r0
    1048:	0f b6       	in	r0, 0x3f	; 63
    104a:	0f 92       	push	r0
    104c:	11 24       	eor	r1, r1
    104e:	0b b6       	in	r0, 0x3b	; 59
    1050:	0f 92       	push	r0
    1052:	2f 93       	push	r18
    1054:	3f 93       	push	r19
    1056:	4f 93       	push	r20
    1058:	5f 93       	push	r21
    105a:	6f 93       	push	r22
    105c:	7f 93       	push	r23
    105e:	8f 93       	push	r24
    1060:	9f 93       	push	r25
    1062:	af 93       	push	r26
    1064:	bf 93       	push	r27
    1066:	ef 93       	push	r30
    1068:	ff 93       	push	r31
	if (tc_tcc0_ccd_callback) {
    106a:	e0 91 f8 21 	lds	r30, 0x21F8
    106e:	f0 91 f9 21 	lds	r31, 0x21F9
    1072:	30 97       	sbiw	r30, 0x00	; 0
    1074:	09 f0       	breq	.+2      	; 0x1078 <__vector_19+0x34>
		tc_tcc0_ccd_callback();
    1076:	19 95       	eicall
	}
}
    1078:	ff 91       	pop	r31
    107a:	ef 91       	pop	r30
    107c:	bf 91       	pop	r27
    107e:	af 91       	pop	r26
    1080:	9f 91       	pop	r25
    1082:	8f 91       	pop	r24
    1084:	7f 91       	pop	r23
    1086:	6f 91       	pop	r22
    1088:	5f 91       	pop	r21
    108a:	4f 91       	pop	r20
    108c:	3f 91       	pop	r19
    108e:	2f 91       	pop	r18
    1090:	0f 90       	pop	r0
    1092:	0b be       	out	0x3b, r0	; 59
    1094:	0f 90       	pop	r0
    1096:	0f be       	out	0x3f, r0	; 63
    1098:	0f 90       	pop	r0
    109a:	1f 90       	pop	r1
    109c:	18 95       	reti

0000109e <__vector_20>:
 *
 * This function will handle interrupt on Timer Counter C1 overflow and
 * call the callback function.
 */
ISR(TCC1_OVF_vect)
{
    109e:	1f 92       	push	r1
    10a0:	0f 92       	push	r0
    10a2:	0f b6       	in	r0, 0x3f	; 63
    10a4:	0f 92       	push	r0
    10a6:	11 24       	eor	r1, r1
    10a8:	0b b6       	in	r0, 0x3b	; 59
    10aa:	0f 92       	push	r0
    10ac:	2f 93       	push	r18
    10ae:	3f 93       	push	r19
    10b0:	4f 93       	push	r20
    10b2:	5f 93       	push	r21
    10b4:	6f 93       	push	r22
    10b6:	7f 93       	push	r23
    10b8:	8f 93       	push	r24
    10ba:	9f 93       	push	r25
    10bc:	af 93       	push	r26
    10be:	bf 93       	push	r27
    10c0:	ef 93       	push	r30
    10c2:	ff 93       	push	r31
	if (tc_tcc1_ovf_callback) {
    10c4:	e0 91 f6 21 	lds	r30, 0x21F6
    10c8:	f0 91 f7 21 	lds	r31, 0x21F7
    10cc:	30 97       	sbiw	r30, 0x00	; 0
    10ce:	09 f0       	breq	.+2      	; 0x10d2 <__vector_20+0x34>
		tc_tcc1_ovf_callback();
    10d0:	19 95       	eicall
	}
}
    10d2:	ff 91       	pop	r31
    10d4:	ef 91       	pop	r30
    10d6:	bf 91       	pop	r27
    10d8:	af 91       	pop	r26
    10da:	9f 91       	pop	r25
    10dc:	8f 91       	pop	r24
    10de:	7f 91       	pop	r23
    10e0:	6f 91       	pop	r22
    10e2:	5f 91       	pop	r21
    10e4:	4f 91       	pop	r20
    10e6:	3f 91       	pop	r19
    10e8:	2f 91       	pop	r18
    10ea:	0f 90       	pop	r0
    10ec:	0b be       	out	0x3b, r0	; 59
    10ee:	0f 90       	pop	r0
    10f0:	0f be       	out	0x3f, r0	; 63
    10f2:	0f 90       	pop	r0
    10f4:	1f 90       	pop	r1
    10f6:	18 95       	reti

000010f8 <__vector_21>:
 *
 * This function will handle interrupt on Timer Counter C1 error and
 * call the callback function.
 */
ISR(TCC1_ERR_vect)
{
    10f8:	1f 92       	push	r1
    10fa:	0f 92       	push	r0
    10fc:	0f b6       	in	r0, 0x3f	; 63
    10fe:	0f 92       	push	r0
    1100:	11 24       	eor	r1, r1
    1102:	0b b6       	in	r0, 0x3b	; 59
    1104:	0f 92       	push	r0
    1106:	2f 93       	push	r18
    1108:	3f 93       	push	r19
    110a:	4f 93       	push	r20
    110c:	5f 93       	push	r21
    110e:	6f 93       	push	r22
    1110:	7f 93       	push	r23
    1112:	8f 93       	push	r24
    1114:	9f 93       	push	r25
    1116:	af 93       	push	r26
    1118:	bf 93       	push	r27
    111a:	ef 93       	push	r30
    111c:	ff 93       	push	r31
	if (tc_tcc1_err_callback) {
    111e:	e0 91 f4 21 	lds	r30, 0x21F4
    1122:	f0 91 f5 21 	lds	r31, 0x21F5
    1126:	30 97       	sbiw	r30, 0x00	; 0
    1128:	09 f0       	breq	.+2      	; 0x112c <__vector_21+0x34>
		tc_tcc1_err_callback();
    112a:	19 95       	eicall
	}
}
    112c:	ff 91       	pop	r31
    112e:	ef 91       	pop	r30
    1130:	bf 91       	pop	r27
    1132:	af 91       	pop	r26
    1134:	9f 91       	pop	r25
    1136:	8f 91       	pop	r24
    1138:	7f 91       	pop	r23
    113a:	6f 91       	pop	r22
    113c:	5f 91       	pop	r21
    113e:	4f 91       	pop	r20
    1140:	3f 91       	pop	r19
    1142:	2f 91       	pop	r18
    1144:	0f 90       	pop	r0
    1146:	0b be       	out	0x3b, r0	; 59
    1148:	0f 90       	pop	r0
    114a:	0f be       	out	0x3f, r0	; 63
    114c:	0f 90       	pop	r0
    114e:	1f 90       	pop	r1
    1150:	18 95       	reti

00001152 <__vector_22>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC1_CCA_vect)
{
    1152:	1f 92       	push	r1
    1154:	0f 92       	push	r0
    1156:	0f b6       	in	r0, 0x3f	; 63
    1158:	0f 92       	push	r0
    115a:	11 24       	eor	r1, r1
    115c:	0b b6       	in	r0, 0x3b	; 59
    115e:	0f 92       	push	r0
    1160:	2f 93       	push	r18
    1162:	3f 93       	push	r19
    1164:	4f 93       	push	r20
    1166:	5f 93       	push	r21
    1168:	6f 93       	push	r22
    116a:	7f 93       	push	r23
    116c:	8f 93       	push	r24
    116e:	9f 93       	push	r25
    1170:	af 93       	push	r26
    1172:	bf 93       	push	r27
    1174:	ef 93       	push	r30
    1176:	ff 93       	push	r31
	if (tc_tcc1_cca_callback) {
    1178:	e0 91 f2 21 	lds	r30, 0x21F2
    117c:	f0 91 f3 21 	lds	r31, 0x21F3
    1180:	30 97       	sbiw	r30, 0x00	; 0
    1182:	09 f0       	breq	.+2      	; 0x1186 <__vector_22+0x34>
		tc_tcc1_cca_callback();
    1184:	19 95       	eicall
	}
}
    1186:	ff 91       	pop	r31
    1188:	ef 91       	pop	r30
    118a:	bf 91       	pop	r27
    118c:	af 91       	pop	r26
    118e:	9f 91       	pop	r25
    1190:	8f 91       	pop	r24
    1192:	7f 91       	pop	r23
    1194:	6f 91       	pop	r22
    1196:	5f 91       	pop	r21
    1198:	4f 91       	pop	r20
    119a:	3f 91       	pop	r19
    119c:	2f 91       	pop	r18
    119e:	0f 90       	pop	r0
    11a0:	0b be       	out	0x3b, r0	; 59
    11a2:	0f 90       	pop	r0
    11a4:	0f be       	out	0x3f, r0	; 63
    11a6:	0f 90       	pop	r0
    11a8:	1f 90       	pop	r1
    11aa:	18 95       	reti

000011ac <__vector_23>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC1_CCB_vect)
{
    11ac:	1f 92       	push	r1
    11ae:	0f 92       	push	r0
    11b0:	0f b6       	in	r0, 0x3f	; 63
    11b2:	0f 92       	push	r0
    11b4:	11 24       	eor	r1, r1
    11b6:	0b b6       	in	r0, 0x3b	; 59
    11b8:	0f 92       	push	r0
    11ba:	2f 93       	push	r18
    11bc:	3f 93       	push	r19
    11be:	4f 93       	push	r20
    11c0:	5f 93       	push	r21
    11c2:	6f 93       	push	r22
    11c4:	7f 93       	push	r23
    11c6:	8f 93       	push	r24
    11c8:	9f 93       	push	r25
    11ca:	af 93       	push	r26
    11cc:	bf 93       	push	r27
    11ce:	ef 93       	push	r30
    11d0:	ff 93       	push	r31
	if (tc_tcc1_ccb_callback) {
    11d2:	e0 91 f0 21 	lds	r30, 0x21F0
    11d6:	f0 91 f1 21 	lds	r31, 0x21F1
    11da:	30 97       	sbiw	r30, 0x00	; 0
    11dc:	09 f0       	breq	.+2      	; 0x11e0 <__vector_23+0x34>
		tc_tcc1_ccb_callback();
    11de:	19 95       	eicall
	}
}
    11e0:	ff 91       	pop	r31
    11e2:	ef 91       	pop	r30
    11e4:	bf 91       	pop	r27
    11e6:	af 91       	pop	r26
    11e8:	9f 91       	pop	r25
    11ea:	8f 91       	pop	r24
    11ec:	7f 91       	pop	r23
    11ee:	6f 91       	pop	r22
    11f0:	5f 91       	pop	r21
    11f2:	4f 91       	pop	r20
    11f4:	3f 91       	pop	r19
    11f6:	2f 91       	pop	r18
    11f8:	0f 90       	pop	r0
    11fa:	0b be       	out	0x3b, r0	; 59
    11fc:	0f 90       	pop	r0
    11fe:	0f be       	out	0x3f, r0	; 63
    1200:	0f 90       	pop	r0
    1202:	1f 90       	pop	r1
    1204:	18 95       	reti

00001206 <__vector_77>:
 *
 * This function will handle interrupt on Timer Counter D0 overflow and
 * call the callback function.
 */
ISR(TCD0_OVF_vect)
{
    1206:	1f 92       	push	r1
    1208:	0f 92       	push	r0
    120a:	0f b6       	in	r0, 0x3f	; 63
    120c:	0f 92       	push	r0
    120e:	11 24       	eor	r1, r1
    1210:	0b b6       	in	r0, 0x3b	; 59
    1212:	0f 92       	push	r0
    1214:	2f 93       	push	r18
    1216:	3f 93       	push	r19
    1218:	4f 93       	push	r20
    121a:	5f 93       	push	r21
    121c:	6f 93       	push	r22
    121e:	7f 93       	push	r23
    1220:	8f 93       	push	r24
    1222:	9f 93       	push	r25
    1224:	af 93       	push	r26
    1226:	bf 93       	push	r27
    1228:	ef 93       	push	r30
    122a:	ff 93       	push	r31
	if (tc_tcd0_ovf_callback) {
    122c:	e0 91 ee 21 	lds	r30, 0x21EE
    1230:	f0 91 ef 21 	lds	r31, 0x21EF
    1234:	30 97       	sbiw	r30, 0x00	; 0
    1236:	09 f0       	breq	.+2      	; 0x123a <__vector_77+0x34>
		tc_tcd0_ovf_callback();
    1238:	19 95       	eicall
	}
}
    123a:	ff 91       	pop	r31
    123c:	ef 91       	pop	r30
    123e:	bf 91       	pop	r27
    1240:	af 91       	pop	r26
    1242:	9f 91       	pop	r25
    1244:	8f 91       	pop	r24
    1246:	7f 91       	pop	r23
    1248:	6f 91       	pop	r22
    124a:	5f 91       	pop	r21
    124c:	4f 91       	pop	r20
    124e:	3f 91       	pop	r19
    1250:	2f 91       	pop	r18
    1252:	0f 90       	pop	r0
    1254:	0b be       	out	0x3b, r0	; 59
    1256:	0f 90       	pop	r0
    1258:	0f be       	out	0x3f, r0	; 63
    125a:	0f 90       	pop	r0
    125c:	1f 90       	pop	r1
    125e:	18 95       	reti

00001260 <__vector_78>:
 *
 * This function will handle interrupt on Timer Counter D0 error and
 * call the callback function.
 */
ISR(TCD0_ERR_vect)
{
    1260:	1f 92       	push	r1
    1262:	0f 92       	push	r0
    1264:	0f b6       	in	r0, 0x3f	; 63
    1266:	0f 92       	push	r0
    1268:	11 24       	eor	r1, r1
    126a:	0b b6       	in	r0, 0x3b	; 59
    126c:	0f 92       	push	r0
    126e:	2f 93       	push	r18
    1270:	3f 93       	push	r19
    1272:	4f 93       	push	r20
    1274:	5f 93       	push	r21
    1276:	6f 93       	push	r22
    1278:	7f 93       	push	r23
    127a:	8f 93       	push	r24
    127c:	9f 93       	push	r25
    127e:	af 93       	push	r26
    1280:	bf 93       	push	r27
    1282:	ef 93       	push	r30
    1284:	ff 93       	push	r31
	if (tc_tcd0_err_callback) {
    1286:	e0 91 ec 21 	lds	r30, 0x21EC
    128a:	f0 91 ed 21 	lds	r31, 0x21ED
    128e:	30 97       	sbiw	r30, 0x00	; 0
    1290:	09 f0       	breq	.+2      	; 0x1294 <__vector_78+0x34>
		tc_tcd0_err_callback();
    1292:	19 95       	eicall
	}
}
    1294:	ff 91       	pop	r31
    1296:	ef 91       	pop	r30
    1298:	bf 91       	pop	r27
    129a:	af 91       	pop	r26
    129c:	9f 91       	pop	r25
    129e:	8f 91       	pop	r24
    12a0:	7f 91       	pop	r23
    12a2:	6f 91       	pop	r22
    12a4:	5f 91       	pop	r21
    12a6:	4f 91       	pop	r20
    12a8:	3f 91       	pop	r19
    12aa:	2f 91       	pop	r18
    12ac:	0f 90       	pop	r0
    12ae:	0b be       	out	0x3b, r0	; 59
    12b0:	0f 90       	pop	r0
    12b2:	0f be       	out	0x3f, r0	; 63
    12b4:	0f 90       	pop	r0
    12b6:	1f 90       	pop	r1
    12b8:	18 95       	reti

000012ba <__vector_79>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD0_CCA_vect)
{
    12ba:	1f 92       	push	r1
    12bc:	0f 92       	push	r0
    12be:	0f b6       	in	r0, 0x3f	; 63
    12c0:	0f 92       	push	r0
    12c2:	11 24       	eor	r1, r1
    12c4:	0b b6       	in	r0, 0x3b	; 59
    12c6:	0f 92       	push	r0
    12c8:	2f 93       	push	r18
    12ca:	3f 93       	push	r19
    12cc:	4f 93       	push	r20
    12ce:	5f 93       	push	r21
    12d0:	6f 93       	push	r22
    12d2:	7f 93       	push	r23
    12d4:	8f 93       	push	r24
    12d6:	9f 93       	push	r25
    12d8:	af 93       	push	r26
    12da:	bf 93       	push	r27
    12dc:	ef 93       	push	r30
    12de:	ff 93       	push	r31
	if (tc_tcd0_cca_callback) {
    12e0:	e0 91 ea 21 	lds	r30, 0x21EA
    12e4:	f0 91 eb 21 	lds	r31, 0x21EB
    12e8:	30 97       	sbiw	r30, 0x00	; 0
    12ea:	09 f0       	breq	.+2      	; 0x12ee <__vector_79+0x34>
		tc_tcd0_cca_callback();
    12ec:	19 95       	eicall
	}
}
    12ee:	ff 91       	pop	r31
    12f0:	ef 91       	pop	r30
    12f2:	bf 91       	pop	r27
    12f4:	af 91       	pop	r26
    12f6:	9f 91       	pop	r25
    12f8:	8f 91       	pop	r24
    12fa:	7f 91       	pop	r23
    12fc:	6f 91       	pop	r22
    12fe:	5f 91       	pop	r21
    1300:	4f 91       	pop	r20
    1302:	3f 91       	pop	r19
    1304:	2f 91       	pop	r18
    1306:	0f 90       	pop	r0
    1308:	0b be       	out	0x3b, r0	; 59
    130a:	0f 90       	pop	r0
    130c:	0f be       	out	0x3f, r0	; 63
    130e:	0f 90       	pop	r0
    1310:	1f 90       	pop	r1
    1312:	18 95       	reti

00001314 <__vector_80>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD0_CCB_vect)
{
    1314:	1f 92       	push	r1
    1316:	0f 92       	push	r0
    1318:	0f b6       	in	r0, 0x3f	; 63
    131a:	0f 92       	push	r0
    131c:	11 24       	eor	r1, r1
    131e:	0b b6       	in	r0, 0x3b	; 59
    1320:	0f 92       	push	r0
    1322:	2f 93       	push	r18
    1324:	3f 93       	push	r19
    1326:	4f 93       	push	r20
    1328:	5f 93       	push	r21
    132a:	6f 93       	push	r22
    132c:	7f 93       	push	r23
    132e:	8f 93       	push	r24
    1330:	9f 93       	push	r25
    1332:	af 93       	push	r26
    1334:	bf 93       	push	r27
    1336:	ef 93       	push	r30
    1338:	ff 93       	push	r31
	if (tc_tcd0_ccb_callback) {
    133a:	e0 91 e8 21 	lds	r30, 0x21E8
    133e:	f0 91 e9 21 	lds	r31, 0x21E9
    1342:	30 97       	sbiw	r30, 0x00	; 0
    1344:	09 f0       	breq	.+2      	; 0x1348 <__vector_80+0x34>
		tc_tcd0_ccb_callback();
    1346:	19 95       	eicall
	}
}
    1348:	ff 91       	pop	r31
    134a:	ef 91       	pop	r30
    134c:	bf 91       	pop	r27
    134e:	af 91       	pop	r26
    1350:	9f 91       	pop	r25
    1352:	8f 91       	pop	r24
    1354:	7f 91       	pop	r23
    1356:	6f 91       	pop	r22
    1358:	5f 91       	pop	r21
    135a:	4f 91       	pop	r20
    135c:	3f 91       	pop	r19
    135e:	2f 91       	pop	r18
    1360:	0f 90       	pop	r0
    1362:	0b be       	out	0x3b, r0	; 59
    1364:	0f 90       	pop	r0
    1366:	0f be       	out	0x3f, r0	; 63
    1368:	0f 90       	pop	r0
    136a:	1f 90       	pop	r1
    136c:	18 95       	reti

0000136e <__vector_81>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCD0_CCC_vect)
{
    136e:	1f 92       	push	r1
    1370:	0f 92       	push	r0
    1372:	0f b6       	in	r0, 0x3f	; 63
    1374:	0f 92       	push	r0
    1376:	11 24       	eor	r1, r1
    1378:	0b b6       	in	r0, 0x3b	; 59
    137a:	0f 92       	push	r0
    137c:	2f 93       	push	r18
    137e:	3f 93       	push	r19
    1380:	4f 93       	push	r20
    1382:	5f 93       	push	r21
    1384:	6f 93       	push	r22
    1386:	7f 93       	push	r23
    1388:	8f 93       	push	r24
    138a:	9f 93       	push	r25
    138c:	af 93       	push	r26
    138e:	bf 93       	push	r27
    1390:	ef 93       	push	r30
    1392:	ff 93       	push	r31
	if (tc_tcd0_ccc_callback) {
    1394:	e0 91 e6 21 	lds	r30, 0x21E6
    1398:	f0 91 e7 21 	lds	r31, 0x21E7
    139c:	30 97       	sbiw	r30, 0x00	; 0
    139e:	09 f0       	breq	.+2      	; 0x13a2 <__vector_81+0x34>
		tc_tcd0_ccc_callback();
    13a0:	19 95       	eicall
	}
}
    13a2:	ff 91       	pop	r31
    13a4:	ef 91       	pop	r30
    13a6:	bf 91       	pop	r27
    13a8:	af 91       	pop	r26
    13aa:	9f 91       	pop	r25
    13ac:	8f 91       	pop	r24
    13ae:	7f 91       	pop	r23
    13b0:	6f 91       	pop	r22
    13b2:	5f 91       	pop	r21
    13b4:	4f 91       	pop	r20
    13b6:	3f 91       	pop	r19
    13b8:	2f 91       	pop	r18
    13ba:	0f 90       	pop	r0
    13bc:	0b be       	out	0x3b, r0	; 59
    13be:	0f 90       	pop	r0
    13c0:	0f be       	out	0x3f, r0	; 63
    13c2:	0f 90       	pop	r0
    13c4:	1f 90       	pop	r1
    13c6:	18 95       	reti

000013c8 <__vector_82>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCD0_CCD_vect)
{
    13c8:	1f 92       	push	r1
    13ca:	0f 92       	push	r0
    13cc:	0f b6       	in	r0, 0x3f	; 63
    13ce:	0f 92       	push	r0
    13d0:	11 24       	eor	r1, r1
    13d2:	0b b6       	in	r0, 0x3b	; 59
    13d4:	0f 92       	push	r0
    13d6:	2f 93       	push	r18
    13d8:	3f 93       	push	r19
    13da:	4f 93       	push	r20
    13dc:	5f 93       	push	r21
    13de:	6f 93       	push	r22
    13e0:	7f 93       	push	r23
    13e2:	8f 93       	push	r24
    13e4:	9f 93       	push	r25
    13e6:	af 93       	push	r26
    13e8:	bf 93       	push	r27
    13ea:	ef 93       	push	r30
    13ec:	ff 93       	push	r31
	if (tc_tcd0_ccd_callback) {
    13ee:	e0 91 e4 21 	lds	r30, 0x21E4
    13f2:	f0 91 e5 21 	lds	r31, 0x21E5
    13f6:	30 97       	sbiw	r30, 0x00	; 0
    13f8:	09 f0       	breq	.+2      	; 0x13fc <__vector_82+0x34>
		tc_tcd0_ccd_callback();
    13fa:	19 95       	eicall
	}
}
    13fc:	ff 91       	pop	r31
    13fe:	ef 91       	pop	r30
    1400:	bf 91       	pop	r27
    1402:	af 91       	pop	r26
    1404:	9f 91       	pop	r25
    1406:	8f 91       	pop	r24
    1408:	7f 91       	pop	r23
    140a:	6f 91       	pop	r22
    140c:	5f 91       	pop	r21
    140e:	4f 91       	pop	r20
    1410:	3f 91       	pop	r19
    1412:	2f 91       	pop	r18
    1414:	0f 90       	pop	r0
    1416:	0b be       	out	0x3b, r0	; 59
    1418:	0f 90       	pop	r0
    141a:	0f be       	out	0x3f, r0	; 63
    141c:	0f 90       	pop	r0
    141e:	1f 90       	pop	r1
    1420:	18 95       	reti

00001422 <__vector_83>:
 *
 * This function will handle interrupt on Timer Counter D1 overflow and
 * call the callback function.
 */
ISR(TCD1_OVF_vect)
{
    1422:	1f 92       	push	r1
    1424:	0f 92       	push	r0
    1426:	0f b6       	in	r0, 0x3f	; 63
    1428:	0f 92       	push	r0
    142a:	11 24       	eor	r1, r1
    142c:	0b b6       	in	r0, 0x3b	; 59
    142e:	0f 92       	push	r0
    1430:	2f 93       	push	r18
    1432:	3f 93       	push	r19
    1434:	4f 93       	push	r20
    1436:	5f 93       	push	r21
    1438:	6f 93       	push	r22
    143a:	7f 93       	push	r23
    143c:	8f 93       	push	r24
    143e:	9f 93       	push	r25
    1440:	af 93       	push	r26
    1442:	bf 93       	push	r27
    1444:	ef 93       	push	r30
    1446:	ff 93       	push	r31
	if (tc_tcd1_ovf_callback) {
    1448:	e0 91 e2 21 	lds	r30, 0x21E2
    144c:	f0 91 e3 21 	lds	r31, 0x21E3
    1450:	30 97       	sbiw	r30, 0x00	; 0
    1452:	09 f0       	breq	.+2      	; 0x1456 <__vector_83+0x34>
		tc_tcd1_ovf_callback();
    1454:	19 95       	eicall
	}
}
    1456:	ff 91       	pop	r31
    1458:	ef 91       	pop	r30
    145a:	bf 91       	pop	r27
    145c:	af 91       	pop	r26
    145e:	9f 91       	pop	r25
    1460:	8f 91       	pop	r24
    1462:	7f 91       	pop	r23
    1464:	6f 91       	pop	r22
    1466:	5f 91       	pop	r21
    1468:	4f 91       	pop	r20
    146a:	3f 91       	pop	r19
    146c:	2f 91       	pop	r18
    146e:	0f 90       	pop	r0
    1470:	0b be       	out	0x3b, r0	; 59
    1472:	0f 90       	pop	r0
    1474:	0f be       	out	0x3f, r0	; 63
    1476:	0f 90       	pop	r0
    1478:	1f 90       	pop	r1
    147a:	18 95       	reti

0000147c <__vector_84>:
 *
 * This function will handle interrupt on Timer Counter D1 error and
 * call the callback function.
 */
ISR(TCD1_ERR_vect)
{
    147c:	1f 92       	push	r1
    147e:	0f 92       	push	r0
    1480:	0f b6       	in	r0, 0x3f	; 63
    1482:	0f 92       	push	r0
    1484:	11 24       	eor	r1, r1
    1486:	0b b6       	in	r0, 0x3b	; 59
    1488:	0f 92       	push	r0
    148a:	2f 93       	push	r18
    148c:	3f 93       	push	r19
    148e:	4f 93       	push	r20
    1490:	5f 93       	push	r21
    1492:	6f 93       	push	r22
    1494:	7f 93       	push	r23
    1496:	8f 93       	push	r24
    1498:	9f 93       	push	r25
    149a:	af 93       	push	r26
    149c:	bf 93       	push	r27
    149e:	ef 93       	push	r30
    14a0:	ff 93       	push	r31
	if (tc_tcd1_err_callback) {
    14a2:	e0 91 e0 21 	lds	r30, 0x21E0
    14a6:	f0 91 e1 21 	lds	r31, 0x21E1
    14aa:	30 97       	sbiw	r30, 0x00	; 0
    14ac:	09 f0       	breq	.+2      	; 0x14b0 <__vector_84+0x34>
		tc_tcd1_err_callback();
    14ae:	19 95       	eicall
	}
}
    14b0:	ff 91       	pop	r31
    14b2:	ef 91       	pop	r30
    14b4:	bf 91       	pop	r27
    14b6:	af 91       	pop	r26
    14b8:	9f 91       	pop	r25
    14ba:	8f 91       	pop	r24
    14bc:	7f 91       	pop	r23
    14be:	6f 91       	pop	r22
    14c0:	5f 91       	pop	r21
    14c2:	4f 91       	pop	r20
    14c4:	3f 91       	pop	r19
    14c6:	2f 91       	pop	r18
    14c8:	0f 90       	pop	r0
    14ca:	0b be       	out	0x3b, r0	; 59
    14cc:	0f 90       	pop	r0
    14ce:	0f be       	out	0x3f, r0	; 63
    14d0:	0f 90       	pop	r0
    14d2:	1f 90       	pop	r1
    14d4:	18 95       	reti

000014d6 <__vector_85>:
 *
 * This function will handle interrupt on Timer Counter D1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD1_CCA_vect)
{
    14d6:	1f 92       	push	r1
    14d8:	0f 92       	push	r0
    14da:	0f b6       	in	r0, 0x3f	; 63
    14dc:	0f 92       	push	r0
    14de:	11 24       	eor	r1, r1
    14e0:	0b b6       	in	r0, 0x3b	; 59
    14e2:	0f 92       	push	r0
    14e4:	2f 93       	push	r18
    14e6:	3f 93       	push	r19
    14e8:	4f 93       	push	r20
    14ea:	5f 93       	push	r21
    14ec:	6f 93       	push	r22
    14ee:	7f 93       	push	r23
    14f0:	8f 93       	push	r24
    14f2:	9f 93       	push	r25
    14f4:	af 93       	push	r26
    14f6:	bf 93       	push	r27
    14f8:	ef 93       	push	r30
    14fa:	ff 93       	push	r31
	if (tc_tcd1_cca_callback) {
    14fc:	e0 91 de 21 	lds	r30, 0x21DE
    1500:	f0 91 df 21 	lds	r31, 0x21DF
    1504:	30 97       	sbiw	r30, 0x00	; 0
    1506:	09 f0       	breq	.+2      	; 0x150a <__vector_85+0x34>
		tc_tcd1_cca_callback();
    1508:	19 95       	eicall
	}
}
    150a:	ff 91       	pop	r31
    150c:	ef 91       	pop	r30
    150e:	bf 91       	pop	r27
    1510:	af 91       	pop	r26
    1512:	9f 91       	pop	r25
    1514:	8f 91       	pop	r24
    1516:	7f 91       	pop	r23
    1518:	6f 91       	pop	r22
    151a:	5f 91       	pop	r21
    151c:	4f 91       	pop	r20
    151e:	3f 91       	pop	r19
    1520:	2f 91       	pop	r18
    1522:	0f 90       	pop	r0
    1524:	0b be       	out	0x3b, r0	; 59
    1526:	0f 90       	pop	r0
    1528:	0f be       	out	0x3f, r0	; 63
    152a:	0f 90       	pop	r0
    152c:	1f 90       	pop	r1
    152e:	18 95       	reti

00001530 <__vector_86>:
 *
 * This function will handle interrupt on Timer Counter D1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD1_CCB_vect)
{
    1530:	1f 92       	push	r1
    1532:	0f 92       	push	r0
    1534:	0f b6       	in	r0, 0x3f	; 63
    1536:	0f 92       	push	r0
    1538:	11 24       	eor	r1, r1
    153a:	0b b6       	in	r0, 0x3b	; 59
    153c:	0f 92       	push	r0
    153e:	2f 93       	push	r18
    1540:	3f 93       	push	r19
    1542:	4f 93       	push	r20
    1544:	5f 93       	push	r21
    1546:	6f 93       	push	r22
    1548:	7f 93       	push	r23
    154a:	8f 93       	push	r24
    154c:	9f 93       	push	r25
    154e:	af 93       	push	r26
    1550:	bf 93       	push	r27
    1552:	ef 93       	push	r30
    1554:	ff 93       	push	r31
	if (tc_tcd1_ccb_callback) {
    1556:	e0 91 dc 21 	lds	r30, 0x21DC
    155a:	f0 91 dd 21 	lds	r31, 0x21DD
    155e:	30 97       	sbiw	r30, 0x00	; 0
    1560:	09 f0       	breq	.+2      	; 0x1564 <__vector_86+0x34>
		tc_tcd1_ccb_callback();
    1562:	19 95       	eicall
	}
}
    1564:	ff 91       	pop	r31
    1566:	ef 91       	pop	r30
    1568:	bf 91       	pop	r27
    156a:	af 91       	pop	r26
    156c:	9f 91       	pop	r25
    156e:	8f 91       	pop	r24
    1570:	7f 91       	pop	r23
    1572:	6f 91       	pop	r22
    1574:	5f 91       	pop	r21
    1576:	4f 91       	pop	r20
    1578:	3f 91       	pop	r19
    157a:	2f 91       	pop	r18
    157c:	0f 90       	pop	r0
    157e:	0b be       	out	0x3b, r0	; 59
    1580:	0f 90       	pop	r0
    1582:	0f be       	out	0x3f, r0	; 63
    1584:	0f 90       	pop	r0
    1586:	1f 90       	pop	r1
    1588:	18 95       	reti

0000158a <__vector_47>:
 *
 * This function will handle interrupt on Timer Counter E0 overflow and
 * call the callback function.
 */
ISR(TCE0_OVF_vect)
{
    158a:	1f 92       	push	r1
    158c:	0f 92       	push	r0
    158e:	0f b6       	in	r0, 0x3f	; 63
    1590:	0f 92       	push	r0
    1592:	11 24       	eor	r1, r1
    1594:	0b b6       	in	r0, 0x3b	; 59
    1596:	0f 92       	push	r0
    1598:	2f 93       	push	r18
    159a:	3f 93       	push	r19
    159c:	4f 93       	push	r20
    159e:	5f 93       	push	r21
    15a0:	6f 93       	push	r22
    15a2:	7f 93       	push	r23
    15a4:	8f 93       	push	r24
    15a6:	9f 93       	push	r25
    15a8:	af 93       	push	r26
    15aa:	bf 93       	push	r27
    15ac:	ef 93       	push	r30
    15ae:	ff 93       	push	r31
	if (tc_tce0_ovf_callback) {
    15b0:	e0 91 da 21 	lds	r30, 0x21DA
    15b4:	f0 91 db 21 	lds	r31, 0x21DB
    15b8:	30 97       	sbiw	r30, 0x00	; 0
    15ba:	09 f0       	breq	.+2      	; 0x15be <__vector_47+0x34>
		tc_tce0_ovf_callback();
    15bc:	19 95       	eicall
	}
}
    15be:	ff 91       	pop	r31
    15c0:	ef 91       	pop	r30
    15c2:	bf 91       	pop	r27
    15c4:	af 91       	pop	r26
    15c6:	9f 91       	pop	r25
    15c8:	8f 91       	pop	r24
    15ca:	7f 91       	pop	r23
    15cc:	6f 91       	pop	r22
    15ce:	5f 91       	pop	r21
    15d0:	4f 91       	pop	r20
    15d2:	3f 91       	pop	r19
    15d4:	2f 91       	pop	r18
    15d6:	0f 90       	pop	r0
    15d8:	0b be       	out	0x3b, r0	; 59
    15da:	0f 90       	pop	r0
    15dc:	0f be       	out	0x3f, r0	; 63
    15de:	0f 90       	pop	r0
    15e0:	1f 90       	pop	r1
    15e2:	18 95       	reti

000015e4 <__vector_48>:
 *
 * This function will handle interrupt on Timer Counter E0 error and
 * call the callback function.
 */
ISR(TCE0_ERR_vect)
{
    15e4:	1f 92       	push	r1
    15e6:	0f 92       	push	r0
    15e8:	0f b6       	in	r0, 0x3f	; 63
    15ea:	0f 92       	push	r0
    15ec:	11 24       	eor	r1, r1
    15ee:	0b b6       	in	r0, 0x3b	; 59
    15f0:	0f 92       	push	r0
    15f2:	2f 93       	push	r18
    15f4:	3f 93       	push	r19
    15f6:	4f 93       	push	r20
    15f8:	5f 93       	push	r21
    15fa:	6f 93       	push	r22
    15fc:	7f 93       	push	r23
    15fe:	8f 93       	push	r24
    1600:	9f 93       	push	r25
    1602:	af 93       	push	r26
    1604:	bf 93       	push	r27
    1606:	ef 93       	push	r30
    1608:	ff 93       	push	r31
	if (tc_tce0_err_callback) {
    160a:	e0 91 d8 21 	lds	r30, 0x21D8
    160e:	f0 91 d9 21 	lds	r31, 0x21D9
    1612:	30 97       	sbiw	r30, 0x00	; 0
    1614:	09 f0       	breq	.+2      	; 0x1618 <__vector_48+0x34>
		tc_tce0_err_callback();
    1616:	19 95       	eicall
	}
}
    1618:	ff 91       	pop	r31
    161a:	ef 91       	pop	r30
    161c:	bf 91       	pop	r27
    161e:	af 91       	pop	r26
    1620:	9f 91       	pop	r25
    1622:	8f 91       	pop	r24
    1624:	7f 91       	pop	r23
    1626:	6f 91       	pop	r22
    1628:	5f 91       	pop	r21
    162a:	4f 91       	pop	r20
    162c:	3f 91       	pop	r19
    162e:	2f 91       	pop	r18
    1630:	0f 90       	pop	r0
    1632:	0b be       	out	0x3b, r0	; 59
    1634:	0f 90       	pop	r0
    1636:	0f be       	out	0x3f, r0	; 63
    1638:	0f 90       	pop	r0
    163a:	1f 90       	pop	r1
    163c:	18 95       	reti

0000163e <__vector_49>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCE0_CCA_vect)
{
    163e:	1f 92       	push	r1
    1640:	0f 92       	push	r0
    1642:	0f b6       	in	r0, 0x3f	; 63
    1644:	0f 92       	push	r0
    1646:	11 24       	eor	r1, r1
    1648:	0b b6       	in	r0, 0x3b	; 59
    164a:	0f 92       	push	r0
    164c:	2f 93       	push	r18
    164e:	3f 93       	push	r19
    1650:	4f 93       	push	r20
    1652:	5f 93       	push	r21
    1654:	6f 93       	push	r22
    1656:	7f 93       	push	r23
    1658:	8f 93       	push	r24
    165a:	9f 93       	push	r25
    165c:	af 93       	push	r26
    165e:	bf 93       	push	r27
    1660:	ef 93       	push	r30
    1662:	ff 93       	push	r31
	if (tc_tce0_cca_callback) {
    1664:	e0 91 d6 21 	lds	r30, 0x21D6
    1668:	f0 91 d7 21 	lds	r31, 0x21D7
    166c:	30 97       	sbiw	r30, 0x00	; 0
    166e:	09 f0       	breq	.+2      	; 0x1672 <__vector_49+0x34>
		tc_tce0_cca_callback();
    1670:	19 95       	eicall
	}
}
    1672:	ff 91       	pop	r31
    1674:	ef 91       	pop	r30
    1676:	bf 91       	pop	r27
    1678:	af 91       	pop	r26
    167a:	9f 91       	pop	r25
    167c:	8f 91       	pop	r24
    167e:	7f 91       	pop	r23
    1680:	6f 91       	pop	r22
    1682:	5f 91       	pop	r21
    1684:	4f 91       	pop	r20
    1686:	3f 91       	pop	r19
    1688:	2f 91       	pop	r18
    168a:	0f 90       	pop	r0
    168c:	0b be       	out	0x3b, r0	; 59
    168e:	0f 90       	pop	r0
    1690:	0f be       	out	0x3f, r0	; 63
    1692:	0f 90       	pop	r0
    1694:	1f 90       	pop	r1
    1696:	18 95       	reti

00001698 <__vector_50>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCE0_CCB_vect)
{
    1698:	1f 92       	push	r1
    169a:	0f 92       	push	r0
    169c:	0f b6       	in	r0, 0x3f	; 63
    169e:	0f 92       	push	r0
    16a0:	11 24       	eor	r1, r1
    16a2:	0b b6       	in	r0, 0x3b	; 59
    16a4:	0f 92       	push	r0
    16a6:	2f 93       	push	r18
    16a8:	3f 93       	push	r19
    16aa:	4f 93       	push	r20
    16ac:	5f 93       	push	r21
    16ae:	6f 93       	push	r22
    16b0:	7f 93       	push	r23
    16b2:	8f 93       	push	r24
    16b4:	9f 93       	push	r25
    16b6:	af 93       	push	r26
    16b8:	bf 93       	push	r27
    16ba:	ef 93       	push	r30
    16bc:	ff 93       	push	r31
	if (tc_tce0_ccb_callback) {
    16be:	e0 91 d4 21 	lds	r30, 0x21D4
    16c2:	f0 91 d5 21 	lds	r31, 0x21D5
    16c6:	30 97       	sbiw	r30, 0x00	; 0
    16c8:	09 f0       	breq	.+2      	; 0x16cc <__vector_50+0x34>
		tc_tce0_ccb_callback();
    16ca:	19 95       	eicall
	}
}
    16cc:	ff 91       	pop	r31
    16ce:	ef 91       	pop	r30
    16d0:	bf 91       	pop	r27
    16d2:	af 91       	pop	r26
    16d4:	9f 91       	pop	r25
    16d6:	8f 91       	pop	r24
    16d8:	7f 91       	pop	r23
    16da:	6f 91       	pop	r22
    16dc:	5f 91       	pop	r21
    16de:	4f 91       	pop	r20
    16e0:	3f 91       	pop	r19
    16e2:	2f 91       	pop	r18
    16e4:	0f 90       	pop	r0
    16e6:	0b be       	out	0x3b, r0	; 59
    16e8:	0f 90       	pop	r0
    16ea:	0f be       	out	0x3f, r0	; 63
    16ec:	0f 90       	pop	r0
    16ee:	1f 90       	pop	r1
    16f0:	18 95       	reti

000016f2 <__vector_51>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCE0_CCC_vect)
{
    16f2:	1f 92       	push	r1
    16f4:	0f 92       	push	r0
    16f6:	0f b6       	in	r0, 0x3f	; 63
    16f8:	0f 92       	push	r0
    16fa:	11 24       	eor	r1, r1
    16fc:	0b b6       	in	r0, 0x3b	; 59
    16fe:	0f 92       	push	r0
    1700:	2f 93       	push	r18
    1702:	3f 93       	push	r19
    1704:	4f 93       	push	r20
    1706:	5f 93       	push	r21
    1708:	6f 93       	push	r22
    170a:	7f 93       	push	r23
    170c:	8f 93       	push	r24
    170e:	9f 93       	push	r25
    1710:	af 93       	push	r26
    1712:	bf 93       	push	r27
    1714:	ef 93       	push	r30
    1716:	ff 93       	push	r31
	if (tc_tce0_ccc_callback) {
    1718:	e0 91 d2 21 	lds	r30, 0x21D2
    171c:	f0 91 d3 21 	lds	r31, 0x21D3
    1720:	30 97       	sbiw	r30, 0x00	; 0
    1722:	09 f0       	breq	.+2      	; 0x1726 <__vector_51+0x34>
		tc_tce0_ccc_callback();
    1724:	19 95       	eicall
	}
}
    1726:	ff 91       	pop	r31
    1728:	ef 91       	pop	r30
    172a:	bf 91       	pop	r27
    172c:	af 91       	pop	r26
    172e:	9f 91       	pop	r25
    1730:	8f 91       	pop	r24
    1732:	7f 91       	pop	r23
    1734:	6f 91       	pop	r22
    1736:	5f 91       	pop	r21
    1738:	4f 91       	pop	r20
    173a:	3f 91       	pop	r19
    173c:	2f 91       	pop	r18
    173e:	0f 90       	pop	r0
    1740:	0b be       	out	0x3b, r0	; 59
    1742:	0f 90       	pop	r0
    1744:	0f be       	out	0x3f, r0	; 63
    1746:	0f 90       	pop	r0
    1748:	1f 90       	pop	r1
    174a:	18 95       	reti

0000174c <__vector_52>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCE0_CCD_vect)
{
    174c:	1f 92       	push	r1
    174e:	0f 92       	push	r0
    1750:	0f b6       	in	r0, 0x3f	; 63
    1752:	0f 92       	push	r0
    1754:	11 24       	eor	r1, r1
    1756:	0b b6       	in	r0, 0x3b	; 59
    1758:	0f 92       	push	r0
    175a:	2f 93       	push	r18
    175c:	3f 93       	push	r19
    175e:	4f 93       	push	r20
    1760:	5f 93       	push	r21
    1762:	6f 93       	push	r22
    1764:	7f 93       	push	r23
    1766:	8f 93       	push	r24
    1768:	9f 93       	push	r25
    176a:	af 93       	push	r26
    176c:	bf 93       	push	r27
    176e:	ef 93       	push	r30
    1770:	ff 93       	push	r31
	if (tc_tce0_ccd_callback) {
    1772:	e0 91 d0 21 	lds	r30, 0x21D0
    1776:	f0 91 d1 21 	lds	r31, 0x21D1
    177a:	30 97       	sbiw	r30, 0x00	; 0
    177c:	09 f0       	breq	.+2      	; 0x1780 <__vector_52+0x34>
		tc_tce0_ccd_callback();
    177e:	19 95       	eicall
	}
}
    1780:	ff 91       	pop	r31
    1782:	ef 91       	pop	r30
    1784:	bf 91       	pop	r27
    1786:	af 91       	pop	r26
    1788:	9f 91       	pop	r25
    178a:	8f 91       	pop	r24
    178c:	7f 91       	pop	r23
    178e:	6f 91       	pop	r22
    1790:	5f 91       	pop	r21
    1792:	4f 91       	pop	r20
    1794:	3f 91       	pop	r19
    1796:	2f 91       	pop	r18
    1798:	0f 90       	pop	r0
    179a:	0b be       	out	0x3b, r0	; 59
    179c:	0f 90       	pop	r0
    179e:	0f be       	out	0x3f, r0	; 63
    17a0:	0f 90       	pop	r0
    17a2:	1f 90       	pop	r1
    17a4:	18 95       	reti

000017a6 <__vector_53>:
 *
 * This function will handle interrupt on Timer Counter E1 overflow and
 * call the callback function.
 */
ISR(TCE1_OVF_vect)
{
    17a6:	1f 92       	push	r1
    17a8:	0f 92       	push	r0
    17aa:	0f b6       	in	r0, 0x3f	; 63
    17ac:	0f 92       	push	r0
    17ae:	11 24       	eor	r1, r1
    17b0:	0b b6       	in	r0, 0x3b	; 59
    17b2:	0f 92       	push	r0
    17b4:	2f 93       	push	r18
    17b6:	3f 93       	push	r19
    17b8:	4f 93       	push	r20
    17ba:	5f 93       	push	r21
    17bc:	6f 93       	push	r22
    17be:	7f 93       	push	r23
    17c0:	8f 93       	push	r24
    17c2:	9f 93       	push	r25
    17c4:	af 93       	push	r26
    17c6:	bf 93       	push	r27
    17c8:	ef 93       	push	r30
    17ca:	ff 93       	push	r31
	if (tc_tce1_ovf_callback) {
    17cc:	e0 91 ce 21 	lds	r30, 0x21CE
    17d0:	f0 91 cf 21 	lds	r31, 0x21CF
    17d4:	30 97       	sbiw	r30, 0x00	; 0
    17d6:	09 f0       	breq	.+2      	; 0x17da <__vector_53+0x34>
		tc_tce1_ovf_callback();
    17d8:	19 95       	eicall
	}
}
    17da:	ff 91       	pop	r31
    17dc:	ef 91       	pop	r30
    17de:	bf 91       	pop	r27
    17e0:	af 91       	pop	r26
    17e2:	9f 91       	pop	r25
    17e4:	8f 91       	pop	r24
    17e6:	7f 91       	pop	r23
    17e8:	6f 91       	pop	r22
    17ea:	5f 91       	pop	r21
    17ec:	4f 91       	pop	r20
    17ee:	3f 91       	pop	r19
    17f0:	2f 91       	pop	r18
    17f2:	0f 90       	pop	r0
    17f4:	0b be       	out	0x3b, r0	; 59
    17f6:	0f 90       	pop	r0
    17f8:	0f be       	out	0x3f, r0	; 63
    17fa:	0f 90       	pop	r0
    17fc:	1f 90       	pop	r1
    17fe:	18 95       	reti

00001800 <__vector_54>:
 *
 * This function will handle interrupt on Timer Counter E1 error and
 * call the callback function.
 */
ISR(TCE1_ERR_vect)
{
    1800:	1f 92       	push	r1
    1802:	0f 92       	push	r0
    1804:	0f b6       	in	r0, 0x3f	; 63
    1806:	0f 92       	push	r0
    1808:	11 24       	eor	r1, r1
    180a:	0b b6       	in	r0, 0x3b	; 59
    180c:	0f 92       	push	r0
    180e:	2f 93       	push	r18
    1810:	3f 93       	push	r19
    1812:	4f 93       	push	r20
    1814:	5f 93       	push	r21
    1816:	6f 93       	push	r22
    1818:	7f 93       	push	r23
    181a:	8f 93       	push	r24
    181c:	9f 93       	push	r25
    181e:	af 93       	push	r26
    1820:	bf 93       	push	r27
    1822:	ef 93       	push	r30
    1824:	ff 93       	push	r31
	if (tc_tce1_err_callback) {
    1826:	e0 91 cc 21 	lds	r30, 0x21CC
    182a:	f0 91 cd 21 	lds	r31, 0x21CD
    182e:	30 97       	sbiw	r30, 0x00	; 0
    1830:	09 f0       	breq	.+2      	; 0x1834 <__vector_54+0x34>
		tc_tce1_err_callback();
    1832:	19 95       	eicall
	}
}
    1834:	ff 91       	pop	r31
    1836:	ef 91       	pop	r30
    1838:	bf 91       	pop	r27
    183a:	af 91       	pop	r26
    183c:	9f 91       	pop	r25
    183e:	8f 91       	pop	r24
    1840:	7f 91       	pop	r23
    1842:	6f 91       	pop	r22
    1844:	5f 91       	pop	r21
    1846:	4f 91       	pop	r20
    1848:	3f 91       	pop	r19
    184a:	2f 91       	pop	r18
    184c:	0f 90       	pop	r0
    184e:	0b be       	out	0x3b, r0	; 59
    1850:	0f 90       	pop	r0
    1852:	0f be       	out	0x3f, r0	; 63
    1854:	0f 90       	pop	r0
    1856:	1f 90       	pop	r1
    1858:	18 95       	reti

0000185a <__vector_55>:
 *
 * This function will handle interrupt on Timer Counter E1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCE1_CCA_vect)
{
    185a:	1f 92       	push	r1
    185c:	0f 92       	push	r0
    185e:	0f b6       	in	r0, 0x3f	; 63
    1860:	0f 92       	push	r0
    1862:	11 24       	eor	r1, r1
    1864:	0b b6       	in	r0, 0x3b	; 59
    1866:	0f 92       	push	r0
    1868:	2f 93       	push	r18
    186a:	3f 93       	push	r19
    186c:	4f 93       	push	r20
    186e:	5f 93       	push	r21
    1870:	6f 93       	push	r22
    1872:	7f 93       	push	r23
    1874:	8f 93       	push	r24
    1876:	9f 93       	push	r25
    1878:	af 93       	push	r26
    187a:	bf 93       	push	r27
    187c:	ef 93       	push	r30
    187e:	ff 93       	push	r31
	if (tc_tce1_cca_callback) {
    1880:	e0 91 ca 21 	lds	r30, 0x21CA
    1884:	f0 91 cb 21 	lds	r31, 0x21CB
    1888:	30 97       	sbiw	r30, 0x00	; 0
    188a:	09 f0       	breq	.+2      	; 0x188e <__vector_55+0x34>
		tc_tce1_cca_callback();
    188c:	19 95       	eicall
	}
}
    188e:	ff 91       	pop	r31
    1890:	ef 91       	pop	r30
    1892:	bf 91       	pop	r27
    1894:	af 91       	pop	r26
    1896:	9f 91       	pop	r25
    1898:	8f 91       	pop	r24
    189a:	7f 91       	pop	r23
    189c:	6f 91       	pop	r22
    189e:	5f 91       	pop	r21
    18a0:	4f 91       	pop	r20
    18a2:	3f 91       	pop	r19
    18a4:	2f 91       	pop	r18
    18a6:	0f 90       	pop	r0
    18a8:	0b be       	out	0x3b, r0	; 59
    18aa:	0f 90       	pop	r0
    18ac:	0f be       	out	0x3f, r0	; 63
    18ae:	0f 90       	pop	r0
    18b0:	1f 90       	pop	r1
    18b2:	18 95       	reti

000018b4 <__vector_56>:
 *
 * This function will handle interrupt on Timer Counter E1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCE1_CCB_vect)
{
    18b4:	1f 92       	push	r1
    18b6:	0f 92       	push	r0
    18b8:	0f b6       	in	r0, 0x3f	; 63
    18ba:	0f 92       	push	r0
    18bc:	11 24       	eor	r1, r1
    18be:	0b b6       	in	r0, 0x3b	; 59
    18c0:	0f 92       	push	r0
    18c2:	2f 93       	push	r18
    18c4:	3f 93       	push	r19
    18c6:	4f 93       	push	r20
    18c8:	5f 93       	push	r21
    18ca:	6f 93       	push	r22
    18cc:	7f 93       	push	r23
    18ce:	8f 93       	push	r24
    18d0:	9f 93       	push	r25
    18d2:	af 93       	push	r26
    18d4:	bf 93       	push	r27
    18d6:	ef 93       	push	r30
    18d8:	ff 93       	push	r31
	if (tc_tce1_ccb_callback) {
    18da:	e0 91 c8 21 	lds	r30, 0x21C8
    18de:	f0 91 c9 21 	lds	r31, 0x21C9
    18e2:	30 97       	sbiw	r30, 0x00	; 0
    18e4:	09 f0       	breq	.+2      	; 0x18e8 <__vector_56+0x34>
		tc_tce1_ccb_callback();
    18e6:	19 95       	eicall
	}
}
    18e8:	ff 91       	pop	r31
    18ea:	ef 91       	pop	r30
    18ec:	bf 91       	pop	r27
    18ee:	af 91       	pop	r26
    18f0:	9f 91       	pop	r25
    18f2:	8f 91       	pop	r24
    18f4:	7f 91       	pop	r23
    18f6:	6f 91       	pop	r22
    18f8:	5f 91       	pop	r21
    18fa:	4f 91       	pop	r20
    18fc:	3f 91       	pop	r19
    18fe:	2f 91       	pop	r18
    1900:	0f 90       	pop	r0
    1902:	0b be       	out	0x3b, r0	; 59
    1904:	0f 90       	pop	r0
    1906:	0f be       	out	0x3f, r0	; 63
    1908:	0f 90       	pop	r0
    190a:	1f 90       	pop	r1
    190c:	18 95       	reti

0000190e <__vector_108>:
 *
 * This function will handle interrupt on Timer Counter F0 overflow and
 * call the callback function.
 */
ISR(TCF0_OVF_vect)
{
    190e:	1f 92       	push	r1
    1910:	0f 92       	push	r0
    1912:	0f b6       	in	r0, 0x3f	; 63
    1914:	0f 92       	push	r0
    1916:	11 24       	eor	r1, r1
    1918:	0b b6       	in	r0, 0x3b	; 59
    191a:	0f 92       	push	r0
    191c:	2f 93       	push	r18
    191e:	3f 93       	push	r19
    1920:	4f 93       	push	r20
    1922:	5f 93       	push	r21
    1924:	6f 93       	push	r22
    1926:	7f 93       	push	r23
    1928:	8f 93       	push	r24
    192a:	9f 93       	push	r25
    192c:	af 93       	push	r26
    192e:	bf 93       	push	r27
    1930:	ef 93       	push	r30
    1932:	ff 93       	push	r31
	if (tc_tcf0_ovf_callback) {
    1934:	e0 91 c6 21 	lds	r30, 0x21C6
    1938:	f0 91 c7 21 	lds	r31, 0x21C7
    193c:	30 97       	sbiw	r30, 0x00	; 0
    193e:	09 f0       	breq	.+2      	; 0x1942 <__vector_108+0x34>
		tc_tcf0_ovf_callback();
    1940:	19 95       	eicall
	}
}
    1942:	ff 91       	pop	r31
    1944:	ef 91       	pop	r30
    1946:	bf 91       	pop	r27
    1948:	af 91       	pop	r26
    194a:	9f 91       	pop	r25
    194c:	8f 91       	pop	r24
    194e:	7f 91       	pop	r23
    1950:	6f 91       	pop	r22
    1952:	5f 91       	pop	r21
    1954:	4f 91       	pop	r20
    1956:	3f 91       	pop	r19
    1958:	2f 91       	pop	r18
    195a:	0f 90       	pop	r0
    195c:	0b be       	out	0x3b, r0	; 59
    195e:	0f 90       	pop	r0
    1960:	0f be       	out	0x3f, r0	; 63
    1962:	0f 90       	pop	r0
    1964:	1f 90       	pop	r1
    1966:	18 95       	reti

00001968 <__vector_109>:
 *
 * This function will handle interrupt on Timer Counter F0 error and
 * call the callback function.
 */
ISR(TCF0_ERR_vect)
{
    1968:	1f 92       	push	r1
    196a:	0f 92       	push	r0
    196c:	0f b6       	in	r0, 0x3f	; 63
    196e:	0f 92       	push	r0
    1970:	11 24       	eor	r1, r1
    1972:	0b b6       	in	r0, 0x3b	; 59
    1974:	0f 92       	push	r0
    1976:	2f 93       	push	r18
    1978:	3f 93       	push	r19
    197a:	4f 93       	push	r20
    197c:	5f 93       	push	r21
    197e:	6f 93       	push	r22
    1980:	7f 93       	push	r23
    1982:	8f 93       	push	r24
    1984:	9f 93       	push	r25
    1986:	af 93       	push	r26
    1988:	bf 93       	push	r27
    198a:	ef 93       	push	r30
    198c:	ff 93       	push	r31
	if (tc_tcf0_err_callback) {
    198e:	e0 91 c4 21 	lds	r30, 0x21C4
    1992:	f0 91 c5 21 	lds	r31, 0x21C5
    1996:	30 97       	sbiw	r30, 0x00	; 0
    1998:	09 f0       	breq	.+2      	; 0x199c <__vector_109+0x34>
		tc_tcf0_err_callback();
    199a:	19 95       	eicall
	}
}
    199c:	ff 91       	pop	r31
    199e:	ef 91       	pop	r30
    19a0:	bf 91       	pop	r27
    19a2:	af 91       	pop	r26
    19a4:	9f 91       	pop	r25
    19a6:	8f 91       	pop	r24
    19a8:	7f 91       	pop	r23
    19aa:	6f 91       	pop	r22
    19ac:	5f 91       	pop	r21
    19ae:	4f 91       	pop	r20
    19b0:	3f 91       	pop	r19
    19b2:	2f 91       	pop	r18
    19b4:	0f 90       	pop	r0
    19b6:	0b be       	out	0x3b, r0	; 59
    19b8:	0f 90       	pop	r0
    19ba:	0f be       	out	0x3f, r0	; 63
    19bc:	0f 90       	pop	r0
    19be:	1f 90       	pop	r1
    19c0:	18 95       	reti

000019c2 <__vector_110>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCF0_CCA_vect)
{
    19c2:	1f 92       	push	r1
    19c4:	0f 92       	push	r0
    19c6:	0f b6       	in	r0, 0x3f	; 63
    19c8:	0f 92       	push	r0
    19ca:	11 24       	eor	r1, r1
    19cc:	0b b6       	in	r0, 0x3b	; 59
    19ce:	0f 92       	push	r0
    19d0:	2f 93       	push	r18
    19d2:	3f 93       	push	r19
    19d4:	4f 93       	push	r20
    19d6:	5f 93       	push	r21
    19d8:	6f 93       	push	r22
    19da:	7f 93       	push	r23
    19dc:	8f 93       	push	r24
    19de:	9f 93       	push	r25
    19e0:	af 93       	push	r26
    19e2:	bf 93       	push	r27
    19e4:	ef 93       	push	r30
    19e6:	ff 93       	push	r31
	if (tc_tcf0_cca_callback) {
    19e8:	e0 91 c2 21 	lds	r30, 0x21C2
    19ec:	f0 91 c3 21 	lds	r31, 0x21C3
    19f0:	30 97       	sbiw	r30, 0x00	; 0
    19f2:	09 f0       	breq	.+2      	; 0x19f6 <__vector_110+0x34>
		tc_tcf0_cca_callback();
    19f4:	19 95       	eicall
	}
}
    19f6:	ff 91       	pop	r31
    19f8:	ef 91       	pop	r30
    19fa:	bf 91       	pop	r27
    19fc:	af 91       	pop	r26
    19fe:	9f 91       	pop	r25
    1a00:	8f 91       	pop	r24
    1a02:	7f 91       	pop	r23
    1a04:	6f 91       	pop	r22
    1a06:	5f 91       	pop	r21
    1a08:	4f 91       	pop	r20
    1a0a:	3f 91       	pop	r19
    1a0c:	2f 91       	pop	r18
    1a0e:	0f 90       	pop	r0
    1a10:	0b be       	out	0x3b, r0	; 59
    1a12:	0f 90       	pop	r0
    1a14:	0f be       	out	0x3f, r0	; 63
    1a16:	0f 90       	pop	r0
    1a18:	1f 90       	pop	r1
    1a1a:	18 95       	reti

00001a1c <__vector_111>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCF0_CCB_vect)
{
    1a1c:	1f 92       	push	r1
    1a1e:	0f 92       	push	r0
    1a20:	0f b6       	in	r0, 0x3f	; 63
    1a22:	0f 92       	push	r0
    1a24:	11 24       	eor	r1, r1
    1a26:	0b b6       	in	r0, 0x3b	; 59
    1a28:	0f 92       	push	r0
    1a2a:	2f 93       	push	r18
    1a2c:	3f 93       	push	r19
    1a2e:	4f 93       	push	r20
    1a30:	5f 93       	push	r21
    1a32:	6f 93       	push	r22
    1a34:	7f 93       	push	r23
    1a36:	8f 93       	push	r24
    1a38:	9f 93       	push	r25
    1a3a:	af 93       	push	r26
    1a3c:	bf 93       	push	r27
    1a3e:	ef 93       	push	r30
    1a40:	ff 93       	push	r31
	if (tc_tcf0_ccb_callback) {
    1a42:	e0 91 c0 21 	lds	r30, 0x21C0
    1a46:	f0 91 c1 21 	lds	r31, 0x21C1
    1a4a:	30 97       	sbiw	r30, 0x00	; 0
    1a4c:	09 f0       	breq	.+2      	; 0x1a50 <__vector_111+0x34>
		tc_tcf0_ccb_callback();
    1a4e:	19 95       	eicall
	}
}
    1a50:	ff 91       	pop	r31
    1a52:	ef 91       	pop	r30
    1a54:	bf 91       	pop	r27
    1a56:	af 91       	pop	r26
    1a58:	9f 91       	pop	r25
    1a5a:	8f 91       	pop	r24
    1a5c:	7f 91       	pop	r23
    1a5e:	6f 91       	pop	r22
    1a60:	5f 91       	pop	r21
    1a62:	4f 91       	pop	r20
    1a64:	3f 91       	pop	r19
    1a66:	2f 91       	pop	r18
    1a68:	0f 90       	pop	r0
    1a6a:	0b be       	out	0x3b, r0	; 59
    1a6c:	0f 90       	pop	r0
    1a6e:	0f be       	out	0x3f, r0	; 63
    1a70:	0f 90       	pop	r0
    1a72:	1f 90       	pop	r1
    1a74:	18 95       	reti

00001a76 <__vector_112>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCF0_CCC_vect)
{
    1a76:	1f 92       	push	r1
    1a78:	0f 92       	push	r0
    1a7a:	0f b6       	in	r0, 0x3f	; 63
    1a7c:	0f 92       	push	r0
    1a7e:	11 24       	eor	r1, r1
    1a80:	0b b6       	in	r0, 0x3b	; 59
    1a82:	0f 92       	push	r0
    1a84:	2f 93       	push	r18
    1a86:	3f 93       	push	r19
    1a88:	4f 93       	push	r20
    1a8a:	5f 93       	push	r21
    1a8c:	6f 93       	push	r22
    1a8e:	7f 93       	push	r23
    1a90:	8f 93       	push	r24
    1a92:	9f 93       	push	r25
    1a94:	af 93       	push	r26
    1a96:	bf 93       	push	r27
    1a98:	ef 93       	push	r30
    1a9a:	ff 93       	push	r31
	if (tc_tcf0_ccc_callback) {
    1a9c:	e0 91 be 21 	lds	r30, 0x21BE
    1aa0:	f0 91 bf 21 	lds	r31, 0x21BF
    1aa4:	30 97       	sbiw	r30, 0x00	; 0
    1aa6:	09 f0       	breq	.+2      	; 0x1aaa <__vector_112+0x34>
		tc_tcf0_ccc_callback();
    1aa8:	19 95       	eicall
	}
}
    1aaa:	ff 91       	pop	r31
    1aac:	ef 91       	pop	r30
    1aae:	bf 91       	pop	r27
    1ab0:	af 91       	pop	r26
    1ab2:	9f 91       	pop	r25
    1ab4:	8f 91       	pop	r24
    1ab6:	7f 91       	pop	r23
    1ab8:	6f 91       	pop	r22
    1aba:	5f 91       	pop	r21
    1abc:	4f 91       	pop	r20
    1abe:	3f 91       	pop	r19
    1ac0:	2f 91       	pop	r18
    1ac2:	0f 90       	pop	r0
    1ac4:	0b be       	out	0x3b, r0	; 59
    1ac6:	0f 90       	pop	r0
    1ac8:	0f be       	out	0x3f, r0	; 63
    1aca:	0f 90       	pop	r0
    1acc:	1f 90       	pop	r1
    1ace:	18 95       	reti

00001ad0 <__vector_113>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCF0_CCD_vect)
{
    1ad0:	1f 92       	push	r1
    1ad2:	0f 92       	push	r0
    1ad4:	0f b6       	in	r0, 0x3f	; 63
    1ad6:	0f 92       	push	r0
    1ad8:	11 24       	eor	r1, r1
    1ada:	0b b6       	in	r0, 0x3b	; 59
    1adc:	0f 92       	push	r0
    1ade:	2f 93       	push	r18
    1ae0:	3f 93       	push	r19
    1ae2:	4f 93       	push	r20
    1ae4:	5f 93       	push	r21
    1ae6:	6f 93       	push	r22
    1ae8:	7f 93       	push	r23
    1aea:	8f 93       	push	r24
    1aec:	9f 93       	push	r25
    1aee:	af 93       	push	r26
    1af0:	bf 93       	push	r27
    1af2:	ef 93       	push	r30
    1af4:	ff 93       	push	r31
	if (tc_tcf0_ccd_callback) {
    1af6:	e0 91 bc 21 	lds	r30, 0x21BC
    1afa:	f0 91 bd 21 	lds	r31, 0x21BD
    1afe:	30 97       	sbiw	r30, 0x00	; 0
    1b00:	09 f0       	breq	.+2      	; 0x1b04 <__vector_113+0x34>
		tc_tcf0_ccd_callback();
    1b02:	19 95       	eicall
	}
}
    1b04:	ff 91       	pop	r31
    1b06:	ef 91       	pop	r30
    1b08:	bf 91       	pop	r27
    1b0a:	af 91       	pop	r26
    1b0c:	9f 91       	pop	r25
    1b0e:	8f 91       	pop	r24
    1b10:	7f 91       	pop	r23
    1b12:	6f 91       	pop	r22
    1b14:	5f 91       	pop	r21
    1b16:	4f 91       	pop	r20
    1b18:	3f 91       	pop	r19
    1b1a:	2f 91       	pop	r18
    1b1c:	0f 90       	pop	r0
    1b1e:	0b be       	out	0x3b, r0	; 59
    1b20:	0f 90       	pop	r0
    1b22:	0f be       	out	0x3f, r0	; 63
    1b24:	0f 90       	pop	r0
    1b26:	1f 90       	pop	r1
    1b28:	18 95       	reti

00001b2a <tc_enable>:
 *
 * \note
 * unmask TC clock (sysclk), but does not configure the TC clock source.
 */
void tc_enable(volatile void *tc)
{
    1b2a:	cf 93       	push	r28

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    1b2c:	cf b7       	in	r28, 0x3f	; 63
	cpu_irq_disable();
    1b2e:	f8 94       	cli
	irqflags_t iflags = cpu_irq_save();

#ifdef TCC0
	if ((uintptr_t) tc == (uintptr_t) & TCC0) {
    1b30:	28 2f       	mov	r18, r24
    1b32:	39 2f       	mov	r19, r25
    1b34:	21 15       	cp	r18, r1
    1b36:	88 e0       	ldi	r24, 0x08	; 8
    1b38:	38 07       	cpc	r19, r24
    1b3a:	49 f4       	brne	.+18     	; 0x1b4e <tc_enable+0x24>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    1b3c:	61 e0       	ldi	r22, 0x01	; 1
    1b3e:	83 e0       	ldi	r24, 0x03	; 3
    1b40:	0e 94 af 1a 	call	0x355e	; 0x355e <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    1b44:	64 e0       	ldi	r22, 0x04	; 4
    1b46:	83 e0       	ldi	r24, 0x03	; 3
    1b48:	0e 94 af 1a 	call	0x355e	; 0x355e <sysclk_enable_module>
    1b4c:	4f c0       	rjmp	.+158    	; 0x1bec <tc_enable+0xc2>
	} else
#endif
#ifdef TCC1
	if ((uintptr_t) tc == (uintptr_t) & TCC1) {
    1b4e:	20 34       	cpi	r18, 0x40	; 64
    1b50:	88 e0       	ldi	r24, 0x08	; 8
    1b52:	38 07       	cpc	r19, r24
    1b54:	49 f4       	brne	.+18     	; 0x1b68 <tc_enable+0x3e>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    1b56:	62 e0       	ldi	r22, 0x02	; 2
    1b58:	83 e0       	ldi	r24, 0x03	; 3
    1b5a:	0e 94 af 1a 	call	0x355e	; 0x355e <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    1b5e:	64 e0       	ldi	r22, 0x04	; 4
    1b60:	83 e0       	ldi	r24, 0x03	; 3
    1b62:	0e 94 af 1a 	call	0x355e	; 0x355e <sysclk_enable_module>
    1b66:	42 c0       	rjmp	.+132    	; 0x1bec <tc_enable+0xc2>
	} else
#endif
#ifdef TCD0
	if ((uintptr_t) tc == (uintptr_t) & TCD0) {
    1b68:	21 15       	cp	r18, r1
    1b6a:	89 e0       	ldi	r24, 0x09	; 9
    1b6c:	38 07       	cpc	r19, r24
    1b6e:	49 f4       	brne	.+18     	; 0x1b82 <tc_enable+0x58>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    1b70:	61 e0       	ldi	r22, 0x01	; 1
    1b72:	84 e0       	ldi	r24, 0x04	; 4
    1b74:	0e 94 af 1a 	call	0x355e	; 0x355e <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    1b78:	64 e0       	ldi	r22, 0x04	; 4
    1b7a:	84 e0       	ldi	r24, 0x04	; 4
    1b7c:	0e 94 af 1a 	call	0x355e	; 0x355e <sysclk_enable_module>
    1b80:	35 c0       	rjmp	.+106    	; 0x1bec <tc_enable+0xc2>
	} else
#endif
#ifdef TCD1
	if ((uintptr_t) tc == (uintptr_t) & TCD1) {
    1b82:	20 34       	cpi	r18, 0x40	; 64
    1b84:	89 e0       	ldi	r24, 0x09	; 9
    1b86:	38 07       	cpc	r19, r24
    1b88:	49 f4       	brne	.+18     	; 0x1b9c <tc_enable+0x72>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
    1b8a:	62 e0       	ldi	r22, 0x02	; 2
    1b8c:	84 e0       	ldi	r24, 0x04	; 4
    1b8e:	0e 94 af 1a 	call	0x355e	; 0x355e <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    1b92:	64 e0       	ldi	r22, 0x04	; 4
    1b94:	84 e0       	ldi	r24, 0x04	; 4
    1b96:	0e 94 af 1a 	call	0x355e	; 0x355e <sysclk_enable_module>
    1b9a:	28 c0       	rjmp	.+80     	; 0x1bec <tc_enable+0xc2>
	} else
#endif
#ifdef TCE0
	if ((uintptr_t) tc == (uintptr_t) & TCE0) {
    1b9c:	21 15       	cp	r18, r1
    1b9e:	8a e0       	ldi	r24, 0x0A	; 10
    1ba0:	38 07       	cpc	r19, r24
    1ba2:	49 f4       	brne	.+18     	; 0x1bb6 <tc_enable+0x8c>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    1ba4:	61 e0       	ldi	r22, 0x01	; 1
    1ba6:	85 e0       	ldi	r24, 0x05	; 5
    1ba8:	0e 94 af 1a 	call	0x355e	; 0x355e <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    1bac:	64 e0       	ldi	r22, 0x04	; 4
    1bae:	85 e0       	ldi	r24, 0x05	; 5
    1bb0:	0e 94 af 1a 	call	0x355e	; 0x355e <sysclk_enable_module>
    1bb4:	1b c0       	rjmp	.+54     	; 0x1bec <tc_enable+0xc2>
	} else
#endif
#ifdef TCE1
	if ((uintptr_t) tc == (uintptr_t) & TCE1) {
    1bb6:	20 34       	cpi	r18, 0x40	; 64
    1bb8:	8a e0       	ldi	r24, 0x0A	; 10
    1bba:	38 07       	cpc	r19, r24
    1bbc:	49 f4       	brne	.+18     	; 0x1bd0 <tc_enable+0xa6>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
    1bbe:	62 e0       	ldi	r22, 0x02	; 2
    1bc0:	85 e0       	ldi	r24, 0x05	; 5
    1bc2:	0e 94 af 1a 	call	0x355e	; 0x355e <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    1bc6:	64 e0       	ldi	r22, 0x04	; 4
    1bc8:	85 e0       	ldi	r24, 0x05	; 5
    1bca:	0e 94 af 1a 	call	0x355e	; 0x355e <sysclk_enable_module>
    1bce:	0e c0       	rjmp	.+28     	; 0x1bec <tc_enable+0xc2>
	} else
#endif
#ifdef TCF0
	if ((uintptr_t) tc == (uintptr_t) & TCF0) {
    1bd0:	21 15       	cp	r18, r1
    1bd2:	3b 40       	sbci	r19, 0x0B	; 11
    1bd4:	49 f4       	brne	.+18     	; 0x1be8 <tc_enable+0xbe>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
    1bd6:	61 e0       	ldi	r22, 0x01	; 1
    1bd8:	86 e0       	ldi	r24, 0x06	; 6
    1bda:	0e 94 af 1a 	call	0x355e	; 0x355e <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
    1bde:	64 e0       	ldi	r22, 0x04	; 4
    1be0:	86 e0       	ldi	r24, 0x06	; 6
    1be2:	0e 94 af 1a 	call	0x355e	; 0x355e <sysclk_enable_module>
    1be6:	02 c0       	rjmp	.+4      	; 0x1bec <tc_enable+0xc2>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1be8:	cf bf       	out	0x3f, r28	; 63
    1bea:	09 c0       	rjmp	.+18     	; 0x1bfe <tc_enable+0xd4>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    1bec:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    1bee:	f8 94       	cli
	Assert(sleepmgr_locks[mode] < 0xff);

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
    1bf0:	e2 e5       	ldi	r30, 0x52	; 82
    1bf2:	f3 e2       	ldi	r31, 0x23	; 35
    1bf4:	90 81       	ld	r25, Z
    1bf6:	9f 5f       	subi	r25, 0xFF	; 255
    1bf8:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1bfa:	8f bf       	out	0x3f, r24	; 63
    1bfc:	cf bf       	out	0x3f, r28	; 63
		cpu_irq_restore(iflags);
		return;
	}
	sleepmgr_lock_mode(SLEEPMGR_IDLE);
	cpu_irq_restore(iflags);
}
    1bfe:	cf 91       	pop	r28
    1c00:	08 95       	ret

00001c02 <pwm_set_frequency>:
 *
 * \param config Pointer to PWM configuration.
 * \param freq_hz Wanted PWM frequency in Hz.
 */
void pwm_set_frequency(struct pwm_config *config, uint16_t freq_hz)
{
    1c02:	cf 92       	push	r12
    1c04:	df 92       	push	r13
    1c06:	ef 92       	push	r14
    1c08:	ff 92       	push	r15
    1c0a:	cf 93       	push	r28
    1c0c:	df 93       	push	r29
    1c0e:	ec 01       	movw	r28, r24
	/* Avoid division by zero. */
	Assert(freq_hz != 0);

	/* Calculate the smallest divider for the requested frequency
	   related to the CPU frequency */
	smallest_div = cpu_hz / freq_hz / 0xFFFF;
    1c10:	6b 01       	movw	r12, r22
    1c12:	e1 2c       	mov	r14, r1
    1c14:	f1 2c       	mov	r15, r1
    1c16:	60 e0       	ldi	r22, 0x00	; 0
    1c18:	76 e3       	ldi	r23, 0x36	; 54
    1c1a:	8e e6       	ldi	r24, 0x6E	; 110
    1c1c:	91 e0       	ldi	r25, 0x01	; 1
    1c1e:	a7 01       	movw	r20, r14
    1c20:	96 01       	movw	r18, r12
    1c22:	0e 94 ea 1c 	call	0x39d4	; 0x39d4 <__udivmodsi4>
    1c26:	ca 01       	movw	r24, r20
    1c28:	b9 01       	movw	r22, r18
    1c2a:	2f ef       	ldi	r18, 0xFF	; 255
    1c2c:	3f ef       	ldi	r19, 0xFF	; 255
    1c2e:	40 e0       	ldi	r20, 0x00	; 0
    1c30:	50 e0       	ldi	r21, 0x00	; 0
    1c32:	0e 94 ea 1c 	call	0x39d4	; 0x39d4 <__udivmodsi4>
	if (smallest_div < 1) {
    1c36:	21 15       	cp	r18, r1
    1c38:	31 05       	cpc	r19, r1
    1c3a:	29 f4       	brne	.+10     	; 0x1c46 <pwm_set_frequency+0x44>
		dividor = 1;
		config->clk_sel = PWM_CLK_DIV1;
    1c3c:	81 e0       	ldi	r24, 0x01	; 1
    1c3e:	8c 83       	std	Y+4, r24	; 0x04

	/* Calculate the smallest divider for the requested frequency
	   related to the CPU frequency */
	smallest_div = cpu_hz / freq_hz / 0xFFFF;
	if (smallest_div < 1) {
		dividor = 1;
    1c40:	21 e0       	ldi	r18, 0x01	; 1
    1c42:	30 e0       	ldi	r19, 0x00	; 0
    1c44:	2d c0       	rjmp	.+90     	; 0x1ca0 <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV1;
	} else if (smallest_div < 2) {
    1c46:	22 30       	cpi	r18, 0x02	; 2
    1c48:	31 05       	cpc	r19, r1
    1c4a:	28 f4       	brcc	.+10     	; 0x1c56 <pwm_set_frequency+0x54>
		dividor = 2;
		config->clk_sel = PWM_CLK_DIV2;
    1c4c:	82 e0       	ldi	r24, 0x02	; 2
    1c4e:	8c 83       	std	Y+4, r24	; 0x04
	smallest_div = cpu_hz / freq_hz / 0xFFFF;
	if (smallest_div < 1) {
		dividor = 1;
		config->clk_sel = PWM_CLK_DIV1;
	} else if (smallest_div < 2) {
		dividor = 2;
    1c50:	22 e0       	ldi	r18, 0x02	; 2
    1c52:	30 e0       	ldi	r19, 0x00	; 0
    1c54:	25 c0       	rjmp	.+74     	; 0x1ca0 <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV2;
	} else if (smallest_div < 4) {
    1c56:	24 30       	cpi	r18, 0x04	; 4
    1c58:	31 05       	cpc	r19, r1
    1c5a:	28 f4       	brcc	.+10     	; 0x1c66 <pwm_set_frequency+0x64>
		dividor = 4;
		config->clk_sel = PWM_CLK_DIV4;
    1c5c:	83 e0       	ldi	r24, 0x03	; 3
    1c5e:	8c 83       	std	Y+4, r24	; 0x04
		config->clk_sel = PWM_CLK_DIV1;
	} else if (smallest_div < 2) {
		dividor = 2;
		config->clk_sel = PWM_CLK_DIV2;
	} else if (smallest_div < 4) {
		dividor = 4;
    1c60:	24 e0       	ldi	r18, 0x04	; 4
    1c62:	30 e0       	ldi	r19, 0x00	; 0
    1c64:	1d c0       	rjmp	.+58     	; 0x1ca0 <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV4;
	} else if (smallest_div < 8) {
    1c66:	28 30       	cpi	r18, 0x08	; 8
    1c68:	31 05       	cpc	r19, r1
    1c6a:	28 f4       	brcc	.+10     	; 0x1c76 <pwm_set_frequency+0x74>
		dividor = 8;
		config->clk_sel = PWM_CLK_DIV8;
    1c6c:	84 e0       	ldi	r24, 0x04	; 4
    1c6e:	8c 83       	std	Y+4, r24	; 0x04
		config->clk_sel = PWM_CLK_DIV2;
	} else if (smallest_div < 4) {
		dividor = 4;
		config->clk_sel = PWM_CLK_DIV4;
	} else if (smallest_div < 8) {
		dividor = 8;
    1c70:	28 e0       	ldi	r18, 0x08	; 8
    1c72:	30 e0       	ldi	r19, 0x00	; 0
    1c74:	15 c0       	rjmp	.+42     	; 0x1ca0 <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV8;
	} else if (smallest_div < 64) {
    1c76:	20 34       	cpi	r18, 0x40	; 64
    1c78:	31 05       	cpc	r19, r1
    1c7a:	28 f4       	brcc	.+10     	; 0x1c86 <pwm_set_frequency+0x84>
		dividor = 64;
		config->clk_sel = PWM_CLK_DIV64;
    1c7c:	85 e0       	ldi	r24, 0x05	; 5
    1c7e:	8c 83       	std	Y+4, r24	; 0x04
		config->clk_sel = PWM_CLK_DIV4;
	} else if (smallest_div < 8) {
		dividor = 8;
		config->clk_sel = PWM_CLK_DIV8;
	} else if (smallest_div < 64) {
		dividor = 64;
    1c80:	20 e4       	ldi	r18, 0x40	; 64
    1c82:	30 e0       	ldi	r19, 0x00	; 0
    1c84:	0d c0       	rjmp	.+26     	; 0x1ca0 <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV64;
	} else if (smallest_div < 256) {
    1c86:	2f 3f       	cpi	r18, 0xFF	; 255
    1c88:	31 05       	cpc	r19, r1
    1c8a:	09 f0       	breq	.+2      	; 0x1c8e <pwm_set_frequency+0x8c>
    1c8c:	28 f4       	brcc	.+10     	; 0x1c98 <pwm_set_frequency+0x96>
		dividor = 256;
		config->clk_sel = PWM_CLK_DIV256;
    1c8e:	86 e0       	ldi	r24, 0x06	; 6
    1c90:	8c 83       	std	Y+4, r24	; 0x04
		config->clk_sel = PWM_CLK_DIV8;
	} else if (smallest_div < 64) {
		dividor = 64;
		config->clk_sel = PWM_CLK_DIV64;
	} else if (smallest_div < 256) {
		dividor = 256;
    1c92:	20 e0       	ldi	r18, 0x00	; 0
    1c94:	31 e0       	ldi	r19, 0x01	; 1
    1c96:	04 c0       	rjmp	.+8      	; 0x1ca0 <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV256;
	} else {
		dividor = 1024;
		config->clk_sel = PWM_CLK_DIV1024;
    1c98:	87 e0       	ldi	r24, 0x07	; 7
    1c9a:	8c 83       	std	Y+4, r24	; 0x04
		config->clk_sel = PWM_CLK_DIV64;
	} else if (smallest_div < 256) {
		dividor = 256;
		config->clk_sel = PWM_CLK_DIV256;
	} else {
		dividor = 1024;
    1c9c:	20 e0       	ldi	r18, 0x00	; 0
    1c9e:	34 e0       	ldi	r19, 0x04	; 4
		config->clk_sel = PWM_CLK_DIV1024;
	}

	/* Calculate the period from the just found divider */
	config->period = cpu_hz / dividor / freq_hz;
    1ca0:	40 e0       	ldi	r20, 0x00	; 0
    1ca2:	50 e0       	ldi	r21, 0x00	; 0
    1ca4:	60 e0       	ldi	r22, 0x00	; 0
    1ca6:	76 e3       	ldi	r23, 0x36	; 54
    1ca8:	8e e6       	ldi	r24, 0x6E	; 110
    1caa:	91 e0       	ldi	r25, 0x01	; 1
    1cac:	0e 94 ea 1c 	call	0x39d4	; 0x39d4 <__udivmodsi4>
    1cb0:	ca 01       	movw	r24, r20
    1cb2:	b9 01       	movw	r22, r18
    1cb4:	a7 01       	movw	r20, r14
    1cb6:	96 01       	movw	r18, r12
    1cb8:	0e 94 ea 1c 	call	0x39d4	; 0x39d4 <__udivmodsi4>
    1cbc:	2d 83       	std	Y+5, r18	; 0x05
    1cbe:	3e 83       	std	Y+6, r19	; 0x06

	/* Make sure our period is at least 100 ticks so we are able to provide
	   a full range (0-100% duty cycle */
	if (config->period < 100) {
    1cc0:	24 36       	cpi	r18, 0x64	; 100
    1cc2:	31 05       	cpc	r19, r1
    1cc4:	18 f4       	brcc	.+6      	; 0x1ccc <pwm_set_frequency+0xca>
		/* The period is too short. */
		config->clk_sel = PWM_CLK_OFF;
    1cc6:	1c 82       	std	Y+4, r1	; 0x04
		config->period = 0;
    1cc8:	1d 82       	std	Y+5, r1	; 0x05
    1cca:	1e 82       	std	Y+6, r1	; 0x06
		Assert(false);
	}
}
    1ccc:	df 91       	pop	r29
    1cce:	cf 91       	pop	r28
    1cd0:	ff 90       	pop	r15
    1cd2:	ef 90       	pop	r14
    1cd4:	df 90       	pop	r13
    1cd6:	cf 90       	pop	r12
    1cd8:	08 95       	ret

00001cda <pwm_init>:
 * \param channel \ref pwm_channel_t "CC channel" to use for this PWM.
 * \param freq_hz Frequency to use for this PWM.
  */
void pwm_init(struct pwm_config *config, enum pwm_tc_t tc,
		enum pwm_channel_t channel, uint16_t freq_hz)
{
    1cda:	ef 92       	push	r14
    1cdc:	ff 92       	push	r15
    1cde:	0f 93       	push	r16
    1ce0:	1f 93       	push	r17
    1ce2:	cf 93       	push	r28
    1ce4:	df 93       	push	r29
    1ce6:	ec 01       	movw	r28, r24
    1ce8:	79 01       	movw	r14, r18

	/* Set TC and correct I/O pin to output */
 /**
 * Support and FAQ: visit <a href="http://www.atmel.com/design-support/">Atmel Support</a>
 */
	switch (tc) {
    1cea:	06 2f       	mov	r16, r22
    1cec:	10 e0       	ldi	r17, 0x00	; 0
    1cee:	07 30       	cpi	r16, 0x07	; 7
    1cf0:	11 05       	cpc	r17, r1
    1cf2:	08 f0       	brcs	.+2      	; 0x1cf6 <pwm_init+0x1c>
    1cf4:	97 c0       	rjmp	.+302    	; 0x1e24 <pwm_init+0x14a>
    1cf6:	f8 01       	movw	r30, r16
    1cf8:	e2 50       	subi	r30, 0x02	; 2
    1cfa:	ff 4f       	sbci	r31, 0xFF	; 255
    1cfc:	0c 94 0c 1d 	jmp	0x3a18	; 0x3a18 <__tablejump2__>
#if defined(TCC0)
	case PWM_TCC0:
		config->tc = &TCC0;
    1d00:	80 e0       	ldi	r24, 0x00	; 0
    1d02:	98 e0       	ldi	r25, 0x08	; 8
    1d04:	88 83       	st	Y, r24
    1d06:	99 83       	std	Y+1, r25	; 0x01
		PORTC.DIR |= (1 << (channel-1));
    1d08:	e0 e4       	ldi	r30, 0x40	; 64
    1d0a:	f6 e0       	ldi	r31, 0x06	; 6
    1d0c:	50 81       	ld	r21, Z
    1d0e:	21 e0       	ldi	r18, 0x01	; 1
    1d10:	30 e0       	ldi	r19, 0x00	; 0
    1d12:	8f ef       	ldi	r24, 0xFF	; 255
    1d14:	84 0f       	add	r24, r20
    1d16:	b9 01       	movw	r22, r18
    1d18:	02 c0       	rjmp	.+4      	; 0x1d1e <pwm_init+0x44>
    1d1a:	66 0f       	add	r22, r22
    1d1c:	77 1f       	adc	r23, r23
    1d1e:	8a 95       	dec	r24
    1d20:	e2 f7       	brpl	.-8      	; 0x1d1a <pwm_init+0x40>
    1d22:	cb 01       	movw	r24, r22
    1d24:	85 2b       	or	r24, r21
    1d26:	80 83       	st	Z, r24
		num_chan = 4;
		break;
    1d28:	7d c0       	rjmp	.+250    	; 0x1e24 <pwm_init+0x14a>
#endif
#if defined(TCC1)
	case PWM_TCC1:
		config->tc = &TCC1;
    1d2a:	80 e4       	ldi	r24, 0x40	; 64
    1d2c:	98 e0       	ldi	r25, 0x08	; 8
    1d2e:	88 83       	st	Y, r24
    1d30:	99 83       	std	Y+1, r25	; 0x01
		PORTC.DIR |= (1 << (channel+3));
    1d32:	e0 e4       	ldi	r30, 0x40	; 64
    1d34:	f6 e0       	ldi	r31, 0x06	; 6
    1d36:	50 81       	ld	r21, Z
    1d38:	21 e0       	ldi	r18, 0x01	; 1
    1d3a:	30 e0       	ldi	r19, 0x00	; 0
    1d3c:	83 e0       	ldi	r24, 0x03	; 3
    1d3e:	84 0f       	add	r24, r20
    1d40:	b9 01       	movw	r22, r18
    1d42:	02 c0       	rjmp	.+4      	; 0x1d48 <pwm_init+0x6e>
    1d44:	66 0f       	add	r22, r22
    1d46:	77 1f       	adc	r23, r23
    1d48:	8a 95       	dec	r24
    1d4a:	e2 f7       	brpl	.-8      	; 0x1d44 <pwm_init+0x6a>
    1d4c:	cb 01       	movw	r24, r22
    1d4e:	85 2b       	or	r24, r21
    1d50:	80 83       	st	Z, r24
		num_chan = 2;
		break;
    1d52:	68 c0       	rjmp	.+208    	; 0x1e24 <pwm_init+0x14a>
#endif
#if defined(TCD0)
	case PWM_TCD0:
		config->tc = &TCD0;
    1d54:	80 e0       	ldi	r24, 0x00	; 0
    1d56:	99 e0       	ldi	r25, 0x09	; 9
    1d58:	88 83       	st	Y, r24
    1d5a:	99 83       	std	Y+1, r25	; 0x01
		PORTD.DIR |= (1 << (channel-1));
    1d5c:	e0 e6       	ldi	r30, 0x60	; 96
    1d5e:	f6 e0       	ldi	r31, 0x06	; 6
    1d60:	50 81       	ld	r21, Z
    1d62:	21 e0       	ldi	r18, 0x01	; 1
    1d64:	30 e0       	ldi	r19, 0x00	; 0
    1d66:	8f ef       	ldi	r24, 0xFF	; 255
    1d68:	84 0f       	add	r24, r20
    1d6a:	b9 01       	movw	r22, r18
    1d6c:	02 c0       	rjmp	.+4      	; 0x1d72 <pwm_init+0x98>
    1d6e:	66 0f       	add	r22, r22
    1d70:	77 1f       	adc	r23, r23
    1d72:	8a 95       	dec	r24
    1d74:	e2 f7       	brpl	.-8      	; 0x1d6e <pwm_init+0x94>
    1d76:	cb 01       	movw	r24, r22
    1d78:	85 2b       	or	r24, r21
    1d7a:	80 83       	st	Z, r24
		num_chan = 4;
		break;
    1d7c:	53 c0       	rjmp	.+166    	; 0x1e24 <pwm_init+0x14a>
#endif
#if defined(TCD1)
	case PWM_TCD1:
		config->tc = &TCD1;
    1d7e:	80 e4       	ldi	r24, 0x40	; 64
    1d80:	99 e0       	ldi	r25, 0x09	; 9
    1d82:	88 83       	st	Y, r24
    1d84:	99 83       	std	Y+1, r25	; 0x01
		PORTD.DIR |= (1 << (channel+3));
    1d86:	e0 e6       	ldi	r30, 0x60	; 96
    1d88:	f6 e0       	ldi	r31, 0x06	; 6
    1d8a:	50 81       	ld	r21, Z
    1d8c:	21 e0       	ldi	r18, 0x01	; 1
    1d8e:	30 e0       	ldi	r19, 0x00	; 0
    1d90:	83 e0       	ldi	r24, 0x03	; 3
    1d92:	84 0f       	add	r24, r20
    1d94:	b9 01       	movw	r22, r18
    1d96:	02 c0       	rjmp	.+4      	; 0x1d9c <pwm_init+0xc2>
    1d98:	66 0f       	add	r22, r22
    1d9a:	77 1f       	adc	r23, r23
    1d9c:	8a 95       	dec	r24
    1d9e:	e2 f7       	brpl	.-8      	; 0x1d98 <pwm_init+0xbe>
    1da0:	cb 01       	movw	r24, r22
    1da2:	85 2b       	or	r24, r21
    1da4:	80 83       	st	Z, r24
		num_chan = 2;
		break;
    1da6:	3e c0       	rjmp	.+124    	; 0x1e24 <pwm_init+0x14a>
#endif

#if defined(TCE0)
	case PWM_TCE0:
		config->tc = &TCE0;
    1da8:	80 e0       	ldi	r24, 0x00	; 0
    1daa:	9a e0       	ldi	r25, 0x0A	; 10
    1dac:	88 83       	st	Y, r24
    1dae:	99 83       	std	Y+1, r25	; 0x01
		PORTE.DIR |= (1 << (channel-1));
    1db0:	e0 e8       	ldi	r30, 0x80	; 128
    1db2:	f6 e0       	ldi	r31, 0x06	; 6
    1db4:	50 81       	ld	r21, Z
    1db6:	21 e0       	ldi	r18, 0x01	; 1
    1db8:	30 e0       	ldi	r19, 0x00	; 0
    1dba:	8f ef       	ldi	r24, 0xFF	; 255
    1dbc:	84 0f       	add	r24, r20
    1dbe:	b9 01       	movw	r22, r18
    1dc0:	02 c0       	rjmp	.+4      	; 0x1dc6 <pwm_init+0xec>
    1dc2:	66 0f       	add	r22, r22
    1dc4:	77 1f       	adc	r23, r23
    1dc6:	8a 95       	dec	r24
    1dc8:	e2 f7       	brpl	.-8      	; 0x1dc2 <pwm_init+0xe8>
    1dca:	cb 01       	movw	r24, r22
    1dcc:	85 2b       	or	r24, r21
    1dce:	80 83       	st	Z, r24
		num_chan = 4;
		break;
    1dd0:	29 c0       	rjmp	.+82     	; 0x1e24 <pwm_init+0x14a>
#endif
#if defined(TCE1)
	case PWM_TCE1:
		config->tc = &TCE1;
    1dd2:	80 e4       	ldi	r24, 0x40	; 64
    1dd4:	9a e0       	ldi	r25, 0x0A	; 10
    1dd6:	88 83       	st	Y, r24
    1dd8:	99 83       	std	Y+1, r25	; 0x01
		PORTE.DIR |= (1 << (channel+3));
    1dda:	e0 e8       	ldi	r30, 0x80	; 128
    1ddc:	f6 e0       	ldi	r31, 0x06	; 6
    1dde:	50 81       	ld	r21, Z
    1de0:	21 e0       	ldi	r18, 0x01	; 1
    1de2:	30 e0       	ldi	r19, 0x00	; 0
    1de4:	83 e0       	ldi	r24, 0x03	; 3
    1de6:	84 0f       	add	r24, r20
    1de8:	b9 01       	movw	r22, r18
    1dea:	02 c0       	rjmp	.+4      	; 0x1df0 <pwm_init+0x116>
    1dec:	66 0f       	add	r22, r22
    1dee:	77 1f       	adc	r23, r23
    1df0:	8a 95       	dec	r24
    1df2:	e2 f7       	brpl	.-8      	; 0x1dec <pwm_init+0x112>
    1df4:	cb 01       	movw	r24, r22
    1df6:	85 2b       	or	r24, r21
    1df8:	80 83       	st	Z, r24
		num_chan = 2;
		break;
    1dfa:	14 c0       	rjmp	.+40     	; 0x1e24 <pwm_init+0x14a>
#endif

#if defined(TCF0)
	case PWM_TCF0:
		config->tc = &TCF0;
    1dfc:	80 e0       	ldi	r24, 0x00	; 0
    1dfe:	9b e0       	ldi	r25, 0x0B	; 11
    1e00:	88 83       	st	Y, r24
    1e02:	99 83       	std	Y+1, r25	; 0x01
		PORTF.DIR |= (1 << (channel-1));
    1e04:	e0 ea       	ldi	r30, 0xA0	; 160
    1e06:	f6 e0       	ldi	r31, 0x06	; 6
    1e08:	50 81       	ld	r21, Z
    1e0a:	21 e0       	ldi	r18, 0x01	; 1
    1e0c:	30 e0       	ldi	r19, 0x00	; 0
    1e0e:	8f ef       	ldi	r24, 0xFF	; 255
    1e10:	84 0f       	add	r24, r20
    1e12:	b9 01       	movw	r22, r18
    1e14:	02 c0       	rjmp	.+4      	; 0x1e1a <pwm_init+0x140>
    1e16:	66 0f       	add	r22, r22
    1e18:	77 1f       	adc	r23, r23
    1e1a:	8a 95       	dec	r24
    1e1c:	e2 f7       	brpl	.-8      	; 0x1e16 <pwm_init+0x13c>
    1e1e:	cb 01       	movw	r24, r22
    1e20:	85 2b       	or	r24, r21
    1e22:	80 83       	st	Z, r24
	}

	/* Make sure we are not given a channel number larger
	   than this TC can handle */
	Assert(channel <= num_chan);
	config->channel = channel;
    1e24:	4a 83       	std	Y+2, r20	; 0x02

	/* Set the correct cc_mask */
	switch (channel) {
    1e26:	42 30       	cpi	r20, 0x02	; 2
    1e28:	61 f0       	breq	.+24     	; 0x1e42 <pwm_init+0x168>
    1e2a:	18 f4       	brcc	.+6      	; 0x1e32 <pwm_init+0x158>
    1e2c:	41 30       	cpi	r20, 0x01	; 1
    1e2e:	31 f0       	breq	.+12     	; 0x1e3c <pwm_init+0x162>
    1e30:	10 c0       	rjmp	.+32     	; 0x1e52 <pwm_init+0x178>
    1e32:	43 30       	cpi	r20, 0x03	; 3
    1e34:	49 f0       	breq	.+18     	; 0x1e48 <pwm_init+0x16e>
    1e36:	44 30       	cpi	r20, 0x04	; 4
    1e38:	51 f0       	breq	.+20     	; 0x1e4e <pwm_init+0x174>
    1e3a:	0b c0       	rjmp	.+22     	; 0x1e52 <pwm_init+0x178>
	case PWM_CH_A:
		config->cc_mask = TC_CCAEN;
    1e3c:	80 e1       	ldi	r24, 0x10	; 16
    1e3e:	8b 83       	std	Y+3, r24	; 0x03
		break;
    1e40:	08 c0       	rjmp	.+16     	; 0x1e52 <pwm_init+0x178>
	case PWM_CH_B:
		config->cc_mask = TC_CCBEN;
    1e42:	80 e2       	ldi	r24, 0x20	; 32
    1e44:	8b 83       	std	Y+3, r24	; 0x03
		break;
    1e46:	05 c0       	rjmp	.+10     	; 0x1e52 <pwm_init+0x178>
	case PWM_CH_C:
		config->cc_mask = TC_CCCEN;
    1e48:	80 e4       	ldi	r24, 0x40	; 64
    1e4a:	8b 83       	std	Y+3, r24	; 0x03
		break;
    1e4c:	02 c0       	rjmp	.+4      	; 0x1e52 <pwm_init+0x178>
	case PWM_CH_D:
		config->cc_mask = TC_CCDEN;
    1e4e:	80 e8       	ldi	r24, 0x80	; 128
    1e50:	8b 83       	std	Y+3, r24	; 0x03
		Assert(false);
		break;
	}

	/* Enable peripheral clock for this TC */
	tc_enable(config->tc);
    1e52:	88 81       	ld	r24, Y
    1e54:	99 81       	ldd	r25, Y+1	; 0x01
    1e56:	69 de       	rcall	.-814    	; 0x1b2a <tc_enable>

	/* Set this TC's waveform generator in single slope mode */
	tc_set_wgm(config->tc, TC_WG_SS);
    1e58:	e8 81       	ld	r30, Y
    1e5a:	f9 81       	ldd	r31, Y+1	; 0x01
 * \param tc Pointer to TC module.
 * \param wgm : waveform generator
 */
static inline void tc_set_wgm(volatile void *tc, enum tc_wg_mode_t wgm)
{
	((TC0_t *)tc)->CTRLB = (((TC0_t *)tc)->CTRLB & ~TC0_WGMODE_gm) | wgm;
    1e5c:	81 81       	ldd	r24, Z+1	; 0x01
    1e5e:	88 7f       	andi	r24, 0xF8	; 248
    1e60:	83 60       	ori	r24, 0x03	; 3
    1e62:	81 83       	std	Z+1, r24	; 0x01

	/* Default values (disable TC and set minimum period)*/
	config->period = 0;
    1e64:	1d 82       	std	Y+5, r1	; 0x05
    1e66:	1e 82       	std	Y+6, r1	; 0x06
	config->clk_sel = PWM_CLK_OFF;
    1e68:	1c 82       	std	Y+4, r1	; 0x04
	tc_write_clock_source(config->tc, PWM_CLK_OFF);
    1e6a:	e8 81       	ld	r30, Y
    1e6c:	f9 81       	ldd	r31, Y+1	; 0x01
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
			(((TC0_t *)tc)->CTRLA & ~TC0_CLKSEL_gm) |
    1e6e:	80 81       	ld	r24, Z
 * \note Configuring the clock also starts the timer
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
    1e70:	80 7f       	andi	r24, 0xF0	; 240
    1e72:	80 83       	st	Z, r24

	/* Set the PWM frequency */
	pwm_set_frequency(config, freq_hz);
    1e74:	b7 01       	movw	r22, r14
    1e76:	ce 01       	movw	r24, r28
    1e78:	c4 de       	rcall	.-632    	; 0x1c02 <pwm_set_frequency>
}
    1e7a:	df 91       	pop	r29
    1e7c:	cf 91       	pop	r28
    1e7e:	1f 91       	pop	r17
    1e80:	0f 91       	pop	r16
    1e82:	ff 90       	pop	r15
    1e84:	ef 90       	pop	r14
    1e86:	08 95       	ret

00001e88 <udd_sleep_mode>:
	} else {
		// endpoint not halted then call directly callback
		callback();
	}
	return true;
}
    1e88:	81 11       	cpse	r24, r1
    1e8a:	18 c0       	rjmp	.+48     	; 0x1ebc <udd_sleep_mode+0x34>
    1e8c:	90 91 30 23 	lds	r25, 0x2330
    1e90:	99 23       	and	r25, r25
    1e92:	89 f0       	breq	.+34     	; 0x1eb6 <udd_sleep_mode+0x2e>
    1e94:	9f b7       	in	r25, 0x3f	; 63
    1e96:	f8 94       	cli
    1e98:	e2 e5       	ldi	r30, 0x52	; 82
    1e9a:	f3 e2       	ldi	r31, 0x23	; 35
    1e9c:	20 81       	ld	r18, Z
    1e9e:	21 50       	subi	r18, 0x01	; 1
    1ea0:	20 83       	st	Z, r18
    1ea2:	9f bf       	out	0x3f, r25	; 63
    1ea4:	08 c0       	rjmp	.+16     	; 0x1eb6 <udd_sleep_mode+0x2e>
    1ea6:	9f b7       	in	r25, 0x3f	; 63
    1ea8:	f8 94       	cli
    1eaa:	e2 e5       	ldi	r30, 0x52	; 82
    1eac:	f3 e2       	ldi	r31, 0x23	; 35
    1eae:	20 81       	ld	r18, Z
    1eb0:	2f 5f       	subi	r18, 0xFF	; 255
    1eb2:	20 83       	st	Z, r18
    1eb4:	9f bf       	out	0x3f, r25	; 63
    1eb6:	80 93 30 23 	sts	0x2330, r24
    1eba:	08 95       	ret
    1ebc:	90 91 30 23 	lds	r25, 0x2330
    1ec0:	99 23       	and	r25, r25
    1ec2:	89 f3       	breq	.-30     	; 0x1ea6 <udd_sleep_mode+0x1e>
    1ec4:	f8 cf       	rjmp	.-16     	; 0x1eb6 <udd_sleep_mode+0x2e>

00001ec6 <udd_ctrl_init>:
    1ec6:	0f 93       	push	r16
    1ec8:	e8 ec       	ldi	r30, 0xC8	; 200
    1eca:	f4 e0       	ldi	r31, 0x04	; 4
    1ecc:	80 81       	ld	r24, Z
    1ece:	8f 7d       	andi	r24, 0xDF	; 223
    1ed0:	80 83       	st	Z, r24
    1ed2:	80 81       	ld	r24, Z
    1ed4:	8f 7d       	andi	r24, 0xDF	; 223
    1ed6:	80 83       	st	Z, r24
    1ed8:	e4 e0       	ldi	r30, 0x04	; 4
    1eda:	f3 e2       	ldi	r31, 0x23	; 35
    1edc:	02 e0       	ldi	r16, 0x02	; 2
    1ede:	05 93       	las	Z, r16
    1ee0:	10 92 06 23 	sts	0x2306, r1
    1ee4:	10 92 07 23 	sts	0x2307, r1
    1ee8:	00 e2       	ldi	r16, 0x20	; 32
    1eea:	06 93       	lac	Z, r16
    1eec:	00 e4       	ldi	r16, 0x40	; 64
    1eee:	06 93       	lac	Z, r16
    1ef0:	ec ef       	ldi	r30, 0xFC	; 252
    1ef2:	f2 e2       	ldi	r31, 0x22	; 34
    1ef4:	00 e2       	ldi	r16, 0x20	; 32
    1ef6:	06 93       	lac	Z, r16
    1ef8:	00 e4       	ldi	r16, 0x40	; 64
    1efa:	06 93       	lac	Z, r16
    1efc:	10 92 3e 23 	sts	0x233E, r1
    1f00:	10 92 3f 23 	sts	0x233F, r1
    1f04:	10 92 40 23 	sts	0x2340, r1
    1f08:	10 92 41 23 	sts	0x2341, r1
    1f0c:	10 92 3c 23 	sts	0x233C, r1
    1f10:	10 92 3d 23 	sts	0x233D, r1
    1f14:	10 92 ed 22 	sts	0x22ED, r1
    1f18:	0f 91       	pop	r16
    1f1a:	08 95       	ret

00001f1c <udd_ctrl_stall_data>:
    1f1c:	0f 93       	push	r16
    1f1e:	85 e0       	ldi	r24, 0x05	; 5
    1f20:	80 93 ed 22 	sts	0x22ED, r24
    1f24:	e5 e0       	ldi	r30, 0x05	; 5
    1f26:	f3 e2       	ldi	r31, 0x23	; 35
    1f28:	04 e0       	ldi	r16, 0x04	; 4
    1f2a:	05 93       	las	Z, r16
    1f2c:	ed ef       	ldi	r30, 0xFD	; 253
    1f2e:	f2 e2       	ldi	r31, 0x22	; 34
    1f30:	04 e0       	ldi	r16, 0x04	; 4
    1f32:	05 93       	las	Z, r16
    1f34:	0f 91       	pop	r16
    1f36:	08 95       	ret

00001f38 <udd_ctrl_send_zlp_in>:
    1f38:	0f 93       	push	r16
    1f3a:	83 e0       	ldi	r24, 0x03	; 3
    1f3c:	80 93 ed 22 	sts	0x22ED, r24
    1f40:	10 92 06 23 	sts	0x2306, r1
    1f44:	10 92 07 23 	sts	0x2307, r1
    1f48:	e4 e0       	ldi	r30, 0x04	; 4
    1f4a:	f3 e2       	ldi	r31, 0x23	; 35
    1f4c:	02 e0       	ldi	r16, 0x02	; 2
    1f4e:	06 93       	lac	Z, r16
    1f50:	0f 91       	pop	r16
    1f52:	08 95       	ret

00001f54 <udd_ctrl_endofrequest>:
    1f54:	e0 91 3e 23 	lds	r30, 0x233E
    1f58:	f0 91 3f 23 	lds	r31, 0x233F
    1f5c:	30 97       	sbiw	r30, 0x00	; 0
    1f5e:	09 f0       	breq	.+2      	; 0x1f62 <udd_ctrl_endofrequest+0xe>
    1f60:	19 95       	eicall
    1f62:	08 95       	ret

00001f64 <udd_ctrl_in_sent>:
    1f64:	0f 93       	push	r16
    1f66:	cf 93       	push	r28
    1f68:	df 93       	push	r29
    1f6a:	80 91 ed 22 	lds	r24, 0x22ED
    1f6e:	83 30       	cpi	r24, 0x03	; 3
    1f70:	19 f4       	brne	.+6      	; 0x1f78 <udd_ctrl_in_sent+0x14>
    1f72:	f0 df       	rcall	.-32     	; 0x1f54 <udd_ctrl_endofrequest>
    1f74:	a8 df       	rcall	.-176    	; 0x1ec6 <udd_ctrl_init>
    1f76:	60 c0       	rjmp	.+192    	; 0x2038 <udd_ctrl_in_sent+0xd4>
    1f78:	80 91 e9 22 	lds	r24, 0x22E9
    1f7c:	90 91 ea 22 	lds	r25, 0x22EA
    1f80:	c0 91 3c 23 	lds	r28, 0x233C
    1f84:	d0 91 3d 23 	lds	r29, 0x233D
    1f88:	c8 1b       	sub	r28, r24
    1f8a:	d9 0b       	sbc	r29, r25
    1f8c:	71 f5       	brne	.+92     	; 0x1fea <udd_ctrl_in_sent+0x86>
    1f8e:	20 91 eb 22 	lds	r18, 0x22EB
    1f92:	30 91 ec 22 	lds	r19, 0x22EC
    1f96:	82 0f       	add	r24, r18
    1f98:	93 1f       	adc	r25, r19
    1f9a:	80 93 eb 22 	sts	0x22EB, r24
    1f9e:	90 93 ec 22 	sts	0x22EC, r25
    1fa2:	20 91 38 23 	lds	r18, 0x2338
    1fa6:	30 91 39 23 	lds	r19, 0x2339
    1faa:	82 17       	cp	r24, r18
    1fac:	93 07       	cpc	r25, r19
    1fae:	21 f0       	breq	.+8      	; 0x1fb8 <udd_ctrl_in_sent+0x54>
    1fb0:	80 91 04 22 	lds	r24, 0x2204
    1fb4:	88 23       	and	r24, r24
    1fb6:	41 f0       	breq	.+16     	; 0x1fc8 <udd_ctrl_in_sent+0x64>
    1fb8:	84 e0       	ldi	r24, 0x04	; 4
    1fba:	80 93 ed 22 	sts	0x22ED, r24
    1fbe:	ec ef       	ldi	r30, 0xFC	; 252
    1fc0:	f2 e2       	ldi	r31, 0x22	; 34
    1fc2:	02 e0       	ldi	r16, 0x02	; 2
    1fc4:	06 93       	lac	Z, r16
    1fc6:	38 c0       	rjmp	.+112    	; 0x2038 <udd_ctrl_in_sent+0xd4>
    1fc8:	e0 91 40 23 	lds	r30, 0x2340
    1fcc:	f0 91 41 23 	lds	r31, 0x2341
    1fd0:	30 97       	sbiw	r30, 0x00	; 0
    1fd2:	99 f0       	breq	.+38     	; 0x1ffa <udd_ctrl_in_sent+0x96>
    1fd4:	19 95       	eicall
    1fd6:	88 23       	and	r24, r24
    1fd8:	81 f0       	breq	.+32     	; 0x1ffa <udd_ctrl_in_sent+0x96>
    1fda:	10 92 e9 22 	sts	0x22E9, r1
    1fde:	10 92 ea 22 	sts	0x22EA, r1
    1fe2:	c0 91 3c 23 	lds	r28, 0x233C
    1fe6:	d0 91 3d 23 	lds	r29, 0x233D
    1fea:	c0 34       	cpi	r28, 0x40	; 64
    1fec:	d1 05       	cpc	r29, r1
    1fee:	28 f0       	brcs	.+10     	; 0x1ffa <udd_ctrl_in_sent+0x96>
    1ff0:	10 92 04 22 	sts	0x2204, r1
    1ff4:	c0 e4       	ldi	r28, 0x40	; 64
    1ff6:	d0 e0       	ldi	r29, 0x00	; 0
    1ff8:	03 c0       	rjmp	.+6      	; 0x2000 <udd_ctrl_in_sent+0x9c>
    1ffa:	81 e0       	ldi	r24, 0x01	; 1
    1ffc:	80 93 04 22 	sts	0x2204, r24
    2000:	c0 93 06 23 	sts	0x2306, r28
    2004:	d0 93 07 23 	sts	0x2307, r29
    2008:	80 91 e9 22 	lds	r24, 0x22E9
    200c:	90 91 ea 22 	lds	r25, 0x22EA
    2010:	20 91 3a 23 	lds	r18, 0x233A
    2014:	30 91 3b 23 	lds	r19, 0x233B
    2018:	28 0f       	add	r18, r24
    201a:	39 1f       	adc	r19, r25
    201c:	20 93 08 23 	sts	0x2308, r18
    2020:	30 93 09 23 	sts	0x2309, r19
    2024:	c8 0f       	add	r28, r24
    2026:	d9 1f       	adc	r29, r25
    2028:	c0 93 e9 22 	sts	0x22E9, r28
    202c:	d0 93 ea 22 	sts	0x22EA, r29
    2030:	e4 e0       	ldi	r30, 0x04	; 4
    2032:	f3 e2       	ldi	r31, 0x23	; 35
    2034:	02 e0       	ldi	r16, 0x02	; 2
    2036:	06 93       	lac	Z, r16
    2038:	df 91       	pop	r29
    203a:	cf 91       	pop	r28
    203c:	0f 91       	pop	r16
    203e:	08 95       	ret

00002040 <udd_ep_get_size>:
    2040:	fc 01       	movw	r30, r24
    2042:	81 81       	ldd	r24, Z+1	; 0x01
    2044:	87 70       	andi	r24, 0x07	; 7
    2046:	90 e0       	ldi	r25, 0x00	; 0
    2048:	fc 01       	movw	r30, r24
    204a:	31 97       	sbiw	r30, 0x01	; 1
    204c:	e7 30       	cpi	r30, 0x07	; 7
    204e:	f1 05       	cpc	r31, r1
    2050:	20 f4       	brcc	.+8      	; 0x205a <udd_ep_get_size+0x1a>
    2052:	eb 5f       	subi	r30, 0xFB	; 251
    2054:	fe 4f       	sbci	r31, 0xFE	; 254
    2056:	0c 94 0c 1d 	jmp	0x3a18	; 0x3a18 <__tablejump2__>
    205a:	88 e0       	ldi	r24, 0x08	; 8
    205c:	90 e0       	ldi	r25, 0x00	; 0
    205e:	08 95       	ret
    2060:	80 e2       	ldi	r24, 0x20	; 32
    2062:	90 e0       	ldi	r25, 0x00	; 0
    2064:	08 95       	ret
    2066:	80 e4       	ldi	r24, 0x40	; 64
    2068:	90 e0       	ldi	r25, 0x00	; 0
    206a:	08 95       	ret
    206c:	80 e8       	ldi	r24, 0x80	; 128
    206e:	90 e0       	ldi	r25, 0x00	; 0
    2070:	08 95       	ret
    2072:	80 e0       	ldi	r24, 0x00	; 0
    2074:	91 e0       	ldi	r25, 0x01	; 1
    2076:	08 95       	ret
    2078:	80 e0       	ldi	r24, 0x00	; 0
    207a:	92 e0       	ldi	r25, 0x02	; 2
    207c:	08 95       	ret
    207e:	8f ef       	ldi	r24, 0xFF	; 255
    2080:	93 e0       	ldi	r25, 0x03	; 3
    2082:	08 95       	ret
    2084:	80 e1       	ldi	r24, 0x10	; 16
    2086:	90 e0       	ldi	r25, 0x00	; 0
    2088:	08 95       	ret

0000208a <udd_ep_get_job>:
    208a:	28 2f       	mov	r18, r24
    208c:	2f 70       	andi	r18, 0x0F	; 15
    208e:	30 e0       	ldi	r19, 0x00	; 0
    2090:	22 0f       	add	r18, r18
    2092:	33 1f       	adc	r19, r19
    2094:	99 27       	eor	r25, r25
    2096:	87 fd       	sbrc	r24, 7
    2098:	90 95       	com	r25
    209a:	88 27       	eor	r24, r24
    209c:	99 0f       	add	r25, r25
    209e:	88 1f       	adc	r24, r24
    20a0:	99 27       	eor	r25, r25
    20a2:	82 0f       	add	r24, r18
    20a4:	93 1f       	adc	r25, r19
    20a6:	02 97       	sbiw	r24, 0x02	; 2
    20a8:	9c 01       	movw	r18, r24
    20aa:	22 0f       	add	r18, r18
    20ac:	33 1f       	adc	r19, r19
    20ae:	22 0f       	add	r18, r18
    20b0:	33 1f       	adc	r19, r19
    20b2:	22 0f       	add	r18, r18
    20b4:	33 1f       	adc	r19, r19
    20b6:	82 0f       	add	r24, r18
    20b8:	93 1f       	adc	r25, r19
    20ba:	8b 57       	subi	r24, 0x7B	; 123
    20bc:	9d 4d       	sbci	r25, 0xDD	; 221
    20be:	08 95       	ret

000020c0 <udd_ctrl_interrupt_tc_setup>:
    20c0:	0f 93       	push	r16
    20c2:	cf 93       	push	r28
    20c4:	80 91 cc 04 	lds	r24, 0x04CC
    20c8:	80 ff       	sbrs	r24, 0
    20ca:	63 c0       	rjmp	.+198    	; 0x2192 <udd_ctrl_interrupt_tc_setup+0xd2>
    20cc:	81 e0       	ldi	r24, 0x01	; 1
    20ce:	80 93 cc 04 	sts	0x04CC, r24
    20d2:	ec ef       	ldi	r30, 0xFC	; 252
    20d4:	f2 e2       	ldi	r31, 0x22	; 34
    20d6:	00 e8       	ldi	r16, 0x80	; 128
    20d8:	06 93       	lac	Z, r16
    20da:	e4 e0       	ldi	r30, 0x04	; 4
    20dc:	f3 e2       	ldi	r31, 0x23	; 35
    20de:	00 e8       	ldi	r16, 0x80	; 128
    20e0:	06 93       	lac	Z, r16
    20e2:	80 93 ca 04 	sts	0x04CA, r24
    20e6:	ec ef       	ldi	r30, 0xFC	; 252
    20e8:	f2 e2       	ldi	r31, 0x22	; 34
    20ea:	00 e1       	ldi	r16, 0x10	; 16
    20ec:	06 93       	lac	Z, r16
    20ee:	80 91 ed 22 	lds	r24, 0x22ED
    20f2:	88 23       	and	r24, r24
    20f4:	29 f0       	breq	.+10     	; 0x2100 <udd_ctrl_interrupt_tc_setup+0x40>
    20f6:	83 50       	subi	r24, 0x03	; 3
    20f8:	82 30       	cpi	r24, 0x02	; 2
    20fa:	08 f4       	brcc	.+2      	; 0x20fe <udd_ctrl_interrupt_tc_setup+0x3e>
    20fc:	2b df       	rcall	.-426    	; 0x1f54 <udd_ctrl_endofrequest>
    20fe:	e3 de       	rcall	.-570    	; 0x1ec6 <udd_ctrl_init>
    2100:	80 91 fe 22 	lds	r24, 0x22FE
    2104:	90 91 ff 22 	lds	r25, 0x22FF
    2108:	08 97       	sbiw	r24, 0x08	; 8
    210a:	09 f0       	breq	.+2      	; 0x210e <udd_ctrl_interrupt_tc_setup+0x4e>
    210c:	44 c0       	rjmp	.+136    	; 0x2196 <udd_ctrl_interrupt_tc_setup+0xd6>
    210e:	88 e0       	ldi	r24, 0x08	; 8
    2110:	e9 ea       	ldi	r30, 0xA9	; 169
    2112:	f2 e2       	ldi	r31, 0x22	; 34
    2114:	a2 e3       	ldi	r26, 0x32	; 50
    2116:	b3 e2       	ldi	r27, 0x23	; 35
    2118:	01 90       	ld	r0, Z+
    211a:	0d 92       	st	X+, r0
    211c:	8a 95       	dec	r24
    211e:	e1 f7       	brne	.-8      	; 0x2118 <udd_ctrl_interrupt_tc_setup+0x58>
    2120:	e8 ec       	ldi	r30, 0xC8	; 200
    2122:	f4 e0       	ldi	r31, 0x04	; 4
    2124:	80 81       	ld	r24, Z
    2126:	80 62       	ori	r24, 0x20	; 32
    2128:	80 83       	st	Z, r24
    212a:	80 81       	ld	r24, Z
    212c:	80 62       	ori	r24, 0x20	; 32
    212e:	80 83       	st	Z, r24
    2130:	0e 94 a6 04 	call	0x94c	; 0x94c <udc_process_setup>
    2134:	c8 2f       	mov	r28, r24
    2136:	81 11       	cpse	r24, r1
    2138:	03 c0       	rjmp	.+6      	; 0x2140 <udd_ctrl_interrupt_tc_setup+0x80>
    213a:	f0 de       	rcall	.-544    	; 0x1f1c <udd_ctrl_stall_data>
    213c:	c1 e0       	ldi	r28, 0x01	; 1
    213e:	2c c0       	rjmp	.+88     	; 0x2198 <udd_ctrl_interrupt_tc_setup+0xd8>
    2140:	80 91 32 23 	lds	r24, 0x2332
    2144:	88 23       	and	r24, r24
    2146:	6c f4       	brge	.+26     	; 0x2162 <udd_ctrl_interrupt_tc_setup+0xa2>
    2148:	10 92 eb 22 	sts	0x22EB, r1
    214c:	10 92 ec 22 	sts	0x22EC, r1
    2150:	10 92 e9 22 	sts	0x22E9, r1
    2154:	10 92 ea 22 	sts	0x22EA, r1
    2158:	82 e0       	ldi	r24, 0x02	; 2
    215a:	80 93 ed 22 	sts	0x22ED, r24
    215e:	02 df       	rcall	.-508    	; 0x1f64 <udd_ctrl_in_sent>
    2160:	1b c0       	rjmp	.+54     	; 0x2198 <udd_ctrl_interrupt_tc_setup+0xd8>
    2162:	20 91 38 23 	lds	r18, 0x2338
    2166:	30 91 39 23 	lds	r19, 0x2339
    216a:	23 2b       	or	r18, r19
    216c:	11 f4       	brne	.+4      	; 0x2172 <udd_ctrl_interrupt_tc_setup+0xb2>
    216e:	e4 de       	rcall	.-568    	; 0x1f38 <udd_ctrl_send_zlp_in>
    2170:	13 c0       	rjmp	.+38     	; 0x2198 <udd_ctrl_interrupt_tc_setup+0xd8>
    2172:	10 92 eb 22 	sts	0x22EB, r1
    2176:	10 92 ec 22 	sts	0x22EC, r1
    217a:	10 92 e9 22 	sts	0x22E9, r1
    217e:	10 92 ea 22 	sts	0x22EA, r1
    2182:	81 e0       	ldi	r24, 0x01	; 1
    2184:	80 93 ed 22 	sts	0x22ED, r24
    2188:	ec ef       	ldi	r30, 0xFC	; 252
    218a:	f2 e2       	ldi	r31, 0x22	; 34
    218c:	02 e0       	ldi	r16, 0x02	; 2
    218e:	06 93       	lac	Z, r16
    2190:	03 c0       	rjmp	.+6      	; 0x2198 <udd_ctrl_interrupt_tc_setup+0xd8>
    2192:	c0 e0       	ldi	r28, 0x00	; 0
    2194:	01 c0       	rjmp	.+2      	; 0x2198 <udd_ctrl_interrupt_tc_setup+0xd8>
    2196:	c1 e0       	ldi	r28, 0x01	; 1
    2198:	8c 2f       	mov	r24, r28
    219a:	cf 91       	pop	r28
    219c:	0f 91       	pop	r16
    219e:	08 95       	ret

000021a0 <udd_ep_trans_complet>:
    21a0:	bf 92       	push	r11
    21a2:	cf 92       	push	r12
    21a4:	df 92       	push	r13
    21a6:	ef 92       	push	r14
    21a8:	ff 92       	push	r15
    21aa:	0f 93       	push	r16
    21ac:	1f 93       	push	r17
    21ae:	cf 93       	push	r28
    21b0:	df 93       	push	r29
    21b2:	b8 2e       	mov	r11, r24
    21b4:	6a df       	rcall	.-300    	; 0x208a <udd_ep_get_job>
    21b6:	ec 01       	movw	r28, r24
    21b8:	1b 2d       	mov	r17, r11
    21ba:	11 1f       	adc	r17, r17
    21bc:	11 27       	eor	r17, r17
    21be:	11 1f       	adc	r17, r17
    21c0:	8b 2d       	mov	r24, r11
    21c2:	8f 70       	andi	r24, 0x0F	; 15
    21c4:	e8 2e       	mov	r14, r24
    21c6:	f1 2c       	mov	r15, r1
    21c8:	ee 0c       	add	r14, r14
    21ca:	ff 1c       	adc	r15, r15
    21cc:	e1 0e       	add	r14, r17
    21ce:	f1 1c       	adc	r15, r1
    21d0:	c7 01       	movw	r24, r14
    21d2:	88 0f       	add	r24, r24
    21d4:	99 1f       	adc	r25, r25
    21d6:	88 0f       	add	r24, r24
    21d8:	99 1f       	adc	r25, r25
    21da:	88 0f       	add	r24, r24
    21dc:	99 1f       	adc	r25, r25
    21de:	9c 01       	movw	r18, r24
    21e0:	24 50       	subi	r18, 0x04	; 4
    21e2:	3d 4d       	sbci	r19, 0xDD	; 221
    21e4:	79 01       	movw	r14, r18
    21e6:	c9 01       	movw	r24, r18
    21e8:	2b df       	rcall	.-426    	; 0x2040 <udd_ep_get_size>
    21ea:	6c 01       	movw	r12, r24
    21ec:	11 23       	and	r17, r17
    21ee:	09 f4       	brne	.+2      	; 0x21f2 <udd_ep_trans_complet+0x52>
    21f0:	5b c0       	rjmp	.+182    	; 0x22a8 <udd_ep_trans_complet+0x108>
    21f2:	d7 01       	movw	r26, r14
    21f4:	16 96       	adiw	r26, 0x06	; 6
    21f6:	2d 91       	ld	r18, X+
    21f8:	3c 91       	ld	r19, X
    21fa:	17 97       	sbiw	r26, 0x07	; 7
    21fc:	8d 81       	ldd	r24, Y+5	; 0x05
    21fe:	9e 81       	ldd	r25, Y+6	; 0x06
    2200:	28 0f       	add	r18, r24
    2202:	39 1f       	adc	r19, r25
    2204:	2d 83       	std	Y+5, r18	; 0x05
    2206:	3e 83       	std	Y+6, r19	; 0x06
    2208:	8b 81       	ldd	r24, Y+3	; 0x03
    220a:	9c 81       	ldd	r25, Y+4	; 0x04
    220c:	28 17       	cp	r18, r24
    220e:	39 07       	cpc	r19, r25
    2210:	c9 f1       	breq	.+114    	; 0x2284 <udd_ep_trans_complet+0xe4>
    2212:	fc 01       	movw	r30, r24
    2214:	e2 1b       	sub	r30, r18
    2216:	f3 0b       	sbc	r31, r19
    2218:	9f 01       	movw	r18, r30
    221a:	21 15       	cp	r18, r1
    221c:	f4 e0       	ldi	r31, 0x04	; 4
    221e:	3f 07       	cpc	r19, r31
    2220:	40 f0       	brcs	.+16     	; 0x2232 <udd_ep_trans_complet+0x92>
    2222:	2f ef       	ldi	r18, 0xFF	; 255
    2224:	33 e0       	ldi	r19, 0x03	; 3
    2226:	c9 01       	movw	r24, r18
    2228:	b6 01       	movw	r22, r12
    222a:	0e 94 d6 1c 	call	0x39ac	; 0x39ac <__udivmodhi4>
    222e:	28 1b       	sub	r18, r24
    2230:	39 0b       	sbc	r19, r25
    2232:	88 81       	ld	r24, Y
    2234:	81 ff       	sbrs	r24, 1
    2236:	0a c0       	rjmp	.+20     	; 0x224c <udd_ep_trans_complet+0xac>
    2238:	c9 01       	movw	r24, r18
    223a:	b6 01       	movw	r22, r12
    223c:	0e 94 d6 1c 	call	0x39ac	; 0x39ac <__udivmodhi4>
    2240:	41 e0       	ldi	r20, 0x01	; 1
    2242:	89 2b       	or	r24, r25
    2244:	09 f0       	breq	.+2      	; 0x2248 <udd_ep_trans_complet+0xa8>
    2246:	40 e0       	ldi	r20, 0x00	; 0
    2248:	94 2f       	mov	r25, r20
    224a:	01 c0       	rjmp	.+2      	; 0x224e <udd_ep_trans_complet+0xae>
    224c:	90 e0       	ldi	r25, 0x00	; 0
    224e:	88 81       	ld	r24, Y
    2250:	90 fb       	bst	r25, 0
    2252:	81 f9       	bld	r24, 1
    2254:	88 83       	st	Y, r24
    2256:	d7 01       	movw	r26, r14
    2258:	16 96       	adiw	r26, 0x06	; 6
    225a:	1d 92       	st	X+, r1
    225c:	1c 92       	st	X, r1
    225e:	17 97       	sbiw	r26, 0x07	; 7
    2260:	12 96       	adiw	r26, 0x02	; 2
    2262:	2d 93       	st	X+, r18
    2264:	3c 93       	st	X, r19
    2266:	13 97       	sbiw	r26, 0x03	; 3
    2268:	29 81       	ldd	r18, Y+1	; 0x01
    226a:	3a 81       	ldd	r19, Y+2	; 0x02
    226c:	8d 81       	ldd	r24, Y+5	; 0x05
    226e:	9e 81       	ldd	r25, Y+6	; 0x06
    2270:	82 0f       	add	r24, r18
    2272:	93 1f       	adc	r25, r19
    2274:	14 96       	adiw	r26, 0x04	; 4
    2276:	8d 93       	st	X+, r24
    2278:	9c 93       	st	X, r25
    227a:	15 97       	sbiw	r26, 0x05	; 5
    227c:	f7 01       	movw	r30, r14
    227e:	02 e0       	ldi	r16, 0x02	; 2
    2280:	06 93       	lac	Z, r16
    2282:	98 c0       	rjmp	.+304    	; 0x23b4 <udd_ep_trans_complet+0x214>
    2284:	88 81       	ld	r24, Y
    2286:	81 ff       	sbrs	r24, 1
    2288:	87 c0       	rjmp	.+270    	; 0x2398 <udd_ep_trans_complet+0x1f8>
    228a:	8d 7f       	andi	r24, 0xFD	; 253
    228c:	88 83       	st	Y, r24
    228e:	d7 01       	movw	r26, r14
    2290:	16 96       	adiw	r26, 0x06	; 6
    2292:	1d 92       	st	X+, r1
    2294:	1c 92       	st	X, r1
    2296:	17 97       	sbiw	r26, 0x07	; 7
    2298:	12 96       	adiw	r26, 0x02	; 2
    229a:	1d 92       	st	X+, r1
    229c:	1c 92       	st	X, r1
    229e:	13 97       	sbiw	r26, 0x03	; 3
    22a0:	f7 01       	movw	r30, r14
    22a2:	02 e0       	ldi	r16, 0x02	; 2
    22a4:	06 93       	lac	Z, r16
    22a6:	86 c0       	rjmp	.+268    	; 0x23b4 <udd_ep_trans_complet+0x214>
    22a8:	d7 01       	movw	r26, r14
    22aa:	12 96       	adiw	r26, 0x02	; 2
    22ac:	0d 91       	ld	r16, X+
    22ae:	1c 91       	ld	r17, X
    22b0:	13 97       	sbiw	r26, 0x03	; 3
    22b2:	88 81       	ld	r24, Y
    22b4:	82 ff       	sbrs	r24, 2
    22b6:	15 c0       	rjmp	.+42     	; 0x22e2 <udd_ep_trans_complet+0x142>
    22b8:	e9 81       	ldd	r30, Y+1	; 0x01
    22ba:	fa 81       	ldd	r31, Y+2	; 0x02
    22bc:	2d 81       	ldd	r18, Y+5	; 0x05
    22be:	3e 81       	ldd	r19, Y+6	; 0x06
    22c0:	8b 81       	ldd	r24, Y+3	; 0x03
    22c2:	9c 81       	ldd	r25, Y+4	; 0x04
    22c4:	b6 01       	movw	r22, r12
    22c6:	0e 94 d6 1c 	call	0x39ac	; 0x39ac <__udivmodhi4>
    22ca:	b0 e4       	ldi	r27, 0x40	; 64
    22cc:	bb 9e       	mul	r11, r27
    22ce:	b0 01       	movw	r22, r0
    22d0:	11 24       	eor	r1, r1
    22d2:	6b 53       	subi	r22, 0x3B	; 59
    22d4:	7e 4d       	sbci	r23, 0xDE	; 222
    22d6:	ac 01       	movw	r20, r24
    22d8:	cf 01       	movw	r24, r30
    22da:	82 0f       	add	r24, r18
    22dc:	93 1f       	adc	r25, r19
    22de:	0e 94 21 1d 	call	0x3a42	; 0x3a42 <memcpy>
    22e2:	2d 81       	ldd	r18, Y+5	; 0x05
    22e4:	3e 81       	ldd	r19, Y+6	; 0x06
    22e6:	20 0f       	add	r18, r16
    22e8:	31 1f       	adc	r19, r17
    22ea:	2d 83       	std	Y+5, r18	; 0x05
    22ec:	3e 83       	std	Y+6, r19	; 0x06
    22ee:	eb 81       	ldd	r30, Y+3	; 0x03
    22f0:	fc 81       	ldd	r31, Y+4	; 0x04
    22f2:	e2 17       	cp	r30, r18
    22f4:	f3 07       	cpc	r31, r19
    22f6:	10 f4       	brcc	.+4      	; 0x22fc <udd_ep_trans_complet+0x15c>
    22f8:	ed 83       	std	Y+5, r30	; 0x05
    22fa:	fe 83       	std	Y+6, r31	; 0x06
    22fc:	d7 01       	movw	r26, r14
    22fe:	16 96       	adiw	r26, 0x06	; 6
    2300:	8d 91       	ld	r24, X+
    2302:	9c 91       	ld	r25, X
    2304:	17 97       	sbiw	r26, 0x07	; 7
    2306:	80 17       	cp	r24, r16
    2308:	91 07       	cpc	r25, r17
    230a:	09 f0       	breq	.+2      	; 0x230e <udd_ep_trans_complet+0x16e>
    230c:	45 c0       	rjmp	.+138    	; 0x2398 <udd_ep_trans_complet+0x1f8>
    230e:	8d 81       	ldd	r24, Y+5	; 0x05
    2310:	9e 81       	ldd	r25, Y+6	; 0x06
    2312:	e8 17       	cp	r30, r24
    2314:	f9 07       	cpc	r31, r25
    2316:	09 f4       	brne	.+2      	; 0x231a <udd_ep_trans_complet+0x17a>
    2318:	3f c0       	rjmp	.+126    	; 0x2398 <udd_ep_trans_complet+0x1f8>
    231a:	e8 1b       	sub	r30, r24
    231c:	f9 0b       	sbc	r31, r25
    231e:	e1 15       	cp	r30, r1
    2320:	b4 e0       	ldi	r27, 0x04	; 4
    2322:	fb 07       	cpc	r31, r27
    2324:	48 f0       	brcs	.+18     	; 0x2338 <udd_ep_trans_complet+0x198>
    2326:	ef ef       	ldi	r30, 0xFF	; 255
    2328:	f3 e0       	ldi	r31, 0x03	; 3
    232a:	cf 01       	movw	r24, r30
    232c:	b6 01       	movw	r22, r12
    232e:	0e 94 d6 1c 	call	0x39ac	; 0x39ac <__udivmodhi4>
    2332:	e8 1b       	sub	r30, r24
    2334:	f9 0b       	sbc	r31, r25
    2336:	06 c0       	rjmp	.+12     	; 0x2344 <udd_ep_trans_complet+0x1a4>
    2338:	cf 01       	movw	r24, r30
    233a:	b6 01       	movw	r22, r12
    233c:	0e 94 d6 1c 	call	0x39ac	; 0x39ac <__udivmodhi4>
    2340:	e8 1b       	sub	r30, r24
    2342:	f9 0b       	sbc	r31, r25
    2344:	d7 01       	movw	r26, r14
    2346:	12 96       	adiw	r26, 0x02	; 2
    2348:	1d 92       	st	X+, r1
    234a:	1c 92       	st	X, r1
    234c:	13 97       	sbiw	r26, 0x03	; 3
    234e:	ec 15       	cp	r30, r12
    2350:	fd 05       	cpc	r31, r13
    2352:	78 f4       	brcc	.+30     	; 0x2372 <udd_ep_trans_complet+0x1d2>
    2354:	88 81       	ld	r24, Y
    2356:	84 60       	ori	r24, 0x04	; 4
    2358:	88 83       	st	Y, r24
    235a:	b0 e4       	ldi	r27, 0x40	; 64
    235c:	bb 9e       	mul	r11, r27
    235e:	c0 01       	movw	r24, r0
    2360:	11 24       	eor	r1, r1
    2362:	8b 53       	subi	r24, 0x3B	; 59
    2364:	9e 4d       	sbci	r25, 0xDE	; 222
    2366:	f7 01       	movw	r30, r14
    2368:	84 83       	std	Z+4, r24	; 0x04
    236a:	95 83       	std	Z+5, r25	; 0x05
    236c:	c6 82       	std	Z+6, r12	; 0x06
    236e:	d7 82       	std	Z+7, r13	; 0x07
    2370:	0f c0       	rjmp	.+30     	; 0x2390 <udd_ep_trans_complet+0x1f0>
    2372:	29 81       	ldd	r18, Y+1	; 0x01
    2374:	3a 81       	ldd	r19, Y+2	; 0x02
    2376:	8d 81       	ldd	r24, Y+5	; 0x05
    2378:	9e 81       	ldd	r25, Y+6	; 0x06
    237a:	82 0f       	add	r24, r18
    237c:	93 1f       	adc	r25, r19
    237e:	d7 01       	movw	r26, r14
    2380:	14 96       	adiw	r26, 0x04	; 4
    2382:	8d 93       	st	X+, r24
    2384:	9c 93       	st	X, r25
    2386:	15 97       	sbiw	r26, 0x05	; 5
    2388:	16 96       	adiw	r26, 0x06	; 6
    238a:	ed 93       	st	X+, r30
    238c:	fc 93       	st	X, r31
    238e:	17 97       	sbiw	r26, 0x07	; 7
    2390:	f7 01       	movw	r30, r14
    2392:	02 e0       	ldi	r16, 0x02	; 2
    2394:	06 93       	lac	Z, r16
    2396:	0e c0       	rjmp	.+28     	; 0x23b4 <udd_ep_trans_complet+0x214>
    2398:	88 81       	ld	r24, Y
    239a:	80 ff       	sbrs	r24, 0
    239c:	0b c0       	rjmp	.+22     	; 0x23b4 <udd_ep_trans_complet+0x214>
    239e:	8e 7f       	andi	r24, 0xFE	; 254
    23a0:	88 83       	st	Y, r24
    23a2:	ef 81       	ldd	r30, Y+7	; 0x07
    23a4:	f8 85       	ldd	r31, Y+8	; 0x08
    23a6:	30 97       	sbiw	r30, 0x00	; 0
    23a8:	29 f0       	breq	.+10     	; 0x23b4 <udd_ep_trans_complet+0x214>
    23aa:	6d 81       	ldd	r22, Y+5	; 0x05
    23ac:	7e 81       	ldd	r23, Y+6	; 0x06
    23ae:	4b 2d       	mov	r20, r11
    23b0:	80 e0       	ldi	r24, 0x00	; 0
    23b2:	19 95       	eicall
    23b4:	df 91       	pop	r29
    23b6:	cf 91       	pop	r28
    23b8:	1f 91       	pop	r17
    23ba:	0f 91       	pop	r16
    23bc:	ff 90       	pop	r15
    23be:	ef 90       	pop	r14
    23c0:	df 90       	pop	r13
    23c2:	cf 90       	pop	r12
    23c4:	bf 90       	pop	r11
    23c6:	08 95       	ret

000023c8 <udd_attach>:
    23c8:	cf 93       	push	r28
    23ca:	cf b7       	in	r28, 0x3f	; 63
    23cc:	f8 94       	cli
    23ce:	81 e0       	ldi	r24, 0x01	; 1
    23d0:	5b dd       	rcall	.-1354   	; 0x1e88 <udd_sleep_mode>
    23d2:	ea ec       	ldi	r30, 0xCA	; 202
    23d4:	f4 e0       	ldi	r31, 0x04	; 4
    23d6:	80 e4       	ldi	r24, 0x40	; 64
    23d8:	80 83       	st	Z, r24
    23da:	80 e2       	ldi	r24, 0x20	; 32
    23dc:	80 83       	st	Z, r24
    23de:	e1 ec       	ldi	r30, 0xC1	; 193
    23e0:	f4 e0       	ldi	r31, 0x04	; 4
    23e2:	80 81       	ld	r24, Z
    23e4:	81 60       	ori	r24, 0x01	; 1
    23e6:	80 83       	st	Z, r24
    23e8:	a9 ec       	ldi	r26, 0xC9	; 201
    23ea:	b4 e0       	ldi	r27, 0x04	; 4
    23ec:	8c 91       	ld	r24, X
    23ee:	82 60       	ori	r24, 0x02	; 2
    23f0:	8c 93       	st	X, r24
    23f2:	e8 ec       	ldi	r30, 0xC8	; 200
    23f4:	f4 e0       	ldi	r31, 0x04	; 4
    23f6:	80 81       	ld	r24, Z
    23f8:	80 64       	ori	r24, 0x40	; 64
    23fa:	80 83       	st	Z, r24
    23fc:	8c 91       	ld	r24, X
    23fe:	81 60       	ori	r24, 0x01	; 1
    2400:	8c 93       	st	X, r24
    2402:	80 81       	ld	r24, Z
    2404:	80 68       	ori	r24, 0x80	; 128
    2406:	80 83       	st	Z, r24
    2408:	cf bf       	out	0x3f, r28	; 63
    240a:	cf 91       	pop	r28
    240c:	08 95       	ret

0000240e <udd_enable>:
    240e:	cf 93       	push	r28
    2410:	df 93       	push	r29
    2412:	c0 e6       	ldi	r28, 0x60	; 96
    2414:	d0 e0       	ldi	r29, 0x00	; 0
    2416:	18 82       	st	Y, r1
    2418:	80 e3       	ldi	r24, 0x30	; 48
    241a:	0e 94 bb 1a 	call	0x3576	; 0x3576 <sysclk_enable_usb>
    241e:	e0 ec       	ldi	r30, 0xC0	; 192
    2420:	f4 e0       	ldi	r31, 0x04	; 4
    2422:	80 81       	ld	r24, Z
    2424:	80 64       	ori	r24, 0x40	; 64
    2426:	80 83       	st	Z, r24
    2428:	81 e0       	ldi	r24, 0x01	; 1
    242a:	88 83       	st	Y, r24
    242c:	cf b7       	in	r28, 0x3f	; 63
    242e:	f8 94       	cli
    2430:	10 92 fd 22 	sts	0x22FD, r1
    2434:	10 92 05 23 	sts	0x2305, r1
    2438:	10 92 0d 23 	sts	0x230D, r1
    243c:	10 92 15 23 	sts	0x2315, r1
    2440:	10 92 1d 23 	sts	0x231D, r1
    2444:	10 92 25 23 	sts	0x2325, r1
    2448:	e5 e8       	ldi	r30, 0x85	; 133
    244a:	f2 e2       	ldi	r31, 0x22	; 34
    244c:	80 81       	ld	r24, Z
    244e:	8e 7f       	andi	r24, 0xFE	; 254
    2450:	80 83       	st	Z, r24
    2452:	ee e8       	ldi	r30, 0x8E	; 142
    2454:	f2 e2       	ldi	r31, 0x22	; 34
    2456:	80 81       	ld	r24, Z
    2458:	8e 7f       	andi	r24, 0xFE	; 254
    245a:	80 83       	st	Z, r24
    245c:	e7 e9       	ldi	r30, 0x97	; 151
    245e:	f2 e2       	ldi	r31, 0x22	; 34
    2460:	80 81       	ld	r24, Z
    2462:	8e 7f       	andi	r24, 0xFE	; 254
    2464:	80 83       	st	Z, r24
    2466:	e0 ea       	ldi	r30, 0xA0	; 160
    2468:	f2 e2       	ldi	r31, 0x22	; 34
    246a:	80 81       	ld	r24, Z
    246c:	8e 7f       	andi	r24, 0xFE	; 254
    246e:	80 83       	st	Z, r24
    2470:	6a e1       	ldi	r22, 0x1A	; 26
    2472:	70 e0       	ldi	r23, 0x00	; 0
    2474:	82 e0       	ldi	r24, 0x02	; 2
    2476:	0e 94 38 1b 	call	0x3670	; 0x3670 <nvm_read_byte>
    247a:	8f 3f       	cpi	r24, 0xFF	; 255
    247c:	19 f0       	breq	.+6      	; 0x2484 <udd_enable+0x76>
    247e:	80 93 fa 04 	sts	0x04FA, r24
    2482:	03 c0       	rjmp	.+6      	; 0x248a <udd_enable+0x7c>
    2484:	8f e1       	ldi	r24, 0x1F	; 31
    2486:	80 93 fa 04 	sts	0x04FA, r24
    248a:	6b e1       	ldi	r22, 0x1B	; 27
    248c:	70 e0       	ldi	r23, 0x00	; 0
    248e:	82 e0       	ldi	r24, 0x02	; 2
    2490:	0e 94 38 1b 	call	0x3670	; 0x3670 <nvm_read_byte>
    2494:	8f 3f       	cpi	r24, 0xFF	; 255
    2496:	19 f0       	breq	.+6      	; 0x249e <udd_enable+0x90>
    2498:	80 93 fb 04 	sts	0x04FB, r24
    249c:	03 c0       	rjmp	.+6      	; 0x24a4 <udd_enable+0x96>
    249e:	8f e1       	ldi	r24, 0x1F	; 31
    24a0:	80 93 fb 04 	sts	0x04FB, r24
    24a4:	e0 ec       	ldi	r30, 0xC0	; 192
    24a6:	f4 e0       	ldi	r31, 0x04	; 4
    24a8:	80 81       	ld	r24, Z
    24aa:	82 60       	ori	r24, 0x02	; 2
    24ac:	80 83       	st	Z, r24
    24ae:	80 81       	ld	r24, Z
    24b0:	80 68       	ori	r24, 0x80	; 128
    24b2:	80 83       	st	Z, r24
    24b4:	80 81       	ld	r24, Z
    24b6:	80 61       	ori	r24, 0x10	; 16
    24b8:	80 83       	st	Z, r24
    24ba:	8c ef       	ldi	r24, 0xFC	; 252
    24bc:	92 e2       	ldi	r25, 0x22	; 34
    24be:	86 83       	std	Z+6, r24	; 0x06
    24c0:	97 83       	std	Z+7, r25	; 0x07
    24c2:	80 81       	ld	r24, Z
    24c4:	80 62       	ori	r24, 0x20	; 32
    24c6:	80 83       	st	Z, r24
    24c8:	8f ef       	ldi	r24, 0xFF	; 255
    24ca:	80 93 c5 04 	sts	0x04C5, r24
    24ce:	e8 ec       	ldi	r30, 0xC8	; 200
    24d0:	f4 e0       	ldi	r31, 0x04	; 4
    24d2:	80 81       	ld	r24, Z
    24d4:	81 60       	ori	r24, 0x01	; 1
    24d6:	80 83       	st	Z, r24
    24d8:	10 92 30 23 	sts	0x2330, r1
    24dc:	8f b7       	in	r24, 0x3f	; 63
    24de:	f8 94       	cli
    24e0:	e6 e5       	ldi	r30, 0x56	; 86
    24e2:	f3 e2       	ldi	r31, 0x23	; 35
    24e4:	90 81       	ld	r25, Z
    24e6:	9f 5f       	subi	r25, 0xFF	; 255
    24e8:	90 83       	st	Z, r25
    24ea:	8f bf       	out	0x3f, r24	; 63
    24ec:	6d df       	rcall	.-294    	; 0x23c8 <udd_attach>
    24ee:	cf bf       	out	0x3f, r28	; 63
    24f0:	df 91       	pop	r29
    24f2:	cf 91       	pop	r28
    24f4:	08 95       	ret

000024f6 <udd_is_high_speed>:
    24f6:	80 e0       	ldi	r24, 0x00	; 0
    24f8:	08 95       	ret

000024fa <udd_set_address>:
    24fa:	80 93 c3 04 	sts	0x04C3, r24
    24fe:	08 95       	ret

00002500 <udd_getaddress>:
    2500:	80 91 c3 04 	lds	r24, 0x04C3
    2504:	08 95       	ret

00002506 <udd_get_frame_number>:
    2506:	80 91 2c 23 	lds	r24, 0x232C
    250a:	90 91 2d 23 	lds	r25, 0x232D
    250e:	08 95       	ret

00002510 <udd_get_micro_frame_number>:
    2510:	80 e0       	ldi	r24, 0x00	; 0
    2512:	90 e0       	ldi	r25, 0x00	; 0
    2514:	08 95       	ret

00002516 <udd_set_setup_payload>:
    2516:	80 93 3a 23 	sts	0x233A, r24
    251a:	90 93 3b 23 	sts	0x233B, r25
    251e:	60 93 3c 23 	sts	0x233C, r22
    2522:	70 93 3d 23 	sts	0x233D, r23
    2526:	08 95       	ret

00002528 <udd_ep_alloc>:
    2528:	e8 2f       	mov	r30, r24
    252a:	ef 70       	andi	r30, 0x0F	; 15
    252c:	f0 e0       	ldi	r31, 0x00	; 0
    252e:	ee 0f       	add	r30, r30
    2530:	ff 1f       	adc	r31, r31
    2532:	99 27       	eor	r25, r25
    2534:	87 fd       	sbrc	r24, 7
    2536:	90 95       	com	r25
    2538:	88 27       	eor	r24, r24
    253a:	99 0f       	add	r25, r25
    253c:	88 1f       	adc	r24, r24
    253e:	99 27       	eor	r25, r25
    2540:	e8 0f       	add	r30, r24
    2542:	f9 1f       	adc	r31, r25
    2544:	ee 0f       	add	r30, r30
    2546:	ff 1f       	adc	r31, r31
    2548:	ee 0f       	add	r30, r30
    254a:	ff 1f       	adc	r31, r31
    254c:	ee 0f       	add	r30, r30
    254e:	ff 1f       	adc	r31, r31
    2550:	e4 50       	subi	r30, 0x04	; 4
    2552:	fd 4d       	sbci	r31, 0xDD	; 221
    2554:	81 81       	ldd	r24, Z+1	; 0x01
    2556:	80 7c       	andi	r24, 0xC0	; 192
    2558:	09 f0       	breq	.+2      	; 0x255c <udd_ep_alloc+0x34>
    255a:	43 c0       	rjmp	.+134    	; 0x25e2 <udd_ep_alloc+0xba>
    255c:	63 70       	andi	r22, 0x03	; 3
    255e:	61 30       	cpi	r22, 0x01	; 1
    2560:	29 f0       	breq	.+10     	; 0x256c <udd_ep_alloc+0x44>
    2562:	10 f4       	brcc	.+4      	; 0x2568 <udd_ep_alloc+0x40>
    2564:	80 e4       	ldi	r24, 0x40	; 64
    2566:	03 c0       	rjmp	.+6      	; 0x256e <udd_ep_alloc+0x46>
    2568:	80 e8       	ldi	r24, 0x80	; 128
    256a:	01 c0       	rjmp	.+2      	; 0x256e <udd_ep_alloc+0x46>
    256c:	80 ec       	ldi	r24, 0xC0	; 192
    256e:	40 38       	cpi	r20, 0x80	; 128
    2570:	51 05       	cpc	r21, r1
    2572:	e1 f0       	breq	.+56     	; 0x25ac <udd_ep_alloc+0x84>
    2574:	50 f4       	brcc	.+20     	; 0x258a <udd_ep_alloc+0x62>
    2576:	40 32       	cpi	r20, 0x20	; 32
    2578:	51 05       	cpc	r21, r1
    257a:	a1 f0       	breq	.+40     	; 0x25a4 <udd_ep_alloc+0x7c>
    257c:	40 34       	cpi	r20, 0x40	; 64
    257e:	51 05       	cpc	r21, r1
    2580:	99 f0       	breq	.+38     	; 0x25a8 <udd_ep_alloc+0x80>
    2582:	40 31       	cpi	r20, 0x10	; 16
    2584:	51 05       	cpc	r21, r1
    2586:	61 f4       	brne	.+24     	; 0x25a0 <udd_ep_alloc+0x78>
    2588:	19 c0       	rjmp	.+50     	; 0x25bc <udd_ep_alloc+0x94>
    258a:	41 15       	cp	r20, r1
    258c:	92 e0       	ldi	r25, 0x02	; 2
    258e:	59 07       	cpc	r21, r25
    2590:	89 f0       	breq	.+34     	; 0x25b4 <udd_ep_alloc+0x8c>
    2592:	4f 3f       	cpi	r20, 0xFF	; 255
    2594:	93 e0       	ldi	r25, 0x03	; 3
    2596:	59 07       	cpc	r21, r25
    2598:	79 f0       	breq	.+30     	; 0x25b8 <udd_ep_alloc+0x90>
    259a:	41 15       	cp	r20, r1
    259c:	51 40       	sbci	r21, 0x01	; 1
    259e:	41 f0       	breq	.+16     	; 0x25b0 <udd_ep_alloc+0x88>
    25a0:	20 e0       	ldi	r18, 0x00	; 0
    25a2:	0d c0       	rjmp	.+26     	; 0x25be <udd_ep_alloc+0x96>
    25a4:	22 e0       	ldi	r18, 0x02	; 2
    25a6:	0b c0       	rjmp	.+22     	; 0x25be <udd_ep_alloc+0x96>
    25a8:	23 e0       	ldi	r18, 0x03	; 3
    25aa:	09 c0       	rjmp	.+18     	; 0x25be <udd_ep_alloc+0x96>
    25ac:	24 e0       	ldi	r18, 0x04	; 4
    25ae:	07 c0       	rjmp	.+14     	; 0x25be <udd_ep_alloc+0x96>
    25b0:	25 e0       	ldi	r18, 0x05	; 5
    25b2:	05 c0       	rjmp	.+10     	; 0x25be <udd_ep_alloc+0x96>
    25b4:	26 e0       	ldi	r18, 0x06	; 6
    25b6:	03 c0       	rjmp	.+6      	; 0x25be <udd_ep_alloc+0x96>
    25b8:	27 e0       	ldi	r18, 0x07	; 7
    25ba:	01 c0       	rjmp	.+2      	; 0x25be <udd_ep_alloc+0x96>
    25bc:	21 e0       	ldi	r18, 0x01	; 1
    25be:	11 82       	std	Z+1, r1	; 0x01
    25c0:	96 e0       	ldi	r25, 0x06	; 6
    25c2:	90 83       	st	Z, r25
    25c4:	82 2b       	or	r24, r18
    25c6:	81 83       	std	Z+1, r24	; 0x01
    25c8:	81 81       	ldd	r24, Z+1	; 0x01
    25ca:	80 7c       	andi	r24, 0xC0	; 192
    25cc:	80 3c       	cpi	r24, 0xC0	; 192
    25ce:	21 f4       	brne	.+8      	; 0x25d8 <udd_ep_alloc+0xb0>
    25d0:	81 81       	ldd	r24, Z+1	; 0x01
    25d2:	87 70       	andi	r24, 0x07	; 7
    25d4:	87 30       	cpi	r24, 0x07	; 7
    25d6:	39 f0       	breq	.+14     	; 0x25e6 <udd_ep_alloc+0xbe>
    25d8:	81 81       	ldd	r24, Z+1	; 0x01
    25da:	80 62       	ori	r24, 0x20	; 32
    25dc:	81 83       	std	Z+1, r24	; 0x01
    25de:	81 e0       	ldi	r24, 0x01	; 1
    25e0:	08 95       	ret
    25e2:	80 e0       	ldi	r24, 0x00	; 0
    25e4:	08 95       	ret
    25e6:	81 e0       	ldi	r24, 0x01	; 1
    25e8:	08 95       	ret

000025ea <udd_ep_is_halted>:
    25ea:	e8 2f       	mov	r30, r24
    25ec:	ef 70       	andi	r30, 0x0F	; 15
    25ee:	f0 e0       	ldi	r31, 0x00	; 0
    25f0:	ee 0f       	add	r30, r30
    25f2:	ff 1f       	adc	r31, r31
    25f4:	99 27       	eor	r25, r25
    25f6:	87 fd       	sbrc	r24, 7
    25f8:	90 95       	com	r25
    25fa:	88 27       	eor	r24, r24
    25fc:	99 0f       	add	r25, r25
    25fe:	88 1f       	adc	r24, r24
    2600:	99 27       	eor	r25, r25
    2602:	e8 0f       	add	r30, r24
    2604:	f9 1f       	adc	r31, r25
    2606:	ee 0f       	add	r30, r30
    2608:	ff 1f       	adc	r31, r31
    260a:	ee 0f       	add	r30, r30
    260c:	ff 1f       	adc	r31, r31
    260e:	ee 0f       	add	r30, r30
    2610:	ff 1f       	adc	r31, r31
    2612:	e4 50       	subi	r30, 0x04	; 4
    2614:	fd 4d       	sbci	r31, 0xDD	; 221
    2616:	81 81       	ldd	r24, Z+1	; 0x01
    2618:	82 fb       	bst	r24, 2
    261a:	88 27       	eor	r24, r24
    261c:	80 f9       	bld	r24, 0
    261e:	08 95       	ret

00002620 <udd_ep_clear_halt>:
    2620:	e8 2f       	mov	r30, r24
    2622:	ef 70       	andi	r30, 0x0F	; 15
    2624:	f0 e0       	ldi	r31, 0x00	; 0
    2626:	ee 0f       	add	r30, r30
    2628:	ff 1f       	adc	r31, r31
    262a:	28 2f       	mov	r18, r24
    262c:	33 27       	eor	r19, r19
    262e:	27 fd       	sbrc	r18, 7
    2630:	30 95       	com	r19
    2632:	22 27       	eor	r18, r18
    2634:	33 0f       	add	r19, r19
    2636:	22 1f       	adc	r18, r18
    2638:	33 27       	eor	r19, r19
    263a:	e2 0f       	add	r30, r18
    263c:	f3 1f       	adc	r31, r19
    263e:	ee 0f       	add	r30, r30
    2640:	ff 1f       	adc	r31, r31
    2642:	ee 0f       	add	r30, r30
    2644:	ff 1f       	adc	r31, r31
    2646:	ee 0f       	add	r30, r30
    2648:	ff 1f       	adc	r31, r31
    264a:	e4 50       	subi	r30, 0x04	; 4
    264c:	fd 4d       	sbci	r31, 0xDD	; 221
    264e:	91 81       	ldd	r25, Z+1	; 0x01
    2650:	92 ff       	sbrs	r25, 2
    2652:	0e c0       	rjmp	.+28     	; 0x2670 <udd_ep_clear_halt+0x50>
    2654:	91 81       	ldd	r25, Z+1	; 0x01
    2656:	9b 7f       	andi	r25, 0xFB	; 251
    2658:	91 83       	std	Z+1, r25	; 0x01
    265a:	17 dd       	rcall	.-1490   	; 0x208a <udd_ep_get_job>
    265c:	fc 01       	movw	r30, r24
    265e:	80 81       	ld	r24, Z
    2660:	80 ff       	sbrs	r24, 0
    2662:	06 c0       	rjmp	.+12     	; 0x2670 <udd_ep_clear_halt+0x50>
    2664:	8e 7f       	andi	r24, 0xFE	; 254
    2666:	80 83       	st	Z, r24
    2668:	07 80       	ldd	r0, Z+7	; 0x07
    266a:	f0 85       	ldd	r31, Z+8	; 0x08
    266c:	e0 2d       	mov	r30, r0
    266e:	19 95       	eicall
    2670:	81 e0       	ldi	r24, 0x01	; 1
    2672:	08 95       	ret

00002674 <udd_ep_run>:
    2674:	7f 92       	push	r7
    2676:	8f 92       	push	r8
    2678:	9f 92       	push	r9
    267a:	af 92       	push	r10
    267c:	bf 92       	push	r11
    267e:	cf 92       	push	r12
    2680:	df 92       	push	r13
    2682:	ef 92       	push	r14
    2684:	ff 92       	push	r15
    2686:	0f 93       	push	r16
    2688:	1f 93       	push	r17
    268a:	cf 93       	push	r28
    268c:	df 93       	push	r29
    268e:	98 2e       	mov	r9, r24
    2690:	86 2e       	mov	r8, r22
    2692:	5a 01       	movw	r10, r20
    2694:	69 01       	movw	r12, r18
    2696:	f9 dc       	rcall	.-1550   	; 0x208a <udd_ep_get_job>
    2698:	7c 01       	movw	r14, r24
    269a:	79 2c       	mov	r7, r9
    269c:	77 1c       	adc	r7, r7
    269e:	77 24       	eor	r7, r7
    26a0:	77 1c       	adc	r7, r7
    26a2:	c9 2d       	mov	r28, r9
    26a4:	cf 70       	andi	r28, 0x0F	; 15
    26a6:	d0 e0       	ldi	r29, 0x00	; 0
    26a8:	cc 0f       	add	r28, r28
    26aa:	dd 1f       	adc	r29, r29
    26ac:	c7 0d       	add	r28, r7
    26ae:	d1 1d       	adc	r29, r1
    26b0:	cc 0f       	add	r28, r28
    26b2:	dd 1f       	adc	r29, r29
    26b4:	cc 0f       	add	r28, r28
    26b6:	dd 1f       	adc	r29, r29
    26b8:	cc 0f       	add	r28, r28
    26ba:	dd 1f       	adc	r29, r29
    26bc:	c4 50       	subi	r28, 0x04	; 4
    26be:	dd 4d       	sbci	r29, 0xDD	; 221
    26c0:	89 81       	ldd	r24, Y+1	; 0x01
    26c2:	80 7c       	andi	r24, 0xC0	; 192
    26c4:	09 f4       	brne	.+2      	; 0x26c8 <udd_ep_run+0x54>
    26c6:	4c c0       	rjmp	.+152    	; 0x2760 <udd_ep_run+0xec>
    26c8:	89 81       	ldd	r24, Y+1	; 0x01
    26ca:	80 7c       	andi	r24, 0xC0	; 192
    26cc:	80 3c       	cpi	r24, 0xC0	; 192
    26ce:	19 f0       	breq	.+6      	; 0x26d6 <udd_ep_run+0x62>
    26d0:	89 81       	ldd	r24, Y+1	; 0x01
    26d2:	82 fd       	sbrc	r24, 2
    26d4:	47 c0       	rjmp	.+142    	; 0x2764 <udd_ep_run+0xf0>
    26d6:	8f b7       	in	r24, 0x3f	; 63
    26d8:	f8 94       	cli
    26da:	f7 01       	movw	r30, r14
    26dc:	90 81       	ld	r25, Z
    26de:	90 ff       	sbrs	r25, 0
    26e0:	03 c0       	rjmp	.+6      	; 0x26e8 <udd_ep_run+0x74>
    26e2:	8f bf       	out	0x3f, r24	; 63
    26e4:	71 2c       	mov	r7, r1
    26e6:	3f c0       	rjmp	.+126    	; 0x2766 <udd_ep_run+0xf2>
    26e8:	f7 01       	movw	r30, r14
    26ea:	90 81       	ld	r25, Z
    26ec:	91 60       	ori	r25, 0x01	; 1
    26ee:	90 83       	st	Z, r25
    26f0:	8f bf       	out	0x3f, r24	; 63
    26f2:	f7 01       	movw	r30, r14
    26f4:	a1 82       	std	Z+1, r10	; 0x01
    26f6:	b2 82       	std	Z+2, r11	; 0x02
    26f8:	c3 82       	std	Z+3, r12	; 0x03
    26fa:	d4 82       	std	Z+4, r13	; 0x04
    26fc:	15 82       	std	Z+5, r1	; 0x05
    26fe:	16 82       	std	Z+6, r1	; 0x06
    2700:	07 83       	std	Z+7, r16	; 0x07
    2702:	10 87       	std	Z+8, r17	; 0x08
    2704:	81 10       	cpse	r8, r1
    2706:	06 c0       	rjmp	.+12     	; 0x2714 <udd_ep_run+0xa0>
    2708:	91 e0       	ldi	r25, 0x01	; 1
    270a:	c1 14       	cp	r12, r1
    270c:	d1 04       	cpc	r13, r1
    270e:	19 f0       	breq	.+6      	; 0x2716 <udd_ep_run+0xa2>
    2710:	90 e0       	ldi	r25, 0x00	; 0
    2712:	01 c0       	rjmp	.+2      	; 0x2716 <udd_ep_run+0xa2>
    2714:	91 e0       	ldi	r25, 0x01	; 1
    2716:	f7 01       	movw	r30, r14
    2718:	80 81       	ld	r24, Z
    271a:	90 fb       	bst	r25, 0
    271c:	81 f9       	bld	r24, 1
    271e:	8b 7f       	andi	r24, 0xFB	; 251
    2720:	80 83       	st	Z, r24
    2722:	77 20       	and	r7, r7
    2724:	19 f0       	breq	.+6      	; 0x272c <udd_ep_run+0xb8>
    2726:	1e 82       	std	Y+6, r1	; 0x06
    2728:	1f 82       	std	Y+7, r1	; 0x07
    272a:	15 c0       	rjmp	.+42     	; 0x2756 <udd_ep_run+0xe2>
    272c:	89 81       	ldd	r24, Y+1	; 0x01
    272e:	80 7c       	andi	r24, 0xC0	; 192
    2730:	80 3c       	cpi	r24, 0xC0	; 192
    2732:	69 f4       	brne	.+26     	; 0x274e <udd_ep_run+0xda>
    2734:	ce 01       	movw	r24, r28
    2736:	84 dc       	rcall	.-1784   	; 0x2040 <udd_ep_get_size>
    2738:	bc 01       	movw	r22, r24
    273a:	c6 01       	movw	r24, r12
    273c:	0e 94 d6 1c 	call	0x39ac	; 0x39ac <__udivmodhi4>
    2740:	89 2b       	or	r24, r25
    2742:	29 f0       	breq	.+10     	; 0x274e <udd_ep_run+0xda>
    2744:	f7 01       	movw	r30, r14
    2746:	80 81       	ld	r24, Z
    2748:	8e 7f       	andi	r24, 0xFE	; 254
    274a:	80 83       	st	Z, r24
    274c:	0c c0       	rjmp	.+24     	; 0x2766 <udd_ep_run+0xf2>
    274e:	1a 82       	std	Y+2, r1	; 0x02
    2750:	1b 82       	std	Y+3, r1	; 0x03
    2752:	1e 82       	std	Y+6, r1	; 0x06
    2754:	1f 82       	std	Y+7, r1	; 0x07
    2756:	89 2d       	mov	r24, r9
    2758:	23 dd       	rcall	.-1466   	; 0x21a0 <udd_ep_trans_complet>
    275a:	77 24       	eor	r7, r7
    275c:	73 94       	inc	r7
    275e:	03 c0       	rjmp	.+6      	; 0x2766 <udd_ep_run+0xf2>
    2760:	71 2c       	mov	r7, r1
    2762:	01 c0       	rjmp	.+2      	; 0x2766 <udd_ep_run+0xf2>
    2764:	71 2c       	mov	r7, r1
    2766:	87 2d       	mov	r24, r7
    2768:	df 91       	pop	r29
    276a:	cf 91       	pop	r28
    276c:	1f 91       	pop	r17
    276e:	0f 91       	pop	r16
    2770:	ff 90       	pop	r15
    2772:	ef 90       	pop	r14
    2774:	df 90       	pop	r13
    2776:	cf 90       	pop	r12
    2778:	bf 90       	pop	r11
    277a:	af 90       	pop	r10
    277c:	9f 90       	pop	r9
    277e:	8f 90       	pop	r8
    2780:	7f 90       	pop	r7
    2782:	08 95       	ret

00002784 <udd_ep_abort>:
    2784:	ff 92       	push	r15
    2786:	0f 93       	push	r16
    2788:	1f 93       	push	r17
    278a:	cf 93       	push	r28
    278c:	df 93       	push	r29
    278e:	18 2f       	mov	r17, r24
    2790:	f8 2e       	mov	r15, r24
    2792:	ff 1c       	adc	r15, r15
    2794:	ff 24       	eor	r15, r15
    2796:	ff 1c       	adc	r15, r15
    2798:	c8 2f       	mov	r28, r24
    279a:	cf 70       	andi	r28, 0x0F	; 15
    279c:	d0 e0       	ldi	r29, 0x00	; 0
    279e:	cc 0f       	add	r28, r28
    27a0:	dd 1f       	adc	r29, r29
    27a2:	cf 0d       	add	r28, r15
    27a4:	d1 1d       	adc	r29, r1
    27a6:	cc 0f       	add	r28, r28
    27a8:	dd 1f       	adc	r29, r29
    27aa:	cc 0f       	add	r28, r28
    27ac:	dd 1f       	adc	r29, r29
    27ae:	cc 0f       	add	r28, r28
    27b0:	dd 1f       	adc	r29, r29
    27b2:	c4 50       	subi	r28, 0x04	; 4
    27b4:	dd 4d       	sbci	r29, 0xDD	; 221
    27b6:	69 dc       	rcall	.-1838   	; 0x208a <udd_ep_get_job>
    27b8:	dc 01       	movw	r26, r24
    27ba:	fe 01       	movw	r30, r28
    27bc:	02 e0       	ldi	r16, 0x02	; 2
    27be:	05 93       	las	Z, r16
    27c0:	8c 91       	ld	r24, X
    27c2:	80 ff       	sbrs	r24, 0
    27c4:	12 c0       	rjmp	.+36     	; 0x27ea <udd_ep_abort+0x66>
    27c6:	8e 7f       	andi	r24, 0xFE	; 254
    27c8:	8c 93       	st	X, r24
    27ca:	17 96       	adiw	r26, 0x07	; 7
    27cc:	ed 91       	ld	r30, X+
    27ce:	fc 91       	ld	r31, X
    27d0:	18 97       	sbiw	r26, 0x08	; 8
    27d2:	30 97       	sbiw	r30, 0x00	; 0
    27d4:	51 f0       	breq	.+20     	; 0x27ea <udd_ep_abort+0x66>
    27d6:	ff 20       	and	r15, r15
    27d8:	19 f0       	breq	.+6      	; 0x27e0 <udd_ep_abort+0x5c>
    27da:	6e 81       	ldd	r22, Y+6	; 0x06
    27dc:	7f 81       	ldd	r23, Y+7	; 0x07
    27de:	02 c0       	rjmp	.+4      	; 0x27e4 <udd_ep_abort+0x60>
    27e0:	6a 81       	ldd	r22, Y+2	; 0x02
    27e2:	7b 81       	ldd	r23, Y+3	; 0x03
    27e4:	41 2f       	mov	r20, r17
    27e6:	81 e0       	ldi	r24, 0x01	; 1
    27e8:	19 95       	eicall
    27ea:	df 91       	pop	r29
    27ec:	cf 91       	pop	r28
    27ee:	1f 91       	pop	r17
    27f0:	0f 91       	pop	r16
    27f2:	ff 90       	pop	r15
    27f4:	08 95       	ret

000027f6 <udd_ep_free>:
    27f6:	cf 93       	push	r28
    27f8:	c8 2f       	mov	r28, r24
    27fa:	c4 df       	rcall	.-120    	; 0x2784 <udd_ep_abort>
    27fc:	ec 2f       	mov	r30, r28
    27fe:	ef 70       	andi	r30, 0x0F	; 15
    2800:	f0 e0       	ldi	r31, 0x00	; 0
    2802:	ee 0f       	add	r30, r30
    2804:	ff 1f       	adc	r31, r31
    2806:	8c 2f       	mov	r24, r28
    2808:	99 27       	eor	r25, r25
    280a:	87 fd       	sbrc	r24, 7
    280c:	90 95       	com	r25
    280e:	88 27       	eor	r24, r24
    2810:	99 0f       	add	r25, r25
    2812:	88 1f       	adc	r24, r24
    2814:	99 27       	eor	r25, r25
    2816:	e8 0f       	add	r30, r24
    2818:	f9 1f       	adc	r31, r25
    281a:	ee 0f       	add	r30, r30
    281c:	ff 1f       	adc	r31, r31
    281e:	ee 0f       	add	r30, r30
    2820:	ff 1f       	adc	r31, r31
    2822:	ee 0f       	add	r30, r30
    2824:	ff 1f       	adc	r31, r31
    2826:	e4 50       	subi	r30, 0x04	; 4
    2828:	fd 4d       	sbci	r31, 0xDD	; 221
    282a:	11 82       	std	Z+1, r1	; 0x01
    282c:	cf 91       	pop	r28
    282e:	08 95       	ret

00002830 <udd_ep_set_halt>:
    2830:	0f 93       	push	r16
    2832:	e8 2f       	mov	r30, r24
    2834:	ef 70       	andi	r30, 0x0F	; 15
    2836:	f0 e0       	ldi	r31, 0x00	; 0
    2838:	ee 0f       	add	r30, r30
    283a:	ff 1f       	adc	r31, r31
    283c:	28 2f       	mov	r18, r24
    283e:	33 27       	eor	r19, r19
    2840:	27 fd       	sbrc	r18, 7
    2842:	30 95       	com	r19
    2844:	22 27       	eor	r18, r18
    2846:	33 0f       	add	r19, r19
    2848:	22 1f       	adc	r18, r18
    284a:	33 27       	eor	r19, r19
    284c:	e2 0f       	add	r30, r18
    284e:	f3 1f       	adc	r31, r19
    2850:	ee 0f       	add	r30, r30
    2852:	ff 1f       	adc	r31, r31
    2854:	ee 0f       	add	r30, r30
    2856:	ff 1f       	adc	r31, r31
    2858:	ee 0f       	add	r30, r30
    285a:	ff 1f       	adc	r31, r31
    285c:	e4 50       	subi	r30, 0x04	; 4
    285e:	fd 4d       	sbci	r31, 0xDD	; 221
    2860:	91 81       	ldd	r25, Z+1	; 0x01
    2862:	94 60       	ori	r25, 0x04	; 4
    2864:	91 83       	std	Z+1, r25	; 0x01
    2866:	01 e0       	ldi	r16, 0x01	; 1
    2868:	06 93       	lac	Z, r16
    286a:	8c df       	rcall	.-232    	; 0x2784 <udd_ep_abort>
    286c:	81 e0       	ldi	r24, 0x01	; 1
    286e:	0f 91       	pop	r16
    2870:	08 95       	ret

00002872 <__vector_125>:
 * USB bus event interrupt includes :
 * - USB line events SOF, reset, suspend, resume, wakeup
 * - endpoint control errors underflow, overflow, stall
 */
ISR(USB_BUSEVENT_vect)
{
    2872:	1f 92       	push	r1
    2874:	0f 92       	push	r0
    2876:	0f b6       	in	r0, 0x3f	; 63
    2878:	0f 92       	push	r0
    287a:	11 24       	eor	r1, r1
    287c:	0b b6       	in	r0, 0x3b	; 59
    287e:	0f 92       	push	r0
    2880:	0f 93       	push	r16
    2882:	2f 93       	push	r18
    2884:	3f 93       	push	r19
    2886:	4f 93       	push	r20
    2888:	5f 93       	push	r21
    288a:	6f 93       	push	r22
    288c:	7f 93       	push	r23
    288e:	8f 93       	push	r24
    2890:	9f 93       	push	r25
    2892:	af 93       	push	r26
    2894:	bf 93       	push	r27
    2896:	ef 93       	push	r30
    2898:	ff 93       	push	r31
	if (udd_is_start_of_frame_event()) {
    289a:	80 91 cb 04 	lds	r24, 0x04CB
    289e:	88 23       	and	r24, r24
    28a0:	34 f4       	brge	.+12     	; 0x28ae <__vector_125+0x3c>
		udd_ack_start_of_frame_event();
    28a2:	80 e8       	ldi	r24, 0x80	; 128
    28a4:	80 93 ca 04 	sts	0x04CA, r24
		udc_sof_notify();
    28a8:	0e 94 77 04 	call	0x8ee	; 0x8ee <udc_sof_notify>
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
#endif
		goto udd_interrupt_bus_event_end;
    28ac:	88 c0       	rjmp	.+272    	; 0x29be <__vector_125+0x14c>
}

static bool udd_ctrl_interrupt_error(void)
{
	// Underflow only managed for control endpoint
	if (udd_is_underflow_event()) {
    28ae:	80 91 cb 04 	lds	r24, 0x04CB
    28b2:	82 ff       	sbrs	r24, 2
    28b4:	20 c0       	rjmp	.+64     	; 0x28f6 <__vector_125+0x84>
		udd_ack_underflow_event();
    28b6:	84 e0       	ldi	r24, 0x04	; 4
    28b8:	80 93 ca 04 	sts	0x04CA, r24
		if (udd_control_in_underflow()) {
    28bc:	80 91 04 23 	lds	r24, 0x2304
    28c0:	86 ff       	sbrs	r24, 6
    28c2:	7d c0       	rjmp	.+250    	; 0x29be <__vector_125+0x14c>
	udd_control_out_clear_NACK0();
}

static void udd_ctrl_underflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    28c4:	80 91 cc 04 	lds	r24, 0x04CC
    28c8:	81 fd       	sbrc	r24, 1
    28ca:	79 c0       	rjmp	.+242    	; 0x29be <__vector_125+0x14c>
    28cc:	f9 db       	rcall	.-2062   	; 0x20c0 <udd_ctrl_interrupt_tc_setup>
    28ce:	81 11       	cpse	r24, r1
    28d0:	76 c0       	rjmp	.+236    	; 0x29be <__vector_125+0x14c>
		return; // underflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    28d2:	80 91 ed 22 	lds	r24, 0x22ED
    28d6:	81 30       	cpi	r24, 0x01	; 1
    28d8:	11 f4       	brne	.+4      	; 0x28de <__vector_125+0x6c>
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
    28da:	2e db       	rcall	.-2468   	; 0x1f38 <udd_ctrl_send_zlp_in>
    28dc:	70 c0       	rjmp	.+224    	; 0x29be <__vector_125+0x14c>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    28de:	84 30       	cpi	r24, 0x04	; 4
    28e0:	09 f0       	breq	.+2      	; 0x28e4 <__vector_125+0x72>
    28e2:	6d c0       	rjmp	.+218    	; 0x29be <__vector_125+0x14c>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data and following status stage
		udd_control_in_enable_stall();
    28e4:	e5 e0       	ldi	r30, 0x05	; 5
    28e6:	f3 e2       	ldi	r31, 0x23	; 35
    28e8:	04 e0       	ldi	r16, 0x04	; 4
    28ea:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    28ec:	ed ef       	ldi	r30, 0xFD	; 253
    28ee:	f2 e2       	ldi	r31, 0x22	; 34
    28f0:	04 e0       	ldi	r16, 0x04	; 4
    28f2:	05 93       	las	Z, r16
    28f4:	64 c0       	rjmp	.+200    	; 0x29be <__vector_125+0x14c>
			udd_ctrl_underflow();
		}
		return true;
	}
	// Overflow only managed for control endpoint
	if (udd_is_overflow_event()) {
    28f6:	80 91 cb 04 	lds	r24, 0x04CB
    28fa:	81 ff       	sbrs	r24, 1
    28fc:	5b c0       	rjmp	.+182    	; 0x29b4 <__vector_125+0x142>
		udd_ack_overflow_event();
    28fe:	82 e0       	ldi	r24, 0x02	; 2
    2900:	80 93 ca 04 	sts	0x04CA, r24
		if (udd_control_out_overflow()) {
    2904:	80 91 fc 22 	lds	r24, 0x22FC
    2908:	86 ff       	sbrs	r24, 6
    290a:	59 c0       	rjmp	.+178    	; 0x29be <__vector_125+0x14c>
	}
}

static void udd_ctrl_overflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    290c:	80 91 cc 04 	lds	r24, 0x04CC
    2910:	81 fd       	sbrc	r24, 1
    2912:	55 c0       	rjmp	.+170    	; 0x29be <__vector_125+0x14c>
    2914:	d5 db       	rcall	.-2134   	; 0x20c0 <udd_ctrl_interrupt_tc_setup>
    2916:	81 11       	cpse	r24, r1
    2918:	52 c0       	rjmp	.+164    	; 0x29be <__vector_125+0x14c>
		return; // overflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    291a:	80 91 ed 22 	lds	r24, 0x22ED
    291e:	82 30       	cpi	r24, 0x02	; 2
    2920:	41 f4       	brne	.+16     	; 0x2932 <__vector_125+0xc0>
	udd_control_in_clear_NACK0();
}

static void udd_ctrl_send_zlp_out(void)
{
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    2922:	84 e0       	ldi	r24, 0x04	; 4
    2924:	80 93 ed 22 	sts	0x22ED, r24
	// Valid reception of OUT packet on control endpoint
	udd_control_out_clear_NACK0();
    2928:	ec ef       	ldi	r30, 0xFC	; 252
    292a:	f2 e2       	ldi	r31, 0x22	; 34
    292c:	02 e0       	ldi	r16, 0x02	; 2
    292e:	06 93       	lac	Z, r16
    2930:	46 c0       	rjmp	.+140    	; 0x29be <__vector_125+0x14c>
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
		// Host want to stop IN transaction
		// then stop to wait IN data phase and wait OUT ZLP handshake
		udd_ctrl_send_zlp_out();
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    2932:	83 30       	cpi	r24, 0x03	; 3
    2934:	09 f0       	breq	.+2      	; 0x2938 <__vector_125+0xc6>
    2936:	43 c0       	rjmp	.+134    	; 0x29be <__vector_125+0x14c>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data and following status stage
		udd_control_in_enable_stall();
    2938:	e5 e0       	ldi	r30, 0x05	; 5
    293a:	f3 e2       	ldi	r31, 0x23	; 35
    293c:	04 e0       	ldi	r16, 0x04	; 4
    293e:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    2940:	ed ef       	ldi	r30, 0xFD	; 253
    2942:	f2 e2       	ldi	r31, 0x22	; 34
    2944:	04 e0       	ldi	r16, 0x04	; 4
    2946:	05 93       	las	Z, r16
    2948:	3a c0       	rjmp	.+116    	; 0x29be <__vector_125+0x14c>

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
		udd_ack_reset_event();
    294a:	80 e1       	ldi	r24, 0x10	; 16
    294c:	80 93 ca 04 	sts	0x04CA, r24
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i < USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
    2950:	81 e0       	ldi	r24, 0x01	; 1
    2952:	18 df       	rcall	.-464    	; 0x2784 <udd_ep_abort>
			udd_ep_abort(i | USB_EP_DIR_IN);
    2954:	81 e8       	ldi	r24, 0x81	; 129
    2956:	16 df       	rcall	.-468    	; 0x2784 <udd_ep_abort>
		}
#endif
		udc_reset();
    2958:	0e 94 50 04 	call	0x8a0	; 0x8a0 <udc_reset>

		// Reset USB address to 0
		udd_set_device_address(0);
    295c:	10 92 c3 04 	sts	0x04C3, r1
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    2960:	ed ef       	ldi	r30, 0xFD	; 253
    2962:	f2 e2       	ldi	r31, 0x22	; 34
    2964:	10 82       	st	Z, r1
	udd_endpoint_clear_status(ep_ctrl);
    2966:	96 e0       	ldi	r25, 0x06	; 6
    2968:	90 93 fc 22 	sts	0x22FC, r25
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    296c:	83 e4       	ldi	r24, 0x43	; 67
    296e:	80 83       	st	Z, r24
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    2970:	e5 e0       	ldi	r30, 0x05	; 5
    2972:	f3 e2       	ldi	r31, 0x23	; 35
    2974:	10 82       	st	Z, r1
	udd_endpoint_clear_status(ep_ctrl);
    2976:	90 93 04 23 	sts	0x2304, r25
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    297a:	80 83       	st	Z, r24
		udd_set_device_address(0);
		// Alloc and configure control endpoint
		udd_ep_init(0, USB_EP_TYPE_CONTROL, USB_DEVICE_EP_CTRL_SIZE);
		udd_ep_init(0 | USB_EP_DIR_IN, USB_EP_TYPE_CONTROL,
				USB_DEVICE_EP_CTRL_SIZE);
		udd_control_out_set_buf(&udd_ctrl_buffer);
    297c:	89 ea       	ldi	r24, 0xA9	; 169
    297e:	92 e2       	ldi	r25, 0x22	; 34
    2980:	80 93 00 23 	sts	0x2300, r24
    2984:	90 93 01 23 	sts	0x2301, r25
		// Reset endpoint control management
		udd_ctrl_init();
    2988:	9e da       	rcall	.-2756   	; 0x1ec6 <udd_ctrl_init>
		goto udd_interrupt_bus_event_end;
    298a:	19 c0       	rjmp	.+50     	; 0x29be <__vector_125+0x14c>
	}

	if (udd_is_suspend_event()) {
    298c:	80 91 cb 04 	lds	r24, 0x04CB
    2990:	86 ff       	sbrs	r24, 6
    2992:	06 c0       	rjmp	.+12     	; 0x29a0 <__vector_125+0x12e>
		udd_ack_suspend_event();
    2994:	80 e4       	ldi	r24, 0x40	; 64
    2996:	80 93 ca 04 	sts	0x04CA, r24
		udd_sleep_mode(false); // Enter in SUSPEND mode
    299a:	80 e0       	ldi	r24, 0x00	; 0
    299c:	75 da       	rcall	.-2838   	; 0x1e88 <udd_sleep_mode>
#ifdef UDC_SUSPEND_EVENT
		UDC_SUSPEND_EVENT();
#endif
		goto udd_interrupt_bus_event_end;
    299e:	0f c0       	rjmp	.+30     	; 0x29be <__vector_125+0x14c>
	}

	if (udd_is_resume_event()) {
    29a0:	80 91 cb 04 	lds	r24, 0x04CB
    29a4:	85 ff       	sbrs	r24, 5
    29a6:	0b c0       	rjmp	.+22     	; 0x29be <__vector_125+0x14c>
		udd_ack_resume_event();
    29a8:	80 e2       	ldi	r24, 0x20	; 32
    29aa:	80 93 ca 04 	sts	0x04CA, r24
		udd_sleep_mode(true); // Enter in power reduction mode
    29ae:	81 e0       	ldi	r24, 0x01	; 1
    29b0:	6b da       	rcall	.-2858   	; 0x1e88 <udd_sleep_mode>
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
#endif
		goto udd_interrupt_bus_event_end;
    29b2:	05 c0       	rjmp	.+10     	; 0x29be <__vector_125+0x14c>
	}

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
    29b4:	80 91 cb 04 	lds	r24, 0x04CB
    29b8:	84 ff       	sbrs	r24, 4
    29ba:	e8 cf       	rjmp	.-48     	; 0x298c <__vector_125+0x11a>
    29bc:	c6 cf       	rjmp	.-116    	; 0x294a <__vector_125+0xd8>
		goto udd_interrupt_bus_event_end;
	}

udd_interrupt_bus_event_end:
	return;
}
    29be:	ff 91       	pop	r31
    29c0:	ef 91       	pop	r30
    29c2:	bf 91       	pop	r27
    29c4:	af 91       	pop	r26
    29c6:	9f 91       	pop	r25
    29c8:	8f 91       	pop	r24
    29ca:	7f 91       	pop	r23
    29cc:	6f 91       	pop	r22
    29ce:	5f 91       	pop	r21
    29d0:	4f 91       	pop	r20
    29d2:	3f 91       	pop	r19
    29d4:	2f 91       	pop	r18
    29d6:	0f 91       	pop	r16
    29d8:	0f 90       	pop	r0
    29da:	0b be       	out	0x3b, r0	; 59
    29dc:	0f 90       	pop	r0
    29de:	0f be       	out	0x3f, r0	; 63
    29e0:	0f 90       	pop	r0
    29e2:	1f 90       	pop	r1
    29e4:	18 95       	reti

000029e6 <__vector_126>:
 * \brief Function called by USB transfer complete interrupt
 *
 * USB transfer complete interrupt includes events about endpoint transfer on all endpoints.
 */
ISR(USB_TRNCOMPL_vect)
{
    29e6:	1f 92       	push	r1
    29e8:	0f 92       	push	r0
    29ea:	0f b6       	in	r0, 0x3f	; 63
    29ec:	0f 92       	push	r0
    29ee:	11 24       	eor	r1, r1
    29f0:	0b b6       	in	r0, 0x3b	; 59
    29f2:	0f 92       	push	r0
    29f4:	0f 93       	push	r16
    29f6:	1f 93       	push	r17
    29f8:	2f 93       	push	r18
    29fa:	3f 93       	push	r19
    29fc:	4f 93       	push	r20
    29fe:	5f 93       	push	r21
    2a00:	6f 93       	push	r22
    2a02:	7f 93       	push	r23
    2a04:	8f 93       	push	r24
    2a06:	9f 93       	push	r25
    2a08:	af 93       	push	r26
    2a0a:	bf 93       	push	r27
    2a0c:	cf 93       	push	r28
    2a0e:	df 93       	push	r29
    2a10:	ef 93       	push	r30
    2a12:	ff 93       	push	r31
	int8_t rp;
	UDD_EP_t *ep_ctrl;
	udd_ep_id_t ep;
#endif

	if (!udd_is_tc_event()) {
    2a14:	80 91 cc 04 	lds	r24, 0x04CC
    2a18:	81 fd       	sbrc	r24, 1
    2a1a:	03 c0       	rjmp	.+6      	; 0x2a22 <__vector_126+0x3c>
		// If no other transfer complete
		// then check reception of SETUP packet on control endpoint
		if (udd_ctrl_interrupt_tc_setup()) {
    2a1c:	51 db       	rcall	.-2398   	; 0x20c0 <udd_ctrl_interrupt_tc_setup>
    2a1e:	81 11       	cpse	r24, r1
    2a20:	b8 c0       	rjmp	.+368    	; 0x2b92 <__vector_126+0x1ac>
			goto udd_interrupt_tc_end;
		}
		Assert(false);
	}
	// Check IN/OUT transfer complete on all endpoints
	udd_ack_tc_event();
    2a22:	82 e0       	ldi	r24, 0x02	; 2
    2a24:	80 93 cc 04 	sts	0x04CC, r24

#if (0!=USB_DEVICE_MAX_EP)
	//** Decode TC FIFO
	// Compute ep addr
	rp = udd_get_fifo_rp();
    2a28:	80 91 c5 04 	lds	r24, 0x04C5
	i_fifo = 2 * (1 + ~rp);
    2a2c:	81 95       	neg	r24
    2a2e:	88 0f       	add	r24, r24
	ad = ((uint16_t) udd_sram.ep_ctrl) - i_fifo;
    2a30:	ec ef       	ldi	r30, 0xFC	; 252
    2a32:	f2 e2       	ldi	r31, 0x22	; 34
    2a34:	e8 1b       	sub	r30, r24
    2a36:	f1 09       	sbc	r31, r1
	p_ad = (uint16_t *) ad;
	// Compute ep
	ep_index = (((uint16_t) * p_ad - ((uint16_t) udd_sram.ep_ctrl)) >> 3);
    2a38:	20 81       	ld	r18, Z
    2a3a:	31 81       	ldd	r19, Z+1	; 0x01
    2a3c:	2c 5f       	subi	r18, 0xFC	; 252
    2a3e:	32 42       	sbci	r19, 0x22	; 34
    2a40:	36 95       	lsr	r19
    2a42:	27 95       	ror	r18
    2a44:	36 95       	lsr	r19
    2a46:	27 95       	ror	r18
    2a48:	36 95       	lsr	r19
    2a4a:	27 95       	ror	r18
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
    2a4c:	82 2f       	mov	r24, r18
    2a4e:	86 95       	lsr	r24
    2a50:	20 ff       	sbrs	r18, 0
    2a52:	02 c0       	rjmp	.+4      	; 0x2a58 <__vector_126+0x72>
    2a54:	90 e8       	ldi	r25, 0x80	; 128
    2a56:	01 c0       	rjmp	.+2      	; 0x2a5a <__vector_126+0x74>
    2a58:	90 e0       	ldi	r25, 0x00	; 0
    2a5a:	89 0f       	add	r24, r25
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    2a5c:	e8 2f       	mov	r30, r24
    2a5e:	ef 70       	andi	r30, 0x0F	; 15
    2a60:	f0 e0       	ldi	r31, 0x00	; 0
    2a62:	ee 0f       	add	r30, r30
    2a64:	ff 1f       	adc	r31, r31
			((ep & USB_EP_DIR_IN) ? 1 : 0))];
    2a66:	28 2f       	mov	r18, r24
    2a68:	33 27       	eor	r19, r19
    2a6a:	27 fd       	sbrc	r18, 7
    2a6c:	30 95       	com	r19
    2a6e:	22 27       	eor	r18, r18
    2a70:	33 0f       	add	r19, r19
    2a72:	22 1f       	adc	r18, r18
    2a74:	33 27       	eor	r19, r19
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    2a76:	e2 0f       	add	r30, r18
    2a78:	f3 1f       	adc	r31, r19
	ep_index = (((uint16_t) * p_ad - ((uint16_t) udd_sram.ep_ctrl)) >> 3);
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
	Assert(USB_DEVICE_MAX_EP >= (ep & USB_EP_ADDR_MASK));

	// Ack IT TC of endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
    2a7a:	ee 0f       	add	r30, r30
    2a7c:	ff 1f       	adc	r31, r31
    2a7e:	ee 0f       	add	r30, r30
    2a80:	ff 1f       	adc	r31, r31
    2a82:	ee 0f       	add	r30, r30
    2a84:	ff 1f       	adc	r31, r31
    2a86:	e4 50       	subi	r30, 0x04	; 4
    2a88:	fd 4d       	sbci	r31, 0xDD	; 221
	if (!udd_endpoint_transfer_complete(ep_ctrl)) {
    2a8a:	90 81       	ld	r25, Z
    2a8c:	95 ff       	sbrs	r25, 5
    2a8e:	81 c0       	rjmp	.+258    	; 0x2b92 <__vector_126+0x1ac>
		return; // Error, TC is generated by Multipacket transfer
	}
	udd_endpoint_ack_transfer_complete(ep_ctrl);
    2a90:	00 e2       	ldi	r16, 0x20	; 32
    2a92:	06 93       	lac	Z, r16

	// Check status on control endpoint
	if (ep == 0) {
    2a94:	81 11       	cpse	r24, r1
    2a96:	78 c0       	rjmp	.+240    	; 0x2b88 <__vector_126+0x1a2>

static void udd_ctrl_out_received(void)
{
	uint16_t nb_data;

	if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    2a98:	80 91 ed 22 	lds	r24, 0x22ED
    2a9c:	84 30       	cpi	r24, 0x04	; 4
    2a9e:	19 f4       	brne	.+6      	; 0x2aa6 <__vector_126+0xc0>
		// Valid end of setup request
		udd_ctrl_endofrequest();
    2aa0:	59 da       	rcall	.-2894   	; 0x1f54 <udd_ctrl_endofrequest>
		// Reinitializes control endpoint management
		udd_ctrl_init();
    2aa2:	11 da       	rcall	.-3038   	; 0x1ec6 <udd_ctrl_init>
    2aa4:	76 c0       	rjmp	.+236    	; 0x2b92 <__vector_126+0x1ac>
		return;
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_OUT);

	// Read data received during OUT phase
	nb_data = udd_control_out_get_bytecnt();
    2aa6:	c0 91 fe 22 	lds	r28, 0x22FE
    2aaa:	d0 91 ff 22 	lds	r29, 0x22FF

	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    2aae:	80 91 3c 23 	lds	r24, 0x233C
    2ab2:	90 91 3d 23 	lds	r25, 0x233D
    2ab6:	00 91 e9 22 	lds	r16, 0x22E9
    2aba:	10 91 ea 22 	lds	r17, 0x22EA
    2abe:	98 01       	movw	r18, r16
    2ac0:	2c 0f       	add	r18, r28
    2ac2:	3d 1f       	adc	r19, r29
    2ac4:	82 17       	cp	r24, r18
    2ac6:	93 07       	cpc	r25, r19
    2ac8:	18 f4       	brcc	.+6      	; 0x2ad0 <__vector_126+0xea>
		// Payload buffer too small, ignore data remaining
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    2aca:	ec 01       	movw	r28, r24
    2acc:	c0 1b       	sub	r28, r16
    2ace:	d1 0b       	sbc	r29, r17
	}

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
    2ad0:	80 91 3a 23 	lds	r24, 0x233A
    2ad4:	90 91 3b 23 	lds	r25, 0x233B
    2ad8:	ae 01       	movw	r20, r28
    2ada:	69 ea       	ldi	r22, 0xA9	; 169
    2adc:	72 e2       	ldi	r23, 0x22	; 34
    2ade:	80 0f       	add	r24, r16
    2ae0:	91 1f       	adc	r25, r17
    2ae2:	af d7       	rcall	.+3934   	; 0x3a42 <memcpy>
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;
    2ae4:	0c 0f       	add	r16, r28
    2ae6:	1d 1f       	adc	r17, r29
    2ae8:	00 93 e9 22 	sts	0x22E9, r16
    2aec:	10 93 ea 22 	sts	0x22EA, r17

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    2af0:	c0 34       	cpi	r28, 0x40	; 64
    2af2:	d1 05       	cpc	r29, r1
    2af4:	69 f4       	brne	.+26     	; 0x2b10 <__vector_126+0x12a>
			<= (udd_ctrl_prev_payload_nb_trans
			+ udd_ctrl_payload_nb_trans))) {
    2af6:	80 91 eb 22 	lds	r24, 0x22EB
    2afa:	90 91 ec 22 	lds	r25, 0x22EC
    2afe:	80 0f       	add	r24, r16
    2b00:	91 1f       	adc	r25, r17

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    2b02:	20 91 38 23 	lds	r18, 0x2338
    2b06:	30 91 39 23 	lds	r19, 0x2339
    2b0a:	82 17       	cp	r24, r18
    2b0c:	93 07       	cpc	r25, r19
    2b0e:	88 f0       	brcs	.+34     	; 0x2b32 <__vector_126+0x14c>
		// End of reception because it is a short packet
		// or all data are transfered

		// Before send ZLP, call intermediate callback
		// in case of data receive generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    2b10:	00 93 3c 23 	sts	0x233C, r16
    2b14:	10 93 3d 23 	sts	0x233D, r17
		if (NULL != udd_g_ctrlreq.over_under_run) {
    2b18:	e0 91 40 23 	lds	r30, 0x2340
    2b1c:	f0 91 41 23 	lds	r31, 0x2341
    2b20:	30 97       	sbiw	r30, 0x00	; 0
    2b22:	29 f0       	breq	.+10     	; 0x2b2e <__vector_126+0x148>
			if (!udd_g_ctrlreq.over_under_run()) {
    2b24:	19 95       	eicall
    2b26:	81 11       	cpse	r24, r1
    2b28:	02 c0       	rjmp	.+4      	; 0x2b2e <__vector_126+0x148>
				// Stall ZLP
				udd_ctrl_stall_data();
    2b2a:	f8 d9       	rcall	.-3088   	; 0x1f1c <udd_ctrl_stall_data>
    2b2c:	32 c0       	rjmp	.+100    	; 0x2b92 <__vector_126+0x1ac>
				return;
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ctrl_send_zlp_in();
    2b2e:	04 da       	rcall	.-3064   	; 0x1f38 <udd_ctrl_send_zlp_in>
    2b30:	30 c0       	rjmp	.+96     	; 0x2b92 <__vector_126+0x1ac>
		return;
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    2b32:	80 91 3c 23 	lds	r24, 0x233C
    2b36:	90 91 3d 23 	lds	r25, 0x233D
    2b3a:	08 17       	cp	r16, r24
    2b3c:	19 07       	cpc	r17, r25
    2b3e:	f9 f4       	brne	.+62     	; 0x2b7e <__vector_126+0x198>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
    2b40:	e0 91 40 23 	lds	r30, 0x2340
    2b44:	f0 91 41 23 	lds	r31, 0x2341
    2b48:	30 97       	sbiw	r30, 0x00	; 0
    2b4a:	11 f4       	brne	.+4      	; 0x2b50 <__vector_126+0x16a>
			// No callback available to request a new payload buffer
			udd_ctrl_stall_data();
    2b4c:	e7 d9       	rcall	.-3122   	; 0x1f1c <udd_ctrl_stall_data>
    2b4e:	21 c0       	rjmp	.+66     	; 0x2b92 <__vector_126+0x1ac>
			return;
		}
		if (!udd_g_ctrlreq.over_under_run()) {
    2b50:	19 95       	eicall
    2b52:	81 11       	cpse	r24, r1
    2b54:	02 c0       	rjmp	.+4      	; 0x2b5a <__vector_126+0x174>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
    2b56:	e2 d9       	rcall	.-3132   	; 0x1f1c <udd_ctrl_stall_data>
    2b58:	1c c0       	rjmp	.+56     	; 0x2b92 <__vector_126+0x1ac>
			return;
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    2b5a:	20 91 eb 22 	lds	r18, 0x22EB
    2b5e:	30 91 ec 22 	lds	r19, 0x22EC
    2b62:	80 91 e9 22 	lds	r24, 0x22E9
    2b66:	90 91 ea 22 	lds	r25, 0x22EA
    2b6a:	82 0f       	add	r24, r18
    2b6c:	93 1f       	adc	r25, r19
    2b6e:	80 93 eb 22 	sts	0x22EB, r24
    2b72:	90 93 ec 22 	sts	0x22EC, r25
		// Reinit reception on payload buffer
		udd_ctrl_payload_nb_trans = 0;
    2b76:	10 92 e9 22 	sts	0x22E9, r1
    2b7a:	10 92 ea 22 	sts	0x22EA, r1
	}
	// Free buffer of OUT control endpoint to authorize next reception
	udd_control_out_clear_NACK0();
    2b7e:	ec ef       	ldi	r30, 0xFC	; 252
    2b80:	f2 e2       	ldi	r31, 0x22	; 34
    2b82:	02 e0       	ldi	r16, 0x02	; 2
    2b84:	06 93       	lac	Z, r16
    2b86:	05 c0       	rjmp	.+10     	; 0x2b92 <__vector_126+0x1ac>
	// Check status on control endpoint
	if (ep == 0) {
		udd_ctrl_out_received();
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
	}
	if (ep == (0 | USB_EP_DIR_IN)) {
    2b88:	80 38       	cpi	r24, 0x80	; 128
    2b8a:	11 f4       	brne	.+4      	; 0x2b90 <__vector_126+0x1aa>
		udd_ctrl_in_sent();
    2b8c:	eb d9       	rcall	.-3114   	; 0x1f64 <udd_ctrl_in_sent>
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
    2b8e:	01 c0       	rjmp	.+2      	; 0x2b92 <__vector_126+0x1ac>
	}
	Assert(udd_ep_is_valid(ep));
	// Manage end of transfer on endpoint bulk/interrupt/isochronous
	udd_ep_trans_complet(ep);
    2b90:	07 db       	rcall	.-2546   	; 0x21a0 <udd_ep_trans_complet>
	}
#endif

udd_interrupt_tc_end:
	return;
}
    2b92:	ff 91       	pop	r31
    2b94:	ef 91       	pop	r30
    2b96:	df 91       	pop	r29
    2b98:	cf 91       	pop	r28
    2b9a:	bf 91       	pop	r27
    2b9c:	af 91       	pop	r26
    2b9e:	9f 91       	pop	r25
    2ba0:	8f 91       	pop	r24
    2ba2:	7f 91       	pop	r23
    2ba4:	6f 91       	pop	r22
    2ba6:	5f 91       	pop	r21
    2ba8:	4f 91       	pop	r20
    2baa:	3f 91       	pop	r19
    2bac:	2f 91       	pop	r18
    2bae:	1f 91       	pop	r17
    2bb0:	0f 91       	pop	r16
    2bb2:	0f 90       	pop	r0
    2bb4:	0b be       	out	0x3b, r0	; 59
    2bb6:	0f 90       	pop	r0
    2bb8:	0f be       	out	0x3f, r0	; 63
    2bba:	0f 90       	pop	r0
    2bbc:	1f 90       	pop	r1
    2bbe:	18 95       	reti

00002bc0 <motor_init>:
#include "asf.h"
#include "motor.h"
#include "motor_config.h"
#include "pwm16.h"

void motor_init(MOTOR_OBJECT_t *motor, enum pwm_tc_t tc, enum pwm_channel_t channel, uint16_t freq_hz, port_pin_t pwm_pin, port_pin_t dir_pin) {
    2bc0:	6f 92       	push	r6
    2bc2:	7f 92       	push	r7
    2bc4:	8f 92       	push	r8
    2bc6:	9f 92       	push	r9
    2bc8:	af 92       	push	r10
    2bca:	bf 92       	push	r11
    2bcc:	cf 92       	push	r12
    2bce:	df 92       	push	r13
    2bd0:	ef 92       	push	r14
    2bd2:	ff 92       	push	r15
    2bd4:	0f 93       	push	r16
    2bd6:	1f 93       	push	r17
    2bd8:	cf 93       	push	r28
    2bda:	df 93       	push	r29
    2bdc:	ec 01       	movw	r28, r24
    2bde:	16 2f       	mov	r17, r22
    2be0:	f4 2e       	mov	r15, r20
    2be2:	39 01       	movw	r6, r18
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    2be4:	8e 2d       	mov	r24, r14
    2be6:	87 70       	andi	r24, 0x07	; 7
    2be8:	88 24       	eor	r8, r8
    2bea:	83 94       	inc	r8
    2bec:	91 2c       	mov	r9, r1
    2bee:	64 01       	movw	r12, r8
    2bf0:	02 c0       	rjmp	.+4      	; 0x2bf6 <motor_init+0x36>
    2bf2:	cc 0c       	add	r12, r12
    2bf4:	dd 1c       	adc	r13, r13
    2bf6:	8a 95       	dec	r24
    2bf8:	e2 f7       	brpl	.-8      	; 0x2bf2 <motor_init+0x32>
typedef uint8_t ioport_port_t;
typedef uint8_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 3;
    2bfa:	ae 2c       	mov	r10, r14
    2bfc:	a6 94       	lsr	r10
    2bfe:	a6 94       	lsr	r10
    2c00:	a6 94       	lsr	r10
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
	       (port * IOPORT_PORT_OFFSET));
    2c02:	20 e2       	ldi	r18, 0x20	; 32
    2c04:	a2 9e       	mul	r10, r18
    2c06:	50 01       	movw	r10, r0
    2c08:	11 24       	eor	r1, r1
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
    2c0a:	8a ef       	ldi	r24, 0xFA	; 250
    2c0c:	b8 1a       	sub	r11, r24
 * \param flags Bitmask of flags specifying additional configuration
 * parameters.
 */
static inline void ioport_configure_pin(port_pin_t pin, port_pin_flags_t flags)
{
	ioport_configure_port_pin(arch_ioport_pin_to_base(pin),
    2c0e:	43 e0       	ldi	r20, 0x03	; 3
    2c10:	50 e0       	ldi	r21, 0x00	; 0
    2c12:	6c 2d       	mov	r22, r12
    2c14:	c5 01       	movw	r24, r10
    2c16:	0f d4       	rcall	.+2078   	; 0x3436 <ioport_configure_port_pin>
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    2c18:	80 2f       	mov	r24, r16
    2c1a:	87 70       	andi	r24, 0x07	; 7
    2c1c:	b4 01       	movw	r22, r8
    2c1e:	02 c0       	rjmp	.+4      	; 0x2c24 <motor_init+0x64>
    2c20:	66 0f       	add	r22, r22
    2c22:	77 1f       	adc	r23, r23
    2c24:	8a 95       	dec	r24
    2c26:	e2 f7       	brpl	.-8      	; 0x2c20 <motor_init+0x60>
typedef uint8_t ioport_port_t;
typedef uint8_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 3;
    2c28:	06 95       	lsr	r16
    2c2a:	06 95       	lsr	r16
    2c2c:	06 95       	lsr	r16
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
	       (port * IOPORT_PORT_OFFSET));
    2c2e:	e0 e2       	ldi	r30, 0x20	; 32
    2c30:	0e 9f       	mul	r16, r30
    2c32:	c0 01       	movw	r24, r0
    2c34:	11 24       	eor	r1, r1
    2c36:	41 e0       	ldi	r20, 0x01	; 1
    2c38:	50 e0       	ldi	r21, 0x00	; 0
    2c3a:	9a 5f       	subi	r25, 0xFA	; 250
    2c3c:	fc d3       	rcall	.+2040   	; 0x3436 <ioport_configure_port_pin>

	// Set up PWM
	// motor is a pointer to a MOTOR_OBJECT_t structure.
	// motor->pwm returns the actual pwm value (referenced by the pointer motor)
	// &(motor->pwm) makes a pointer to the pwm value (itself a structre) which is referenced by the pointer called motor
	pwm_init(&(motor->pwm), tc, channel, freq_hz);
    2c3e:	93 01       	movw	r18, r6
    2c40:	4f 2d       	mov	r20, r15
    2c42:	61 2f       	mov	r22, r17
    2c44:	ce 01       	movw	r24, r28
    2c46:	49 d8       	rcall	.-3950   	; 0x1cda <pwm_init>

	motor->direction_pin = dir_pin;
    2c48:	ef 82       	std	Y+7, r14	; 0x07

	// Initialize the motor speed to zero (in case the pwm get started by some means other than motor_set)
	motor->speed = 0;
    2c4a:	18 86       	std	Y+8, r1	; 0x08
    2c4c:	19 86       	std	Y+9, r1	; 0x09
    2c4e:	1a 86       	std	Y+10, r1	; 0x0a
    2c50:	1b 86       	std	Y+11, r1	; 0x0b
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    2c52:	f5 01       	movw	r30, r10
    2c54:	c5 82       	std	Z+5, r12	; 0x05
	
	// Set motor direction to high (forward)
	gpio_set_pin_high(motor->direction_pin);
	
	// Start PWM
	pwm_start16(&(motor->pwm), motor->speed);
    2c56:	68 85       	ldd	r22, Y+8	; 0x08
    2c58:	79 85       	ldd	r23, Y+9	; 0x09
    2c5a:	8a 85       	ldd	r24, Y+10	; 0x0a
    2c5c:	9b 85       	ldd	r25, Y+11	; 0x0b
    2c5e:	14 d6       	rcall	.+3112   	; 0x3888 <__fixunssfsi>
    2c60:	ce 01       	movw	r24, r28
    2c62:	f3 d0       	rcall	.+486    	; 0x2e4a <pwm_start16>
	
};
    2c64:	df 91       	pop	r29
    2c66:	cf 91       	pop	r28
    2c68:	1f 91       	pop	r17
    2c6a:	0f 91       	pop	r16
    2c6c:	ff 90       	pop	r15
    2c6e:	ef 90       	pop	r14
    2c70:	df 90       	pop	r13
    2c72:	cf 90       	pop	r12
    2c74:	bf 90       	pop	r11
    2c76:	af 90       	pop	r10
    2c78:	9f 90       	pop	r9
    2c7a:	8f 90       	pop	r8
    2c7c:	7f 90       	pop	r7
    2c7e:	6f 90       	pop	r6
    2c80:	08 95       	ret

00002c82 <motor_set>:

void motor_set(MOTOR_OBJECT_t *motor, uint16_t speed, uint8_t direction) {
    2c82:	cf 93       	push	r28
    2c84:	df 93       	push	r29
    2c86:	ec 01       	movw	r28, r24

	// Set motor direction
	if (direction == FORWARD) {
    2c88:	41 30       	cpi	r20, 0x01	; 1
    2c8a:	a9 f4       	brne	.+42     	; 0x2cb6 <motor_set+0x34>
		gpio_set_pin_high(motor->direction_pin);
    2c8c:	8f 81       	ldd	r24, Y+7	; 0x07
typedef uint8_t ioport_port_t;
typedef uint8_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 3;
    2c8e:	e8 2f       	mov	r30, r24
    2c90:	e6 95       	lsr	r30
    2c92:	e6 95       	lsr	r30
    2c94:	e6 95       	lsr	r30
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
	       (port * IOPORT_PORT_OFFSET));
    2c96:	40 e2       	ldi	r20, 0x20	; 32
    2c98:	e4 9f       	mul	r30, r20
    2c9a:	f0 01       	movw	r30, r0
    2c9c:	11 24       	eor	r1, r1
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
    2c9e:	fa 5f       	subi	r31, 0xFA	; 250
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    2ca0:	87 70       	andi	r24, 0x07	; 7
    2ca2:	21 e0       	ldi	r18, 0x01	; 1
    2ca4:	30 e0       	ldi	r19, 0x00	; 0
    2ca6:	a9 01       	movw	r20, r18
    2ca8:	02 c0       	rjmp	.+4      	; 0x2cae <motor_set+0x2c>
    2caa:	44 0f       	add	r20, r20
    2cac:	55 1f       	adc	r21, r21
    2cae:	8a 95       	dec	r24
    2cb0:	e2 f7       	brpl	.-8      	; 0x2caa <motor_set+0x28>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    2cb2:	45 83       	std	Z+5, r20	; 0x05
    2cb4:	14 c0       	rjmp	.+40     	; 0x2cde <motor_set+0x5c>
	} else {
		gpio_set_pin_low(motor->direction_pin);
    2cb6:	8f 81       	ldd	r24, Y+7	; 0x07
typedef uint8_t ioport_port_t;
typedef uint8_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 3;
    2cb8:	e8 2f       	mov	r30, r24
    2cba:	e6 95       	lsr	r30
    2cbc:	e6 95       	lsr	r30
    2cbe:	e6 95       	lsr	r30
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
	       (port * IOPORT_PORT_OFFSET));
    2cc0:	50 e2       	ldi	r21, 0x20	; 32
    2cc2:	e5 9f       	mul	r30, r21
    2cc4:	f0 01       	movw	r30, r0
    2cc6:	11 24       	eor	r1, r1
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
    2cc8:	fa 5f       	subi	r31, 0xFA	; 250
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    2cca:	87 70       	andi	r24, 0x07	; 7
    2ccc:	21 e0       	ldi	r18, 0x01	; 1
    2cce:	30 e0       	ldi	r19, 0x00	; 0
    2cd0:	a9 01       	movw	r20, r18
    2cd2:	02 c0       	rjmp	.+4      	; 0x2cd8 <motor_set+0x56>
    2cd4:	44 0f       	add	r20, r20
    2cd6:	55 1f       	adc	r21, r21
    2cd8:	8a 95       	dec	r24
    2cda:	e2 f7       	brpl	.-8      	; 0x2cd4 <motor_set+0x52>
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    2cdc:	46 83       	std	Z+6, r20	; 0x06
	}
	
	// Update stored value (for reference)
	if (speed<=0) {
    2cde:	61 15       	cp	r22, r1
    2ce0:	71 05       	cpc	r23, r1
    2ce2:	29 f4       	brne	.+10     	; 0x2cee <motor_set+0x6c>
		motor->speed=0;
    2ce4:	18 86       	std	Y+8, r1	; 0x08
    2ce6:	19 86       	std	Y+9, r1	; 0x09
    2ce8:	1a 86       	std	Y+10, r1	; 0x0a
    2cea:	1b 86       	std	Y+11, r1	; 0x0b
    2cec:	14 c0       	rjmp	.+40     	; 0x2d16 <motor_set+0x94>
	} else if (speed>10000) {
    2cee:	61 31       	cpi	r22, 0x11	; 17
    2cf0:	57 e2       	ldi	r21, 0x27	; 39
    2cf2:	75 07       	cpc	r23, r21
    2cf4:	48 f0       	brcs	.+18     	; 0x2d08 <motor_set+0x86>
		motor->speed=10000;
    2cf6:	40 e0       	ldi	r20, 0x00	; 0
    2cf8:	50 e4       	ldi	r21, 0x40	; 64
    2cfa:	6c e1       	ldi	r22, 0x1C	; 28
    2cfc:	76 e4       	ldi	r23, 0x46	; 70
    2cfe:	48 87       	std	Y+8, r20	; 0x08
    2d00:	59 87       	std	Y+9, r21	; 0x09
    2d02:	6a 87       	std	Y+10, r22	; 0x0a
    2d04:	7b 87       	std	Y+11, r23	; 0x0b
    2d06:	07 c0       	rjmp	.+14     	; 0x2d16 <motor_set+0x94>
	} else {
		motor->speed = speed;	
    2d08:	80 e0       	ldi	r24, 0x00	; 0
    2d0a:	90 e0       	ldi	r25, 0x00	; 0
    2d0c:	e9 d5       	rcall	.+3026   	; 0x38e0 <__floatunsisf>
    2d0e:	68 87       	std	Y+8, r22	; 0x08
    2d10:	79 87       	std	Y+9, r23	; 0x09
    2d12:	8a 87       	std	Y+10, r24	; 0x0a
    2d14:	9b 87       	std	Y+11, r25	; 0x0b
	}
	
	// Set PWM
	pwm_set_duty_cycle16(&(motor->pwm), motor->speed);
    2d16:	68 85       	ldd	r22, Y+8	; 0x08
    2d18:	79 85       	ldd	r23, Y+9	; 0x09
    2d1a:	8a 85       	ldd	r24, Y+10	; 0x0a
    2d1c:	9b 85       	ldd	r25, Y+11	; 0x0b
    2d1e:	b4 d5       	rcall	.+2920   	; 0x3888 <__fixunssfsi>
    2d20:	ce 01       	movw	r24, r28
    2d22:	5e d0       	rcall	.+188    	; 0x2de0 <pwm_set_duty_cycle16>
};
    2d24:	df 91       	pop	r29
    2d26:	cf 91       	pop	r28
    2d28:	08 95       	ret

00002d2a <servo_init>:




void servo_init(SERVO_OBJECT_t *servo, enum pwm_tc_t tc, enum pwm_channel_t channel, uint16_t freq_hz, port_pin_t pwm_pin) {
    2d2a:	df 92       	push	r13
    2d2c:	ef 92       	push	r14
    2d2e:	ff 92       	push	r15
    2d30:	0f 93       	push	r16
    2d32:	1f 93       	push	r17
    2d34:	cf 93       	push	r28
    2d36:	df 93       	push	r29
    2d38:	ec 01       	movw	r28, r24
    2d3a:	16 2f       	mov	r17, r22
    2d3c:	d4 2e       	mov	r13, r20
    2d3e:	79 01       	movw	r14, r18
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    2d40:	80 2f       	mov	r24, r16
    2d42:	87 70       	andi	r24, 0x07	; 7
    2d44:	21 e0       	ldi	r18, 0x01	; 1
    2d46:	30 e0       	ldi	r19, 0x00	; 0
    2d48:	b9 01       	movw	r22, r18
    2d4a:	02 c0       	rjmp	.+4      	; 0x2d50 <servo_init+0x26>
    2d4c:	66 0f       	add	r22, r22
    2d4e:	77 1f       	adc	r23, r23
    2d50:	8a 95       	dec	r24
    2d52:	e2 f7       	brpl	.-8      	; 0x2d4c <servo_init+0x22>
typedef uint8_t ioport_port_t;
typedef uint8_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 3;
    2d54:	06 95       	lsr	r16
    2d56:	06 95       	lsr	r16
    2d58:	06 95       	lsr	r16
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
	       (port * IOPORT_PORT_OFFSET));
    2d5a:	20 e2       	ldi	r18, 0x20	; 32
    2d5c:	02 9f       	mul	r16, r18
    2d5e:	c0 01       	movw	r24, r0
    2d60:	11 24       	eor	r1, r1
    2d62:	41 e0       	ldi	r20, 0x01	; 1
    2d64:	50 e0       	ldi	r21, 0x00	; 0
    2d66:	9a 5f       	subi	r25, 0xFA	; 250
    2d68:	66 d3       	rcall	.+1740   	; 0x3436 <ioport_configure_port_pin>

	// Set up PWM
	// motor is a pointer to a MOTOR_OBJECT_t structure.
	// motor->pwm returns the actual pwm value (referenced by the pointer motor)
	// &(motor->pwm) makes a pointer to the pwm value (itself a structre) which is referenced by the pointer called motor
	pwm_init(&(servo->pwm), tc, channel, freq_hz);
    2d6a:	97 01       	movw	r18, r14
    2d6c:	4d 2d       	mov	r20, r13
    2d6e:	61 2f       	mov	r22, r17
    2d70:	ce 01       	movw	r24, r28
    2d72:	0e 94 6d 0e 	call	0x1cda	; 0x1cda <pwm_init>
	
	// Initialize the motor speed to zero (in case the pwm get started by some means other than motor_set)
	servo->angle = 9000;
    2d76:	88 e2       	ldi	r24, 0x28	; 40
    2d78:	93 e2       	ldi	r25, 0x23	; 35
    2d7a:	8b 87       	std	Y+11, r24	; 0x0b
    2d7c:	9c 87       	std	Y+12, r25	; 0x0c
	
	// Start PWM
	pwm_start16(&(servo->pwm), servo_duty_cycle(servo->angle));
    2d7e:	6e ee       	ldi	r22, 0xEE	; 238
    2d80:	72 e0       	ldi	r23, 0x02	; 2
    2d82:	ce 01       	movw	r24, r28
    2d84:	62 d0       	rcall	.+196    	; 0x2e4a <pwm_start16>
	
};
    2d86:	df 91       	pop	r29
    2d88:	cf 91       	pop	r28
    2d8a:	1f 91       	pop	r17
    2d8c:	0f 91       	pop	r16
    2d8e:	ff 90       	pop	r15
    2d90:	ef 90       	pop	r14
    2d92:	df 90       	pop	r13
    2d94:	08 95       	ret

00002d96 <servo_set>:

void servo_set(SERVO_OBJECT_t *servo, int16_t angle) {
    2d96:	fc 01       	movw	r30, r24
	
	// Update stored value (for reference)
	if (angle<=0) {
    2d98:	16 16       	cp	r1, r22
    2d9a:	17 06       	cpc	r1, r23
    2d9c:	1c f0       	brlt	.+6      	; 0x2da4 <servo_set+0xe>
		servo->angle=0;
    2d9e:	13 86       	std	Z+11, r1	; 0x0b
    2da0:	14 86       	std	Z+12, r1	; 0x0c
    2da2:	0b c0       	rjmp	.+22     	; 0x2dba <servo_set+0x24>
	} else if (angle>18000) {
    2da4:	61 35       	cpi	r22, 0x51	; 81
    2da6:	86 e4       	ldi	r24, 0x46	; 70
    2da8:	78 07       	cpc	r23, r24
    2daa:	2c f0       	brlt	.+10     	; 0x2db6 <servo_set+0x20>
		servo->angle=18000;
    2dac:	80 e5       	ldi	r24, 0x50	; 80
    2dae:	96 e4       	ldi	r25, 0x46	; 70
    2db0:	83 87       	std	Z+11, r24	; 0x0b
    2db2:	94 87       	std	Z+12, r25	; 0x0c
    2db4:	02 c0       	rjmp	.+4      	; 0x2dba <servo_set+0x24>
	} else {
		servo->angle=angle;
    2db6:	63 87       	std	Z+11, r22	; 0x0b
    2db8:	74 87       	std	Z+12, r23	; 0x0c
uint16_t servo_duty_cycle(uint16_t angle) {
	uint16_t duty_cycle=0;
	
	//duty_cycle = 500 / 18000 * angle_millideg + 500
	
	duty_cycle = (uint16_t)(angle / 36) + 500;
    2dba:	23 85       	ldd	r18, Z+11	; 0x0b
    2dbc:	34 85       	ldd	r19, Z+12	; 0x0c
    2dbe:	af e8       	ldi	r26, 0x8F	; 143
    2dc0:	b3 ee       	ldi	r27, 0xE3	; 227
    2dc2:	30 d6       	rcall	.+3168   	; 0x3a24 <__umulhisi3>
    2dc4:	96 95       	lsr	r25
    2dc6:	87 95       	ror	r24
    2dc8:	92 95       	swap	r25
    2dca:	82 95       	swap	r24
    2dcc:	8f 70       	andi	r24, 0x0F	; 15
    2dce:	89 27       	eor	r24, r25
    2dd0:	9f 70       	andi	r25, 0x0F	; 15
    2dd2:	89 27       	eor	r24, r25
    2dd4:	bc 01       	movw	r22, r24
    2dd6:	6c 50       	subi	r22, 0x0C	; 12
    2dd8:	7e 4f       	sbci	r23, 0xFE	; 254
	
	// 3% = -90deg
	// 15% = 90deg
	
	// Set PWM
	pwm_set_duty_cycle16(&(servo->pwm), servo_duty_cycle(servo->angle));
    2dda:	cf 01       	movw	r24, r30
    2ddc:	01 c0       	rjmp	.+2      	; 0x2de0 <pwm_set_duty_cycle16>
    2dde:	08 95       	ret

00002de0 <pwm_set_duty_cycle16>:
 *
 * \param *config           Pointer to the PWM configuration struct
 * \param duty_cycle_scale  Duty cycle as a value between 0 and 10000.
 */
void pwm_set_duty_cycle16(struct pwm_config *config, uint16_t duty_cycle_scale)
{
    2de0:	cf 93       	push	r28
    2de2:	df 93       	push	r29
    2de4:	ec 01       	movw	r28, r24
    2de6:	9b 01       	movw	r18, r22
	Assert( duty_cycle_scale <= 10000 );
	
	tc_write_cc_buffer(config->tc, config->channel,
	(uint16_t)(((uint32_t)config->period * (uint32_t)duty_cycle_scale) / 10000));
    2de8:	ad 81       	ldd	r26, Y+5	; 0x05
    2dea:	be 81       	ldd	r27, Y+6	; 0x06
    2dec:	1b d6       	rcall	.+3126   	; 0x3a24 <__umulhisi3>
    2dee:	20 e1       	ldi	r18, 0x10	; 16
    2df0:	37 e2       	ldi	r19, 0x27	; 39
    2df2:	40 e0       	ldi	r20, 0x00	; 0
    2df4:	50 e0       	ldi	r21, 0x00	; 0
    2df6:	ee d5       	rcall	.+3036   	; 0x39d4 <__udivmodsi4>
 */
void pwm_set_duty_cycle16(struct pwm_config *config, uint16_t duty_cycle_scale)
{
	Assert( duty_cycle_scale <= 10000 );
	
	tc_write_cc_buffer(config->tc, config->channel,
    2df8:	8a 81       	ldd	r24, Y+2	; 0x02
    2dfa:	e8 81       	ld	r30, Y
    2dfc:	f9 81       	ldd	r31, Y+1	; 0x01
 * \param buffer_value Counter Buffer value
 */
static inline void tc_write_cc_buffer(volatile void *tc,
		enum tc_cc_channel_t channel_index, uint16_t buffer_value)
{
	if (tc_is_tc0(void *tc)) {
    2dfe:	e6 fd       	sbrc	r30, 6
    2e00:	17 c0       	rjmp	.+46     	; 0x2e30 <pwm_set_duty_cycle16+0x50>
		switch (channel_index) {
    2e02:	82 30       	cpi	r24, 0x02	; 2
    2e04:	61 f0       	breq	.+24     	; 0x2e1e <pwm_set_duty_cycle16+0x3e>
    2e06:	18 f4       	brcc	.+6      	; 0x2e0e <pwm_set_duty_cycle16+0x2e>
    2e08:	81 30       	cpi	r24, 0x01	; 1
    2e0a:	31 f0       	breq	.+12     	; 0x2e18 <pwm_set_duty_cycle16+0x38>
    2e0c:	1b c0       	rjmp	.+54     	; 0x2e44 <pwm_set_duty_cycle16+0x64>
    2e0e:	83 30       	cpi	r24, 0x03	; 3
    2e10:	49 f0       	breq	.+18     	; 0x2e24 <pwm_set_duty_cycle16+0x44>
    2e12:	84 30       	cpi	r24, 0x04	; 4
    2e14:	51 f0       	breq	.+20     	; 0x2e2a <pwm_set_duty_cycle16+0x4a>
    2e16:	16 c0       	rjmp	.+44     	; 0x2e44 <pwm_set_duty_cycle16+0x64>
		case TC_CCA:
			((TC0_t *)tc)->CCABUF = buffer_value;
    2e18:	20 af       	std	Z+56, r18	; 0x38
    2e1a:	31 af       	std	Z+57, r19	; 0x39
    2e1c:	13 c0       	rjmp	.+38     	; 0x2e44 <pwm_set_duty_cycle16+0x64>
			break;
		case TC_CCB:
			((TC0_t *)tc)->CCBBUF = buffer_value;
    2e1e:	22 af       	std	Z+58, r18	; 0x3a
    2e20:	33 af       	std	Z+59, r19	; 0x3b
    2e22:	10 c0       	rjmp	.+32     	; 0x2e44 <pwm_set_duty_cycle16+0x64>
			break;
		case TC_CCC:
			((TC0_t *)tc)->CCCBUF = buffer_value;
    2e24:	24 af       	std	Z+60, r18	; 0x3c
    2e26:	35 af       	std	Z+61, r19	; 0x3d
    2e28:	0d c0       	rjmp	.+26     	; 0x2e44 <pwm_set_duty_cycle16+0x64>
			break;
		case TC_CCD:
			((TC0_t *)tc)->CCDBUF = buffer_value;
    2e2a:	26 af       	std	Z+62, r18	; 0x3e
    2e2c:	37 af       	std	Z+63, r19	; 0x3f
    2e2e:	0a c0       	rjmp	.+20     	; 0x2e44 <pwm_set_duty_cycle16+0x64>
			break;
		}
	} else if (tc_is_tc1(void *tc)) {
			switch (channel_index) {
    2e30:	81 30       	cpi	r24, 0x01	; 1
    2e32:	19 f0       	breq	.+6      	; 0x2e3a <pwm_set_duty_cycle16+0x5a>
    2e34:	82 30       	cpi	r24, 0x02	; 2
    2e36:	21 f0       	breq	.+8      	; 0x2e40 <pwm_set_duty_cycle16+0x60>
    2e38:	05 c0       	rjmp	.+10     	; 0x2e44 <pwm_set_duty_cycle16+0x64>
			case TC_CCA:
				((TC1_t *)tc)->CCABUF = buffer_value;
    2e3a:	20 af       	std	Z+56, r18	; 0x38
    2e3c:	31 af       	std	Z+57, r19	; 0x39
    2e3e:	02 c0       	rjmp	.+4      	; 0x2e44 <pwm_set_duty_cycle16+0x64>
				break;
			case TC_CCB:
				((TC1_t *)tc)->CCBBUF = buffer_value;
    2e40:	22 af       	std	Z+58, r18	; 0x3a
    2e42:	33 af       	std	Z+59, r19	; 0x3b
	(uint16_t)(((uint32_t)config->period * (uint32_t)duty_cycle_scale) / 10000));
    2e44:	df 91       	pop	r29
    2e46:	cf 91       	pop	r28
    2e48:	08 95       	ret

00002e4a <pwm_start16>:
 *
 * \param *config           Pointer to the PWM configuration struct
 * \param duty_cycle_scale  Duty cycle as a value between 0 and 100.
 */
void pwm_start16(struct pwm_config *config, uint16_t duty_cycle_scale)
{
    2e4a:	cf 93       	push	r28
    2e4c:	df 93       	push	r29
    2e4e:	ec 01       	movw	r28, r24
	/* Set given duty cycle */
	pwm_set_duty_cycle16(config, duty_cycle_scale);
    2e50:	c7 df       	rcall	.-114    	; 0x2de0 <pwm_set_duty_cycle16>
	/* Set correct TC period */
	tc_write_period(config->tc, config->period);
    2e52:	8d 81       	ldd	r24, Y+5	; 0x05
    2e54:	9e 81       	ldd	r25, Y+6	; 0x06
    2e56:	e8 81       	ld	r30, Y
    2e58:	f9 81       	ldd	r31, Y+1	; 0x01
 * \param tc Pointer to TC module.
 * \param per_value Period value : PER
 */
static inline void tc_write_period(volatile void *tc, uint16_t per_value)
{
	((TC0_t *)tc)->PER = per_value;
    2e5a:	86 a3       	std	Z+38, r24	; 0x26
    2e5c:	97 a3       	std	Z+39, r25	; 0x27
	/* Enable CC channel for this TC */
	tc_enable_cc_channels(config->tc, config->cc_mask);
    2e5e:	8b 81       	ldd	r24, Y+3	; 0x03
    2e60:	e8 81       	ld	r30, Y
    2e62:	f9 81       	ldd	r31, Y+1	; 0x01
 * \param enablemask CC channel
 */
static inline void tc_enable_cc_channels(volatile void *tc,
		enum tc_cc_channel_mask_enable_t enablemask)
{
	if (tc_is_tc0(void *tc)) {
    2e64:	e6 fd       	sbrc	r30, 6
    2e66:	04 c0       	rjmp	.+8      	; 0x2e70 <pwm_start16+0x26>
		((TC0_t *)tc)->CTRLB |= enablemask;
    2e68:	91 81       	ldd	r25, Z+1	; 0x01
    2e6a:	89 2b       	or	r24, r25
    2e6c:	81 83       	std	Z+1, r24	; 0x01
    2e6e:	04 c0       	rjmp	.+8      	; 0x2e78 <pwm_start16+0x2e>
	} else if (tc_is_tc1(void *tc)) {
		((TC1_t *)tc)->CTRLB |=
    2e70:	91 81       	ldd	r25, Z+1	; 0x01
    2e72:	80 73       	andi	r24, 0x30	; 48
    2e74:	89 2b       	or	r24, r25
    2e76:	81 83       	std	Z+1, r24	; 0x01
	/* Enable TC by setting correct clock prescaler */
	tc_write_clock_source(config->tc, config->clk_sel);
    2e78:	e8 81       	ld	r30, Y
    2e7a:	f9 81       	ldd	r31, Y+1	; 0x01
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
			(((TC0_t *)tc)->CTRLA & ~TC0_CLKSEL_gm) |
    2e7c:	80 81       	ld	r24, Z
 * \note Configuring the clock also starts the timer
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
    2e7e:	80 7f       	andi	r24, 0xF0	; 240
    2e80:	9c 81       	ldd	r25, Y+4	; 0x04
    2e82:	89 2b       	or	r24, r25
    2e84:	80 83       	st	Z, r24
}
    2e86:	df 91       	pop	r29
    2e88:	cf 91       	pop	r28
    2e8a:	08 95       	ret

00002e8c <rf24_csn>:
/****************************************************************************/

uint8_t rf24_getPALevel(void) {

  return (rf24_read_register(RF_SETUP) & (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH))) >> 1 ;
}
    2e8c:	88 23       	and	r24, r24
    2e8e:	29 f0       	breq	.+10     	; 0x2e9a <rf24_csn+0xe>
    2e90:	84 e0       	ldi	r24, 0x04	; 4
    2e92:	e0 e4       	ldi	r30, 0x40	; 64
    2e94:	f6 e0       	ldi	r31, 0x06	; 6
    2e96:	85 83       	std	Z+5, r24	; 0x05
    2e98:	04 c0       	rjmp	.+8      	; 0x2ea2 <rf24_csn+0x16>
    2e9a:	84 e0       	ldi	r24, 0x04	; 4
    2e9c:	e0 e4       	ldi	r30, 0x40	; 64
    2e9e:	f6 e0       	ldi	r31, 0x06	; 6
    2ea0:	86 83       	std	Z+6, r24	; 0x06
    2ea2:	80 e0       	ldi	r24, 0x00	; 0
    2ea4:	90 e0       	ldi	r25, 0x00	; 0
    2ea6:	01 96       	adiw	r24, 0x01	; 1
    2ea8:	84 31       	cpi	r24, 0x14	; 20
    2eaa:	91 05       	cpc	r25, r1
    2eac:	e1 f7       	brne	.-8      	; 0x2ea6 <rf24_csn+0x1a>
    2eae:	08 95       	ret

00002eb0 <rf24_spi_writeread>:
    2eb0:	fc 01       	movw	r30, r24
    2eb2:	63 83       	std	Z+3, r22	; 0x03
    2eb4:	82 81       	ldd	r24, Z+2	; 0x02
    2eb6:	88 23       	and	r24, r24
    2eb8:	ec f7       	brge	.-6      	; 0x2eb4 <rf24_spi_writeread+0x4>
    2eba:	83 81       	ldd	r24, Z+3	; 0x03
    2ebc:	08 95       	ret

00002ebe <rf24_read_register>:
    2ebe:	cf 93       	push	r28
    2ec0:	c8 2f       	mov	r28, r24
    2ec2:	80 e0       	ldi	r24, 0x00	; 0
    2ec4:	e3 df       	rcall	.-58     	; 0x2e8c <rf24_csn>
    2ec6:	6c 2f       	mov	r22, r28
    2ec8:	6f 71       	andi	r22, 0x1F	; 31
    2eca:	80 ec       	ldi	r24, 0xC0	; 192
    2ecc:	98 e0       	ldi	r25, 0x08	; 8
    2ece:	f0 df       	rcall	.-32     	; 0x2eb0 <rf24_spi_writeread>
    2ed0:	6f ef       	ldi	r22, 0xFF	; 255
    2ed2:	80 ec       	ldi	r24, 0xC0	; 192
    2ed4:	98 e0       	ldi	r25, 0x08	; 8
    2ed6:	ec df       	rcall	.-40     	; 0x2eb0 <rf24_spi_writeread>
    2ed8:	c8 2f       	mov	r28, r24
    2eda:	81 e0       	ldi	r24, 0x01	; 1
    2edc:	d7 df       	rcall	.-82     	; 0x2e8c <rf24_csn>
    2ede:	8c 2f       	mov	r24, r28
    2ee0:	cf 91       	pop	r28
    2ee2:	08 95       	ret

00002ee4 <rf24_write_register_chunk>:
    2ee4:	0f 93       	push	r16
    2ee6:	1f 93       	push	r17
    2ee8:	cf 93       	push	r28
    2eea:	df 93       	push	r29
    2eec:	18 2f       	mov	r17, r24
    2eee:	eb 01       	movw	r28, r22
    2ef0:	04 2f       	mov	r16, r20
    2ef2:	80 e0       	ldi	r24, 0x00	; 0
    2ef4:	cb df       	rcall	.-106    	; 0x2e8c <rf24_csn>
    2ef6:	1f 71       	andi	r17, 0x1F	; 31
    2ef8:	61 2f       	mov	r22, r17
    2efa:	60 62       	ori	r22, 0x20	; 32
    2efc:	80 ec       	ldi	r24, 0xC0	; 192
    2efe:	98 e0       	ldi	r25, 0x08	; 8
    2f00:	d7 df       	rcall	.-82     	; 0x2eb0 <rf24_spi_writeread>
    2f02:	18 2f       	mov	r17, r24
    2f04:	40 2f       	mov	r20, r16
    2f06:	50 e0       	ldi	r21, 0x00	; 0
    2f08:	be 01       	movw	r22, r28
    2f0a:	80 ec       	ldi	r24, 0xC0	; 192
    2f0c:	98 e0       	ldi	r25, 0x08	; 8
    2f0e:	71 d2       	rcall	.+1250   	; 0x33f2 <spi_write_packet>
    2f10:	81 e0       	ldi	r24, 0x01	; 1
    2f12:	bc df       	rcall	.-136    	; 0x2e8c <rf24_csn>
    2f14:	81 2f       	mov	r24, r17
    2f16:	df 91       	pop	r29
    2f18:	cf 91       	pop	r28
    2f1a:	1f 91       	pop	r17
    2f1c:	0f 91       	pop	r16
    2f1e:	08 95       	ret

00002f20 <rf24_write_register>:
    2f20:	1f 93       	push	r17
    2f22:	cf 93       	push	r28
    2f24:	df 93       	push	r29
    2f26:	1f 92       	push	r1
    2f28:	cd b7       	in	r28, 0x3d	; 61
    2f2a:	de b7       	in	r29, 0x3e	; 62
    2f2c:	18 2f       	mov	r17, r24
    2f2e:	69 83       	std	Y+1, r22	; 0x01
    2f30:	80 e0       	ldi	r24, 0x00	; 0
    2f32:	ac df       	rcall	.-168    	; 0x2e8c <rf24_csn>
    2f34:	1f 71       	andi	r17, 0x1F	; 31
    2f36:	61 2f       	mov	r22, r17
    2f38:	60 62       	ori	r22, 0x20	; 32
    2f3a:	80 ec       	ldi	r24, 0xC0	; 192
    2f3c:	98 e0       	ldi	r25, 0x08	; 8
    2f3e:	b8 df       	rcall	.-144    	; 0x2eb0 <rf24_spi_writeread>
    2f40:	18 2f       	mov	r17, r24
    2f42:	41 e0       	ldi	r20, 0x01	; 1
    2f44:	50 e0       	ldi	r21, 0x00	; 0
    2f46:	be 01       	movw	r22, r28
    2f48:	6f 5f       	subi	r22, 0xFF	; 255
    2f4a:	7f 4f       	sbci	r23, 0xFF	; 255
    2f4c:	80 ec       	ldi	r24, 0xC0	; 192
    2f4e:	98 e0       	ldi	r25, 0x08	; 8
    2f50:	50 d2       	rcall	.+1184   	; 0x33f2 <spi_write_packet>
    2f52:	81 e0       	ldi	r24, 0x01	; 1
    2f54:	9b df       	rcall	.-202    	; 0x2e8c <rf24_csn>
    2f56:	81 2f       	mov	r24, r17
    2f58:	0f 90       	pop	r0
    2f5a:	df 91       	pop	r29
    2f5c:	cf 91       	pop	r28
    2f5e:	1f 91       	pop	r17
    2f60:	08 95       	ret

00002f62 <rf24_read_payload>:
    2f62:	8f 92       	push	r8
    2f64:	9f 92       	push	r9
    2f66:	af 92       	push	r10
    2f68:	bf 92       	push	r11
    2f6a:	cf 92       	push	r12
    2f6c:	df 92       	push	r13
    2f6e:	ef 92       	push	r14
    2f70:	ff 92       	push	r15
    2f72:	0f 93       	push	r16
    2f74:	1f 93       	push	r17
    2f76:	cf 93       	push	r28
    2f78:	df 93       	push	r29
    2f7a:	cd b7       	in	r28, 0x3d	; 61
    2f7c:	de b7       	in	r29, 0x3e	; 62
    2f7e:	5c 01       	movw	r10, r24
    2f80:	ed b6       	in	r14, 0x3d	; 61
    2f82:	fe b6       	in	r15, 0x3e	; 62
    2f84:	00 91 50 23 	lds	r16, 0x2350
    2f88:	96 2e       	mov	r9, r22
    2f8a:	06 17       	cp	r16, r22
    2f8c:	08 f4       	brcc	.+2      	; 0x2f90 <rf24_read_payload+0x2e>
    2f8e:	90 2e       	mov	r9, r16
    2f90:	80 91 43 23 	lds	r24, 0x2343
    2f94:	81 11       	cpse	r24, r1
    2f96:	02 c0       	rjmp	.+4      	; 0x2f9c <rf24_read_payload+0x3a>
    2f98:	09 19       	sub	r16, r9
    2f9a:	01 c0       	rjmp	.+2      	; 0x2f9e <rf24_read_payload+0x3c>
    2f9c:	00 e0       	ldi	r16, 0x00	; 0
    2f9e:	10 e0       	ldi	r17, 0x00	; 0
    2fa0:	8d b7       	in	r24, 0x3d	; 61
    2fa2:	9e b7       	in	r25, 0x3e	; 62
    2fa4:	80 1b       	sub	r24, r16
    2fa6:	91 0b       	sbc	r25, r17
    2fa8:	8d bf       	out	0x3d, r24	; 61
    2faa:	9e bf       	out	0x3e, r25	; 62
    2fac:	01 96       	adiw	r24, 0x01	; 1
    2fae:	6c 01       	movw	r12, r24
    2fb0:	80 e0       	ldi	r24, 0x00	; 0
    2fb2:	6c df       	rcall	.-296    	; 0x2e8c <rf24_csn>
    2fb4:	61 e6       	ldi	r22, 0x61	; 97
    2fb6:	80 ec       	ldi	r24, 0xC0	; 192
    2fb8:	98 e0       	ldi	r25, 0x08	; 8
    2fba:	7a df       	rcall	.-268    	; 0x2eb0 <rf24_spi_writeread>
    2fbc:	88 2e       	mov	r8, r24
    2fbe:	49 2d       	mov	r20, r9
    2fc0:	50 e0       	ldi	r21, 0x00	; 0
    2fc2:	b5 01       	movw	r22, r10
    2fc4:	80 ec       	ldi	r24, 0xC0	; 192
    2fc6:	98 e0       	ldi	r25, 0x08	; 8
    2fc8:	23 d2       	rcall	.+1094   	; 0x3410 <spi_read_packet>
    2fca:	a8 01       	movw	r20, r16
    2fcc:	b6 01       	movw	r22, r12
    2fce:	80 ec       	ldi	r24, 0xC0	; 192
    2fd0:	98 e0       	ldi	r25, 0x08	; 8
    2fd2:	1e d2       	rcall	.+1084   	; 0x3410 <spi_read_packet>
    2fd4:	81 e0       	ldi	r24, 0x01	; 1
    2fd6:	5a df       	rcall	.-332    	; 0x2e8c <rf24_csn>
    2fd8:	88 2d       	mov	r24, r8
    2fda:	ed be       	out	0x3d, r14	; 61
    2fdc:	fe be       	out	0x3e, r15	; 62
    2fde:	df 91       	pop	r29
    2fe0:	cf 91       	pop	r28
    2fe2:	1f 91       	pop	r17
    2fe4:	0f 91       	pop	r16
    2fe6:	ff 90       	pop	r15
    2fe8:	ef 90       	pop	r14
    2fea:	df 90       	pop	r13
    2fec:	cf 90       	pop	r12
    2fee:	bf 90       	pop	r11
    2ff0:	af 90       	pop	r10
    2ff2:	9f 90       	pop	r9
    2ff4:	8f 90       	pop	r8
    2ff6:	08 95       	ret

00002ff8 <rf24_spiTrans>:
    2ff8:	cf 93       	push	r28
    2ffa:	c8 2f       	mov	r28, r24
    2ffc:	80 e0       	ldi	r24, 0x00	; 0
    2ffe:	46 df       	rcall	.-372    	; 0x2e8c <rf24_csn>
    3000:	6c 2f       	mov	r22, r28
    3002:	80 ec       	ldi	r24, 0xC0	; 192
    3004:	98 e0       	ldi	r25, 0x08	; 8
    3006:	54 df       	rcall	.-344    	; 0x2eb0 <rf24_spi_writeread>
    3008:	c8 2f       	mov	r28, r24
    300a:	81 e0       	ldi	r24, 0x01	; 1
    300c:	3f df       	rcall	.-386    	; 0x2e8c <rf24_csn>
    300e:	8c 2f       	mov	r24, r28
    3010:	cf 91       	pop	r28
    3012:	08 95       	ret

00003014 <rf24_flush_rx>:
    3014:	82 ee       	ldi	r24, 0xE2	; 226
    3016:	f0 cf       	rjmp	.-32     	; 0x2ff8 <rf24_spiTrans>
    3018:	08 95       	ret

0000301a <rf24_flush_tx>:
    301a:	81 ee       	ldi	r24, 0xE1	; 225
    301c:	ed cf       	rjmp	.-38     	; 0x2ff8 <rf24_spiTrans>
    301e:	08 95       	ret

00003020 <rf24_get_status>:
    3020:	8f ef       	ldi	r24, 0xFF	; 255
    3022:	ea cf       	rjmp	.-44     	; 0x2ff8 <rf24_spiTrans>
    3024:	08 95       	ret

00003026 <rf24_setChannel>:
    3026:	80 38       	cpi	r24, 0x80	; 128
    3028:	08 f0       	brcs	.+2      	; 0x302c <rf24_setChannel+0x6>
    302a:	8f e7       	ldi	r24, 0x7F	; 127
    302c:	68 2f       	mov	r22, r24
    302e:	85 e0       	ldi	r24, 0x05	; 5
    3030:	77 cf       	rjmp	.-274    	; 0x2f20 <rf24_write_register>
    3032:	08 95       	ret

00003034 <rf24_setPayloadSize>:
    3034:	81 32       	cpi	r24, 0x21	; 33
    3036:	08 f0       	brcs	.+2      	; 0x303a <rf24_setPayloadSize+0x6>
    3038:	80 e2       	ldi	r24, 0x20	; 32
    303a:	80 93 50 23 	sts	0x2350, r24
    303e:	08 95       	ret

00003040 <rf24_powerUp>:
    3040:	80 e0       	ldi	r24, 0x00	; 0
    3042:	3d df       	rcall	.-390    	; 0x2ebe <rf24_read_register>
    3044:	81 fd       	sbrc	r24, 1
    3046:	0d c0       	rjmp	.+26     	; 0x3062 <rf24_powerUp+0x22>
    3048:	80 e0       	ldi	r24, 0x00	; 0
    304a:	39 df       	rcall	.-398    	; 0x2ebe <rf24_read_register>
    304c:	68 2f       	mov	r22, r24
    304e:	62 60       	ori	r22, 0x02	; 2
    3050:	80 e0       	ldi	r24, 0x00	; 0
    3052:	66 df       	rcall	.-308    	; 0x2f20 <rf24_write_register>
    3054:	80 e0       	ldi	r24, 0x00	; 0
    3056:	90 e0       	ldi	r25, 0x00	; 0
    3058:	01 96       	adiw	r24, 0x01	; 1
    305a:	80 32       	cpi	r24, 0x20	; 32
    305c:	2e e4       	ldi	r18, 0x4E	; 78
    305e:	92 07       	cpc	r25, r18
    3060:	d9 f7       	brne	.-10     	; 0x3058 <rf24_powerUp+0x18>
    3062:	08 95       	ret

00003064 <rf24_available>:
    3064:	cf 93       	push	r28
    3066:	df 93       	push	r29
    3068:	ec 01       	movw	r28, r24
    306a:	87 e1       	ldi	r24, 0x17	; 23
    306c:	28 df       	rcall	.-432    	; 0x2ebe <rf24_read_register>
    306e:	80 fd       	sbrc	r24, 0
    3070:	08 c0       	rjmp	.+16     	; 0x3082 <rf24_available+0x1e>
    3072:	20 97       	sbiw	r28, 0x00	; 0
    3074:	41 f0       	breq	.+16     	; 0x3086 <rf24_available+0x22>
    3076:	d4 df       	rcall	.-88     	; 0x3020 <rf24_get_status>
    3078:	86 95       	lsr	r24
    307a:	87 70       	andi	r24, 0x07	; 7
    307c:	88 83       	st	Y, r24
    307e:	81 e0       	ldi	r24, 0x01	; 1
    3080:	03 c0       	rjmp	.+6      	; 0x3088 <rf24_available+0x24>
    3082:	80 e0       	ldi	r24, 0x00	; 0
    3084:	01 c0       	rjmp	.+2      	; 0x3088 <rf24_available+0x24>
    3086:	81 e0       	ldi	r24, 0x01	; 1
    3088:	df 91       	pop	r29
    308a:	cf 91       	pop	r28
    308c:	08 95       	ret

0000308e <rf24_read>:
    308e:	69 df       	rcall	.-302    	; 0x2f62 <rf24_read_payload>
    3090:	60 e7       	ldi	r22, 0x70	; 112
    3092:	87 e0       	ldi	r24, 0x07	; 7
    3094:	45 cf       	rjmp	.-374    	; 0x2f20 <rf24_write_register>
    3096:	08 95       	ret

00003098 <rf24_setAddressWidth>:
    3098:	cf 93       	push	r28
    309a:	82 50       	subi	r24, 0x02	; 2
    309c:	41 f0       	breq	.+16     	; 0x30ae <rf24_setAddressWidth+0x16>
    309e:	c8 2f       	mov	r28, r24
    30a0:	c3 70       	andi	r28, 0x03	; 3
    30a2:	6c 2f       	mov	r22, r28
    30a4:	83 e0       	ldi	r24, 0x03	; 3
    30a6:	3c df       	rcall	.-392    	; 0x2f20 <rf24_write_register>
    30a8:	ce 5f       	subi	r28, 0xFE	; 254
    30aa:	c0 93 42 23 	sts	0x2342, r28
    30ae:	cf 91       	pop	r28
    30b0:	08 95       	ret

000030b2 <rf24_openReadingPipe>:
    30b2:	1f 93       	push	r17
    30b4:	cf 93       	push	r28
    30b6:	df 93       	push	r29
    30b8:	18 2f       	mov	r17, r24
    30ba:	eb 01       	movw	r28, r22
    30bc:	81 11       	cpse	r24, r1
    30be:	07 c0       	rjmp	.+14     	; 0x30ce <rf24_openReadingPipe+0x1c>
    30c0:	40 91 42 23 	lds	r20, 0x2342
    30c4:	50 e0       	ldi	r21, 0x00	; 0
    30c6:	85 e4       	ldi	r24, 0x45	; 69
    30c8:	93 e2       	ldi	r25, 0x23	; 35
    30ca:	bb d4       	rcall	.+2422   	; 0x3a42 <memcpy>
    30cc:	05 c0       	rjmp	.+10     	; 0x30d8 <rf24_openReadingPipe+0x26>
    30ce:	87 30       	cpi	r24, 0x07	; 7
    30d0:	08 f0       	brcs	.+2      	; 0x30d4 <rf24_openReadingPipe+0x22>
    30d2:	2e c0       	rjmp	.+92     	; 0x3130 <rf24_openReadingPipe+0x7e>
    30d4:	82 30       	cpi	r24, 0x02	; 2
    30d6:	50 f4       	brcc	.+20     	; 0x30ec <rf24_openReadingPipe+0x3a>
    30d8:	e1 2f       	mov	r30, r17
    30da:	f0 e0       	ldi	r31, 0x00	; 0
    30dc:	e2 5e       	subi	r30, 0xE2	; 226
    30de:	fd 4f       	sbci	r31, 0xFD	; 253
    30e0:	84 91       	lpm	r24, Z
    30e2:	40 91 42 23 	lds	r20, 0x2342
    30e6:	be 01       	movw	r22, r28
    30e8:	fd de       	rcall	.-518    	; 0x2ee4 <rf24_write_register_chunk>
    30ea:	07 c0       	rjmp	.+14     	; 0x30fa <rf24_openReadingPipe+0x48>
    30ec:	e8 2f       	mov	r30, r24
    30ee:	f0 e0       	ldi	r31, 0x00	; 0
    30f0:	e2 5e       	subi	r30, 0xE2	; 226
    30f2:	fd 4f       	sbci	r31, 0xFD	; 253
    30f4:	84 91       	lpm	r24, Z
    30f6:	41 e0       	ldi	r20, 0x01	; 1
    30f8:	f5 de       	rcall	.-534    	; 0x2ee4 <rf24_write_register_chunk>
    30fa:	c1 2f       	mov	r28, r17
    30fc:	d0 e0       	ldi	r29, 0x00	; 0
    30fe:	fe 01       	movw	r30, r28
    3100:	e8 5e       	subi	r30, 0xE8	; 232
    3102:	fd 4f       	sbci	r31, 0xFD	; 253
    3104:	84 91       	lpm	r24, Z
    3106:	60 91 50 23 	lds	r22, 0x2350
    310a:	0a df       	rcall	.-492    	; 0x2f20 <rf24_write_register>
    310c:	82 e0       	ldi	r24, 0x02	; 2
    310e:	d7 de       	rcall	.-594    	; 0x2ebe <rf24_read_register>
    3110:	fe 01       	movw	r30, r28
    3112:	ec 5d       	subi	r30, 0xDC	; 220
    3114:	fd 4f       	sbci	r31, 0xFD	; 253
    3116:	64 91       	lpm	r22, Z
    3118:	21 e0       	ldi	r18, 0x01	; 1
    311a:	30 e0       	ldi	r19, 0x00	; 0
    311c:	a9 01       	movw	r20, r18
    311e:	02 c0       	rjmp	.+4      	; 0x3124 <rf24_openReadingPipe+0x72>
    3120:	44 0f       	add	r20, r20
    3122:	55 1f       	adc	r21, r21
    3124:	6a 95       	dec	r22
    3126:	e2 f7       	brpl	.-8      	; 0x3120 <rf24_openReadingPipe+0x6e>
    3128:	ba 01       	movw	r22, r20
    312a:	68 2b       	or	r22, r24
    312c:	82 e0       	ldi	r24, 0x02	; 2
    312e:	f8 de       	rcall	.-528    	; 0x2f20 <rf24_write_register>
    3130:	df 91       	pop	r29
    3132:	cf 91       	pop	r28
    3134:	1f 91       	pop	r17
    3136:	08 95       	ret

00003138 <rf24_closeReadingPipe>:
    3138:	cf 93       	push	r28
    313a:	c8 2f       	mov	r28, r24
    313c:	82 e0       	ldi	r24, 0x02	; 2
    313e:	bf de       	rcall	.-642    	; 0x2ebe <rf24_read_register>
    3140:	ec 2f       	mov	r30, r28
    3142:	f0 e0       	ldi	r31, 0x00	; 0
    3144:	ec 5d       	subi	r30, 0xDC	; 220
    3146:	fd 4f       	sbci	r31, 0xFD	; 253
    3148:	e4 91       	lpm	r30, Z
    314a:	21 e0       	ldi	r18, 0x01	; 1
    314c:	30 e0       	ldi	r19, 0x00	; 0
    314e:	a9 01       	movw	r20, r18
    3150:	02 c0       	rjmp	.+4      	; 0x3156 <rf24_closeReadingPipe+0x1e>
    3152:	44 0f       	add	r20, r20
    3154:	55 1f       	adc	r21, r21
    3156:	ea 95       	dec	r30
    3158:	e2 f7       	brpl	.-8      	; 0x3152 <rf24_closeReadingPipe+0x1a>
    315a:	fa 01       	movw	r30, r20
    315c:	e0 95       	com	r30
    315e:	6e 2f       	mov	r22, r30
    3160:	68 23       	and	r22, r24
    3162:	82 e0       	ldi	r24, 0x02	; 2
    3164:	dd de       	rcall	.-582    	; 0x2f20 <rf24_write_register>
    3166:	cf 91       	pop	r28
    3168:	08 95       	ret

0000316a <rf24_startListening>:
    316a:	80 e0       	ldi	r24, 0x00	; 0
    316c:	a8 de       	rcall	.-688    	; 0x2ebe <rf24_read_register>
    316e:	68 2f       	mov	r22, r24
    3170:	61 60       	ori	r22, 0x01	; 1
    3172:	80 e0       	ldi	r24, 0x00	; 0
    3174:	d5 de       	rcall	.-598    	; 0x2f20 <rf24_write_register>
    3176:	60 e7       	ldi	r22, 0x70	; 112
    3178:	87 e0       	ldi	r24, 0x07	; 7
    317a:	d2 de       	rcall	.-604    	; 0x2f20 <rf24_write_register>
    317c:	82 e0       	ldi	r24, 0x02	; 2
    317e:	e0 e4       	ldi	r30, 0x40	; 64
    3180:	f6 e0       	ldi	r31, 0x06	; 6
    3182:	85 83       	std	Z+5, r24	; 0x05
    3184:	80 91 45 23 	lds	r24, 0x2345
    3188:	88 23       	and	r24, r24
    318a:	39 f0       	breq	.+14     	; 0x319a <rf24_startListening+0x30>
    318c:	40 91 42 23 	lds	r20, 0x2342
    3190:	65 e4       	ldi	r22, 0x45	; 69
    3192:	73 e2       	ldi	r23, 0x23	; 35
    3194:	8a e0       	ldi	r24, 0x0A	; 10
    3196:	a6 de       	rcall	.-692    	; 0x2ee4 <rf24_write_register_chunk>
    3198:	02 c0       	rjmp	.+4      	; 0x319e <rf24_startListening+0x34>
    319a:	80 e0       	ldi	r24, 0x00	; 0
    319c:	cd df       	rcall	.-102    	; 0x3138 <rf24_closeReadingPipe>
    319e:	8d e1       	ldi	r24, 0x1D	; 29
    31a0:	8e de       	rcall	.-740    	; 0x2ebe <rf24_read_register>
    31a2:	81 fd       	sbrc	r24, 1
    31a4:	3a cf       	rjmp	.-396    	; 0x301a <rf24_flush_tx>
    31a6:	08 95       	ret

000031a8 <rf24_toggle_features>:
    31a8:	cf 93       	push	r28
    31aa:	df 93       	push	r29
    31ac:	1f 92       	push	r1
    31ae:	1f 92       	push	r1
    31b0:	cd b7       	in	r28, 0x3d	; 61
    31b2:	de b7       	in	r29, 0x3e	; 62
    31b4:	80 e5       	ldi	r24, 0x50	; 80
    31b6:	89 83       	std	Y+1, r24	; 0x01
    31b8:	83 e7       	ldi	r24, 0x73	; 115
    31ba:	8a 83       	std	Y+2, r24	; 0x02
    31bc:	80 e0       	ldi	r24, 0x00	; 0
    31be:	66 de       	rcall	.-820    	; 0x2e8c <rf24_csn>
    31c0:	42 e0       	ldi	r20, 0x02	; 2
    31c2:	50 e0       	ldi	r21, 0x00	; 0
    31c4:	be 01       	movw	r22, r28
    31c6:	6f 5f       	subi	r22, 0xFF	; 255
    31c8:	7f 4f       	sbci	r23, 0xFF	; 255
    31ca:	80 ec       	ldi	r24, 0xC0	; 192
    31cc:	98 e0       	ldi	r25, 0x08	; 8
    31ce:	11 d1       	rcall	.+546    	; 0x33f2 <spi_write_packet>
    31d0:	81 e0       	ldi	r24, 0x01	; 1
    31d2:	5c de       	rcall	.-840    	; 0x2e8c <rf24_csn>
    31d4:	0f 90       	pop	r0
    31d6:	0f 90       	pop	r0
    31d8:	df 91       	pop	r29
    31da:	cf 91       	pop	r28
    31dc:	08 95       	ret

000031de <rf24_setPALevel>:
    31de:	cf 93       	push	r28
    31e0:	c8 2f       	mov	r28, r24
    31e2:	86 e0       	ldi	r24, 0x06	; 6
    31e4:	6c de       	rcall	.-808    	; 0x2ebe <rf24_read_register>
    31e6:	88 7f       	andi	r24, 0xF8	; 248
    31e8:	c4 30       	cpi	r28, 0x04	; 4
    31ea:	20 f4       	brcc	.+8      	; 0x31f4 <rf24_setPALevel+0x16>
    31ec:	6c 2f       	mov	r22, r28
    31ee:	66 0f       	add	r22, r22
    31f0:	6f 5f       	subi	r22, 0xFF	; 255
    31f2:	01 c0       	rjmp	.+2      	; 0x31f6 <rf24_setPALevel+0x18>
    31f4:	67 e0       	ldi	r22, 0x07	; 7
    31f6:	68 2b       	or	r22, r24
    31f8:	86 e0       	ldi	r24, 0x06	; 6
    31fa:	92 de       	rcall	.-732    	; 0x2f20 <rf24_write_register>
    31fc:	cf 91       	pop	r28
    31fe:	08 95       	ret

00003200 <rf24_setDataRate>:

/****************************************************************************/

bool rf24_setDataRate(rf24_datarate_e speed) {
    3200:	cf 93       	push	r28
    3202:	df 93       	push	r29
    3204:	d8 2f       	mov	r29, r24
  bool result = false;
  uint8_t setup = rf24_read_register(RF_SETUP) ;
    3206:	86 e0       	ldi	r24, 0x06	; 6
    3208:	5a de       	rcall	.-844    	; 0x2ebe <rf24_read_register>

  // HIGH and LOW '00' is 1Mbs - our default
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
    320a:	c8 2f       	mov	r28, r24
    320c:	c7 7d       	andi	r28, 0xD7	; 215
 
  //32Mhz uC
  txRxDelay=170;

  if( speed == RF24_250KBPS ) {
    320e:	d2 30       	cpi	r29, 0x02	; 2
    3210:	71 f4       	brne	.+28     	; 0x322e <rf24_setDataRate+0x2e>
    // Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
    // Making it '10'.
    setup |= _BV( RF_DR_LOW ) ;
    3212:	c0 62       	ori	r28, 0x20	; 32
    
	//32Mhx uC
	txRxDelay=310;
    3214:	46 e3       	ldi	r20, 0x36	; 54
    3216:	51 e0       	ldi	r21, 0x01	; 1
    3218:	60 e0       	ldi	r22, 0x00	; 0
    321a:	70 e0       	ldi	r23, 0x00	; 0
    321c:	40 93 4c 23 	sts	0x234C, r20
    3220:	50 93 4d 23 	sts	0x234D, r21
    3224:	60 93 4e 23 	sts	0x234E, r22
    3228:	70 93 4f 23 	sts	0x234F, r23
    322c:	1c c0       	rjmp	.+56     	; 0x3266 <rf24_setDataRate+0x66>
  } else {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS ) {
    322e:	d1 30       	cpi	r29, 0x01	; 1
    3230:	69 f0       	breq	.+26     	; 0x324c <rf24_setDataRate+0x4c>

  // HIGH and LOW '00' is 1Mbs - our default
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
 
  //32Mhz uC
  txRxDelay=170;
    3232:	4a ea       	ldi	r20, 0xAA	; 170
    3234:	50 e0       	ldi	r21, 0x00	; 0
    3236:	60 e0       	ldi	r22, 0x00	; 0
    3238:	70 e0       	ldi	r23, 0x00	; 0
    323a:	40 93 4c 23 	sts	0x234C, r20
    323e:	50 93 4d 23 	sts	0x234D, r21
    3242:	60 93 4e 23 	sts	0x234E, r22
    3246:	70 93 4f 23 	sts	0x234F, r23
    324a:	0d c0       	rjmp	.+26     	; 0x3266 <rf24_setDataRate+0x66>
	txRxDelay=310;
  } else {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS ) {
      setup |= _BV(RF_DR_HIGH);
    324c:	c8 60       	ori	r28, 0x08	; 8
      //32Mhz uC
	  txRxDelay=130;
    324e:	42 e8       	ldi	r20, 0x82	; 130
    3250:	50 e0       	ldi	r21, 0x00	; 0
    3252:	60 e0       	ldi	r22, 0x00	; 0
    3254:	70 e0       	ldi	r23, 0x00	; 0
    3256:	40 93 4c 23 	sts	0x234C, r20
    325a:	50 93 4d 23 	sts	0x234D, r21
    325e:	60 93 4e 23 	sts	0x234E, r22
    3262:	70 93 4f 23 	sts	0x234F, r23
    }
  }
  rf24_write_register(RF_SETUP,setup);
    3266:	6c 2f       	mov	r22, r28
    3268:	86 e0       	ldi	r24, 0x06	; 6
    326a:	5a de       	rcall	.-844    	; 0x2f20 <rf24_write_register>

  // Verify our result
  if ( rf24_read_register(RF_SETUP) == setup ) {
    326c:	86 e0       	ldi	r24, 0x06	; 6
    326e:	27 de       	rcall	.-946    	; 0x2ebe <rf24_read_register>
    3270:	91 e0       	ldi	r25, 0x01	; 1
    3272:	c8 13       	cpse	r28, r24
    3274:	90 e0       	ldi	r25, 0x00	; 0
    result = true;
  }

  return result;
}
    3276:	89 2f       	mov	r24, r25
    3278:	df 91       	pop	r29
    327a:	cf 91       	pop	r28
    327c:	08 95       	ret

0000327e <rf24_begin>:
#include "RF24.h"

/****************************************************************************/
#define _BV(bit) (1 << (bit))

void rf24_begin(void) {
    327e:	cf 92       	push	r12
    3280:	df 92       	push	r13
    3282:	ef 92       	push	r14
    3284:	ff 92       	push	r15
    3286:	0f 93       	push	r16
    3288:	1f 93       	push	r17
    328a:	cf 93       	push	r28
    328c:	df 93       	push	r29
    328e:	1f 92       	push	r1
    3290:	cd b7       	in	r28, 0x3d	; 61
    3292:	de b7       	in	r29, 0x3e	; 62
    3294:	41 e0       	ldi	r20, 0x01	; 1
    3296:	50 e0       	ldi	r21, 0x00	; 0
    3298:	62 e0       	ldi	r22, 0x02	; 2
    329a:	80 e4       	ldi	r24, 0x40	; 64
    329c:	96 e0       	ldi	r25, 0x06	; 6
    329e:	cb d0       	rcall	.+406    	; 0x3436 <ioport_configure_port_pin>
    32a0:	41 e0       	ldi	r20, 0x01	; 1
    32a2:	50 e0       	ldi	r21, 0x00	; 0
    32a4:	64 e0       	ldi	r22, 0x04	; 4
    32a6:	80 e4       	ldi	r24, 0x40	; 64
    32a8:	96 e0       	ldi	r25, 0x06	; 6
    32aa:	c5 d0       	rcall	.+394    	; 0x3436 <ioport_configure_port_pin>
    32ac:	40 e0       	ldi	r20, 0x00	; 0
    32ae:	58 e1       	ldi	r21, 0x18	; 24
    32b0:	60 e1       	ldi	r22, 0x10	; 16
    32b2:	80 e4       	ldi	r24, 0x40	; 64
    32b4:	96 e0       	ldi	r25, 0x06	; 6
    32b6:	bf d0       	rcall	.+382    	; 0x3436 <ioport_configure_port_pin>
    32b8:	43 e0       	ldi	r20, 0x03	; 3
    32ba:	50 e0       	ldi	r21, 0x00	; 0
    32bc:	60 e2       	ldi	r22, 0x20	; 32
    32be:	80 e4       	ldi	r24, 0x40	; 64
    32c0:	96 e0       	ldi	r25, 0x06	; 6
    32c2:	b9 d0       	rcall	.+370    	; 0x3436 <ioport_configure_port_pin>
    32c4:	40 e0       	ldi	r20, 0x00	; 0
    32c6:	50 e0       	ldi	r21, 0x00	; 0
    32c8:	60 e4       	ldi	r22, 0x40	; 64
    32ca:	80 e4       	ldi	r24, 0x40	; 64
    32cc:	96 e0       	ldi	r25, 0x06	; 6
    32ce:	b3 d0       	rcall	.+358    	; 0x3436 <ioport_configure_port_pin>
    32d0:	43 e0       	ldi	r20, 0x03	; 3
    32d2:	50 e0       	ldi	r21, 0x00	; 0
    32d4:	60 e8       	ldi	r22, 0x80	; 128
    32d6:	80 e4       	ldi	r24, 0x40	; 64
    32d8:	96 e0       	ldi	r25, 0x06	; 6
    32da:	ad d0       	rcall	.+346    	; 0x3436 <ioport_configure_port_pin>
	ioport_configure_pin(rf24_mosi_pin, IOPORT_INIT_HIGH | IOPORT_DIR_OUTPUT );
	ioport_configure_pin(rf24_miso_pin, IOPORT_DIR_INPUT );
	ioport_configure_pin(rf24_sck_pin,  IOPORT_INIT_HIGH | IOPORT_DIR_OUTPUT );

	// Initialize spi
	struct spi_device rf24_spi_device_conf = {
    32dc:	80 e1       	ldi	r24, 0x10	; 16
    32de:	89 83       	std	Y+1, r24	; 0x01
		.id = IOPORT_CREATE_PIN(PORTC, rf24_dummy_pin)
	};

	spi_master_init(&rf24_spi);
    32e0:	80 ec       	ldi	r24, 0xC0	; 192
    32e2:	98 e0       	ldi	r25, 0x08	; 8
    32e4:	50 d0       	rcall	.+160    	; 0x3386 <spi_master_init>
	spi_master_setup_device(&rf24_spi, &rf24_spi_device_conf, SPI_MODE_0, 8000000, 0);
    32e6:	c1 2c       	mov	r12, r1
    32e8:	d1 2c       	mov	r13, r1
    32ea:	76 01       	movw	r14, r12
    32ec:	00 e0       	ldi	r16, 0x00	; 0
    32ee:	12 e1       	ldi	r17, 0x12	; 18
    32f0:	2a e7       	ldi	r18, 0x7A	; 122
    32f2:	30 e0       	ldi	r19, 0x00	; 0
    32f4:	40 e0       	ldi	r20, 0x00	; 0
    32f6:	be 01       	movw	r22, r28
    32f8:	6f 5f       	subi	r22, 0xFF	; 255
    32fa:	7f 4f       	sbci	r23, 0xFF	; 255
    32fc:	80 ec       	ldi	r24, 0xC0	; 192
    32fe:	98 e0       	ldi	r25, 0x08	; 8
    3300:	59 d0       	rcall	.+178    	; 0x33b4 <spi_master_setup_device>
 *
 * \param spi Base address of the SPI instance.
 */
static inline void spi_enable(SPI_t *spi)
{
	spi->CTRL |= SPI_ENABLE_bm;
    3302:	e0 ec       	ldi	r30, 0xC0	; 192
    3304:	f8 e0       	ldi	r31, 0x08	; 8
    3306:	80 81       	ld	r24, Z
    3308:	80 64       	ori	r24, 0x40	; 64
    330a:	80 83       	st	Z, r24
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    330c:	82 e0       	ldi	r24, 0x02	; 2
    330e:	e0 e4       	ldi	r30, 0x40	; 64
    3310:	f6 e0       	ldi	r31, 0x06	; 6
    3312:	86 83       	std	Z+6, r24	; 0x06
	spi_enable(&rf24_spi);
	
	rf24_ce(LOW);
	rf24_csn(HIGH);
    3314:	81 e0       	ldi	r24, 0x01	; 1
    3316:	ba dd       	rcall	.-1164   	; 0x2e8c <rf24_csn>
    3318:	80 e0       	ldi	r24, 0x00	; 0
    331a:	90 e0       	ldi	r25, 0x00	; 0
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	do { barrier(); } while (--n);
    331c:	01 96       	adiw	r24, 0x01	; 1
    331e:	80 32       	cpi	r24, 0x20	; 32
    3320:	2e e4       	ldi	r18, 0x4E	; 78
    3322:	92 07       	cpc	r25, r18
    3324:	d9 f7       	brne	.-10     	; 0x331c <rf24_begin+0x9e>
	// Technically we require 4.5ms + 14us as a worst case. We'll just call it 5ms for good measure.
	// WARNING: Delay is based on P-variant whereby non-P *may* require different timing.
	delay_ms( 5 ) ;

	// Reset CONFIG and enable 16-bit CRC.
	rf24_write_register( CONFIG, 0b00001100 ) ; //works
    3326:	6c e0       	ldi	r22, 0x0C	; 12
    3328:	80 e0       	ldi	r24, 0x00	; 0
    332a:	fa dd       	rcall	.-1036   	; 0x2f20 <rf24_write_register>
  rf24_write_register( CONFIG, disable ) ;
}

/****************************************************************************/
void rf24_setRetries(uint8_t delay, uint8_t count) {
  rf24_write_register(SETUP_RETR,(delay&0xf)<<ARD | (count&0xf)<<ARC);
    332c:	6f e5       	ldi	r22, 0x5F	; 95
    332e:	84 e0       	ldi	r24, 0x04	; 4
    3330:	f7 dd       	rcall	.-1042   	; 0x2f20 <rf24_write_register>
	// because a non-P variant won't allow the data rate to
	// be set to 250Kbps.
	//
	//Manually set p variant to false.  should reenable this bit of code once stuff is working
	//
	p_variant = false;
    3332:	10 92 4b 23 	sts	0x234B, r1
	if( rf24_setDataRate( RF24_250KBPS ) ) {
    3336:	82 e0       	ldi	r24, 0x02	; 2
    3338:	63 df       	rcall	.-314    	; 0x3200 <rf24_setDataRate>
    333a:	88 23       	and	r24, r24
    333c:	19 f0       	breq	.+6      	; 0x3344 <rf24_begin+0xc6>
		p_variant = true ;
    333e:	81 e0       	ldi	r24, 0x01	; 1
    3340:	80 93 4b 23 	sts	0x234B, r24
	}
	

	// Then set the data rate to the slowest (and most reliable) speed supported by all
	// hardware.
	rf24_setDataRate( RF24_1MBPS ) ;
    3344:	80 e0       	ldi	r24, 0x00	; 0
    3346:	5c df       	rcall	.-328    	; 0x3200 <rf24_setDataRate>

	// Initialize CRC and request 2-byte (16bit) CRC
	//rf24_setCRCLength( RF24_CRC_16 ) ;

	// Disable dynamic payloads, to match dynamic_payloads_enabled setting - Reset value is 0
	rf24_toggle_features();
    3348:	2f df       	rcall	.-418    	; 0x31a8 <rf24_toggle_features>
	rf24_write_register(FEATURE,0 );
    334a:	60 e0       	ldi	r22, 0x00	; 0
    334c:	8d e1       	ldi	r24, 0x1D	; 29
    334e:	e8 dd       	rcall	.-1072   	; 0x2f20 <rf24_write_register>
	rf24_write_register(DYNPD,0);
    3350:	60 e0       	ldi	r22, 0x00	; 0
    3352:	8c e1       	ldi	r24, 0x1C	; 28
    3354:	e5 dd       	rcall	.-1078   	; 0x2f20 <rf24_write_register>

	// Reset current status
	// Notice reset and flush is the last thing we do
	rf24_write_register(STATUS_RF,_BV(RX_DR) | _BV(TX_DS) | _BV(MAX_RT) );
    3356:	60 e7       	ldi	r22, 0x70	; 112
    3358:	87 e0       	ldi	r24, 0x07	; 7
    335a:	e2 dd       	rcall	.-1084   	; 0x2f20 <rf24_write_register>

	// Set up default configuration.  Callers can always change it later.
	// This channel should be universally safe and not bleed over into adjacent
	// spectrum.
	rf24_setChannel(76);
    335c:	8c e4       	ldi	r24, 0x4C	; 76
    335e:	63 de       	rcall	.-826    	; 0x3026 <rf24_setChannel>

	// Flush buffers
	rf24_flush_rx();
    3360:	59 de       	rcall	.-846    	; 0x3014 <rf24_flush_rx>
	rf24_flush_tx();
    3362:	5b de       	rcall	.-842    	; 0x301a <rf24_flush_tx>

	rf24_powerUp(); //Power up by default when begin() is called
    3364:	6d de       	rcall	.-806    	; 0x3040 <rf24_powerUp>

	// Enable PTX, do not write CE high so radio will remain in standby I mode ( 130us max to transition to RX or TX instead of 1500us from powerUp )
	// PTX should use only 22uA of power
	rf24_write_register(CONFIG, ( rf24_read_register(CONFIG) ) & ~_BV(PRIM_RX) );
    3366:	80 e0       	ldi	r24, 0x00	; 0
    3368:	aa dd       	rcall	.-1196   	; 0x2ebe <rf24_read_register>
    336a:	68 2f       	mov	r22, r24
    336c:	6e 7f       	andi	r22, 0xFE	; 254
    336e:	80 e0       	ldi	r24, 0x00	; 0
    3370:	d7 dd       	rcall	.-1106   	; 0x2f20 <rf24_write_register>

}
    3372:	0f 90       	pop	r0
    3374:	df 91       	pop	r29
    3376:	cf 91       	pop	r28
    3378:	1f 91       	pop	r17
    337a:	0f 91       	pop	r16
    337c:	ff 90       	pop	r15
    337e:	ef 90       	pop	r14
    3380:	df 90       	pop	r13
    3382:	cf 90       	pop	r12
    3384:	08 95       	ret

00003386 <spi_master_init>:
 *
 * \param spi       Base address of the SPI instance.
 *
 */
void spi_master_init(SPI_t *spi)
{
    3386:	cf 93       	push	r28
    3388:	df 93       	push	r29
    338a:	ec 01       	movw	r28, r24
	if ((uint16_t)spi == (uint16_t)&SPIB) {
		sysclk_enable_module(SYSCLK_PORT_B, PR_SPI_bm);
	}
#endif
#ifdef SPIC
	if ((uint16_t)spi == (uint16_t)&SPIC) {
    338c:	c0 3c       	cpi	r28, 0xC0	; 192
    338e:	28 e0       	ldi	r18, 0x08	; 8
    3390:	d2 07       	cpc	r29, r18
    3392:	21 f4       	brne	.+8      	; 0x339c <spi_master_init+0x16>
		sysclk_enable_module(SYSCLK_PORT_C, PR_SPI_bm);
    3394:	68 e0       	ldi	r22, 0x08	; 8
    3396:	83 e0       	ldi	r24, 0x03	; 3
    3398:	e2 d0       	rcall	.+452    	; 0x355e <sysclk_enable_module>
    339a:	06 c0       	rjmp	.+12     	; 0x33a8 <spi_master_init+0x22>
	}
#endif
#ifdef SPID
	if ((uint16_t)spi == (uint16_t)&SPID) {
    339c:	80 3c       	cpi	r24, 0xC0	; 192
    339e:	99 40       	sbci	r25, 0x09	; 9
    33a0:	19 f4       	brne	.+6      	; 0x33a8 <spi_master_init+0x22>
		sysclk_enable_module(SYSCLK_PORT_D, PR_SPI_bm);
    33a2:	68 e0       	ldi	r22, 0x08	; 8
    33a4:	84 e0       	ldi	r24, 0x04	; 4
    33a6:	db d0       	rcall	.+438    	; 0x355e <sysclk_enable_module>
 *
 * \warning This may cause data loss if used on a slave SPI.
 */
static inline void spi_enable_master_mode(SPI_t *spi)
{
	spi->CTRL |= SPI_MASTER_bm;
    33a8:	88 81       	ld	r24, Y
    33aa:	80 61       	ori	r24, 0x10	; 16
    33ac:	88 83       	st	Y, r24
	if ((uint16_t)spi == (uint16_t)&SPIF) {
		sysclk_enable_module(SYSCLK_PORT_F, PR_SPI_bm);
	}
#endif
	spi_enable_master_mode(spi);
}
    33ae:	df 91       	pop	r29
    33b0:	cf 91       	pop	r28
    33b2:	08 95       	ret

000033b4 <spi_master_setup_device>:
 * \param sel_id    Board specific select id
 */
void spi_master_setup_device(SPI_t *spi, struct spi_device *device,
		spi_flags_t flags, uint32_t baud_rate,
		board_spi_select_id_t sel_id)
{
    33b4:	ff 92       	push	r15
    33b6:	0f 93       	push	r16
    33b8:	1f 93       	push	r17
    33ba:	cf 93       	push	r28
    33bc:	df 93       	push	r29
    33be:	ec 01       	movw	r28, r24
    33c0:	f4 2e       	mov	r15, r20
    33c2:	b9 01       	movw	r22, r18
    33c4:	a8 01       	movw	r20, r16
	if (spi_xmega_set_baud_div(spi, baud_rate, sysclk_get_cpu_hz()) < 0) {
    33c6:	00 e0       	ldi	r16, 0x00	; 0
    33c8:	16 e3       	ldi	r17, 0x36	; 54
    33ca:	2e e6       	ldi	r18, 0x6E	; 110
    33cc:	31 e0       	ldi	r19, 0x01	; 1
    33ce:	09 d1       	rcall	.+530    	; 0x35e2 <spi_xmega_set_baud_div>
    33d0:	88 23       	and	r24, r24
    33d2:	4c f0       	brlt	.+18     	; 0x33e6 <spi_master_setup_device+0x32>
		Assert(false);
		return;
	}

	/* Clear any set SPI mode flags and set them to the user-specified mode */
	spi->CTRL = (spi->CTRL & ~SPI_MODE_gm) |
    33d4:	88 81       	ld	r24, Y
			((flags << SPI_MODE_gp) & SPI_MODE_gm);
    33d6:	9f 2d       	mov	r25, r15
    33d8:	99 0f       	add	r25, r25
    33da:	99 0f       	add	r25, r25
		Assert(false);
		return;
	}

	/* Clear any set SPI mode flags and set them to the user-specified mode */
	spi->CTRL = (spi->CTRL & ~SPI_MODE_gm) |
    33dc:	9c 70       	andi	r25, 0x0C	; 12
    33de:	83 7f       	andi	r24, 0xF3	; 243
    33e0:	f9 2e       	mov	r15, r25
    33e2:	f8 2a       	or	r15, r24
    33e4:	f8 82       	st	Y, r15
			((flags << SPI_MODE_gp) & SPI_MODE_gm);
}
    33e6:	df 91       	pop	r29
    33e8:	cf 91       	pop	r28
    33ea:	1f 91       	pop	r17
    33ec:	0f 91       	pop	r16
    33ee:	ff 90       	pop	r15
    33f0:	08 95       	ret

000033f2 <spi_write_packet>:
 * \param len    Length of data
 *
 * \pre SPI device must be selected with spi_select_device() first
 */
status_code_t spi_write_packet(SPI_t *spi, const uint8_t *data, size_t len)
{
    33f2:	fc 01       	movw	r30, r24
    33f4:	db 01       	movw	r26, r22
    33f6:	46 0f       	add	r20, r22
    33f8:	57 1f       	adc	r21, r23
	while (len--) {
    33fa:	05 c0       	rjmp	.+10     	; 0x3406 <spi_write_packet+0x14>
		spi_write_single(spi, *data++);
    33fc:	8d 91       	ld	r24, X+
 * \param data The data byte to be loaded
 *
 */
static inline void spi_put(SPI_t *spi, uint8_t data)
{
	spi->DATA = data;
    33fe:	83 83       	std	Z+3, r24	; 0x03
 *
 * \return \c 1 if the SPI Receive Holding Register is full, otherwise \c 0.
 */
static inline bool spi_is_tx_ok(SPI_t *spi)
{
	return spi->STATUS & SPI_IF_bm ? true : false;
    3400:	82 81       	ldd	r24, Z+2	; 0x02
		
		while (!spi_is_rx_full(spi)) {
    3402:	88 23       	and	r24, r24
    3404:	ec f7       	brge	.-6      	; 0x3400 <spi_write_packet+0xe>
 *
 * \pre SPI device must be selected with spi_select_device() first
 */
status_code_t spi_write_packet(SPI_t *spi, const uint8_t *data, size_t len)
{
	while (len--) {
    3406:	a4 17       	cp	r26, r20
    3408:	b5 07       	cpc	r27, r21
    340a:	c1 f7       	brne	.-16     	; 0x33fc <spi_write_packet+0xa>
		while (!spi_is_rx_full(spi)) {
		}
	}
	
	return STATUS_OK;
}
    340c:	80 e0       	ldi	r24, 0x00	; 0
    340e:	08 95       	ret

00003410 <spi_read_packet>:
 * \param len    Length of data
 *
 * \pre SPI device must be selected with spi_select_device() first
 */
status_code_t spi_read_packet(SPI_t *spi, uint8_t *data, size_t len)
{
    3410:	fc 01       	movw	r30, r24
    3412:	db 01       	movw	r26, r22
	while (len--) {
    3414:	41 15       	cp	r20, r1
    3416:	51 05       	cpc	r21, r1
    3418:	61 f0       	breq	.+24     	; 0x3432 <spi_read_packet+0x22>
    341a:	46 0f       	add	r20, r22
    341c:	57 1f       	adc	r21, r23
 * \param data The data byte to be loaded
 *
 */
static inline void spi_put(SPI_t *spi, uint8_t data)
{
	spi->DATA = data;
    341e:	9f ef       	ldi	r25, 0xFF	; 255
    3420:	93 83       	std	Z+3, r25	; 0x03
 *
 * \return \c 1 if the SPI Receive Holding Register is full, otherwise \c 0.
 */
static inline bool spi_is_tx_ok(SPI_t *spi)
{
	return spi->STATUS & SPI_IF_bm ? true : false;
    3422:	82 81       	ldd	r24, Z+2	; 0x02
		spi_write_single(spi,CONFIG_SPI_MASTER_DUMMY); //Dummy write

		while (!spi_is_rx_full(spi)) {
    3424:	88 23       	and	r24, r24
    3426:	ec f7       	brge	.-6      	; 0x3422 <spi_read_packet+0x12>
 * \return The data byte
 *
 */
static inline uint8_t spi_get(SPI_t *spi)
{
	return spi->DATA;
    3428:	83 81       	ldd	r24, Z+3	; 0x03
 * \param data Pointer to the data byte where to store the received data.
 *
 */
inline static void spi_read_single(SPI_t *spi, uint8_t *data)
{
	*data=spi_get(spi);
    342a:	8d 93       	st	X+, r24
 *
 * \pre SPI device must be selected with spi_select_device() first
 */
status_code_t spi_read_packet(SPI_t *spi, uint8_t *data, size_t len)
{
	while (len--) {
    342c:	a4 17       	cp	r26, r20
    342e:	b5 07       	cpc	r27, r21
    3430:	b9 f7       	brne	.-18     	; 0x3420 <spi_read_packet+0x10>
		spi_read_single(spi, data);
		data++;
	}
	
	return STATUS_OK;
}
    3432:	80 e0       	ldi	r24, 0x00	; 0
    3434:	08 95       	ret

00003436 <ioport_configure_port_pin>:
#include "ioport_compat.h"

#if defined(IOPORT_XMEGA_COMPAT)
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
    3436:	cf 93       	push	r28
    3438:	df 93       	push	r29
    343a:	fc 01       	movw	r30, r24
    343c:	70 96       	adiw	r30, 0x10	; 16
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
    343e:	20 e0       	ldi	r18, 0x00	; 0
    3440:	30 e0       	ldi	r19, 0x00	; 0
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
    3442:	c6 2f       	mov	r28, r22
    3444:	d0 e0       	ldi	r29, 0x00	; 0
    3446:	de 01       	movw	r26, r28
    3448:	02 2e       	mov	r0, r18
    344a:	02 c0       	rjmp	.+4      	; 0x3450 <ioport_configure_port_pin+0x1a>
    344c:	b5 95       	asr	r27
    344e:	a7 95       	ror	r26
    3450:	0a 94       	dec	r0
    3452:	e2 f7       	brpl	.-8      	; 0x344c <ioport_configure_port_pin+0x16>
    3454:	a0 fd       	sbrc	r26, 0
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
    3456:	50 83       	st	Z, r21
    3458:	2f 5f       	subi	r18, 0xFF	; 255
    345a:	3f 4f       	sbci	r19, 0xFF	; 255
    345c:	31 96       	adiw	r30, 0x01	; 1
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
    345e:	28 30       	cpi	r18, 0x08	; 8
    3460:	31 05       	cpc	r19, r1
    3462:	89 f7       	brne	.-30     	; 0x3446 <ioport_configure_port_pin+0x10>
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
		}
	}
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
    3464:	40 ff       	sbrs	r20, 0
    3466:	0a c0       	rjmp	.+20     	; 0x347c <ioport_configure_port_pin+0x46>
		if (flags & IOPORT_INIT_HIGH) {
    3468:	41 ff       	sbrs	r20, 1
    346a:	03 c0       	rjmp	.+6      	; 0x3472 <ioport_configure_port_pin+0x3c>
			*((uint8_t *)port + PORT_OUTSET) = pin_mask;
    346c:	fc 01       	movw	r30, r24
    346e:	65 83       	std	Z+5, r22	; 0x05
    3470:	02 c0       	rjmp	.+4      	; 0x3476 <ioport_configure_port_pin+0x40>
		} else {
			*((uint8_t *)port + PORT_OUTCLR) = pin_mask;
    3472:	fc 01       	movw	r30, r24
    3474:	66 83       	std	Z+6, r22	; 0x06
		}

		*((uint8_t *)port + PORT_DIRSET) = pin_mask;
    3476:	fc 01       	movw	r30, r24
    3478:	61 83       	std	Z+1, r22	; 0x01
    347a:	02 c0       	rjmp	.+4      	; 0x3480 <ioport_configure_port_pin+0x4a>
	} else {
		*((uint8_t *)port + PORT_DIRCLR) = pin_mask;
    347c:	fc 01       	movw	r30, r24
    347e:	62 83       	std	Z+2, r22	; 0x02
	}
}
    3480:	df 91       	pop	r29
    3482:	cf 91       	pop	r28
    3484:	08 95       	ret

00003486 <sysclk_init>:
    3486:	cf 93       	push	r28
    3488:	df 93       	push	r29
    348a:	00 d0       	rcall	.+0      	; 0x348c <sysclk_init+0x6>
    348c:	1f 92       	push	r1
    348e:	cd b7       	in	r28, 0x3d	; 61
    3490:	de b7       	in	r29, 0x3e	; 62
    3492:	8f ef       	ldi	r24, 0xFF	; 255
    3494:	80 93 70 00 	sts	0x0070, r24
    3498:	80 93 71 00 	sts	0x0071, r24
    349c:	80 93 72 00 	sts	0x0072, r24
    34a0:	80 93 73 00 	sts	0x0073, r24
    34a4:	80 93 74 00 	sts	0x0074, r24
    34a8:	80 93 75 00 	sts	0x0075, r24
    34ac:	80 93 76 00 	sts	0x0076, r24
    34b0:	64 e0       	ldi	r22, 0x04	; 4
    34b2:	81 e4       	ldi	r24, 0x41	; 65
    34b4:	90 e0       	ldi	r25, 0x00	; 0
    34b6:	e6 d0       	rcall	.+460    	; 0x3684 <ccp_write_io>
    34b8:	6c e1       	ldi	r22, 0x1C	; 28
    34ba:	70 e0       	ldi	r23, 0x00	; 0
    34bc:	82 e0       	ldi	r24, 0x02	; 2
    34be:	d8 d0       	rcall	.+432    	; 0x3670 <nvm_read_byte>
    34c0:	8a 83       	std	Y+2, r24	; 0x02
    34c2:	6d e1       	ldi	r22, 0x1D	; 29
    34c4:	70 e0       	ldi	r23, 0x00	; 0
    34c6:	82 e0       	ldi	r24, 0x02	; 2
    34c8:	d3 d0       	rcall	.+422    	; 0x3670 <nvm_read_byte>
    34ca:	89 83       	std	Y+1, r24	; 0x01
    34cc:	89 81       	ldd	r24, Y+1	; 0x01
    34ce:	9a 81       	ldd	r25, Y+2	; 0x02
    34d0:	01 96       	adiw	r24, 0x01	; 1
    34d2:	21 f4       	brne	.+8      	; 0x34dc <sysclk_init+0x56>
    34d4:	80 e4       	ldi	r24, 0x40	; 64
    34d6:	93 e2       	ldi	r25, 0x23	; 35
    34d8:	89 83       	std	Y+1, r24	; 0x01
    34da:	9a 83       	std	Y+2, r25	; 0x02
    34dc:	89 81       	ldd	r24, Y+1	; 0x01
    34de:	9a 81       	ldd	r25, Y+2	; 0x02
    34e0:	8b 83       	std	Y+3, r24	; 0x03
    34e2:	9c 83       	std	Y+4, r25	; 0x04
    34e4:	e0 e6       	ldi	r30, 0x60	; 96
    34e6:	f0 e0       	ldi	r31, 0x00	; 0
    34e8:	82 83       	std	Z+2, r24	; 0x02
    34ea:	8c 81       	ldd	r24, Y+4	; 0x04
    34ec:	83 83       	std	Z+3, r24	; 0x03
    34ee:	8f b7       	in	r24, 0x3f	; 63
    34f0:	f8 94       	cli
    34f2:	e0 e5       	ldi	r30, 0x50	; 80
    34f4:	f0 e0       	ldi	r31, 0x00	; 0
    34f6:	90 81       	ld	r25, Z
    34f8:	92 60       	ori	r25, 0x02	; 2
    34fa:	90 83       	st	Z, r25
    34fc:	8f bf       	out	0x3f, r24	; 63
    34fe:	81 81       	ldd	r24, Z+1	; 0x01
    3500:	81 ff       	sbrs	r24, 1
    3502:	fd cf       	rjmp	.-6      	; 0x34fe <sysclk_init+0x78>
    3504:	8f b7       	in	r24, 0x3f	; 63
    3506:	f8 94       	cli
    3508:	a0 e5       	ldi	r26, 0x50	; 80
    350a:	b0 e0       	ldi	r27, 0x00	; 0
    350c:	16 96       	adiw	r26, 0x06	; 6
    350e:	9c 91       	ld	r25, X
    3510:	16 97       	sbiw	r26, 0x06	; 6
    3512:	99 7f       	andi	r25, 0xF9	; 249
    3514:	16 96       	adiw	r26, 0x06	; 6
    3516:	9c 93       	st	X, r25
    3518:	16 97       	sbiw	r26, 0x06	; 6
    351a:	e0 e6       	ldi	r30, 0x60	; 96
    351c:	f0 e0       	ldi	r31, 0x00	; 0
    351e:	90 e8       	ldi	r25, 0x80	; 128
    3520:	95 83       	std	Z+5, r25	; 0x05
    3522:	9b eb       	ldi	r25, 0xBB	; 187
    3524:	96 83       	std	Z+6, r25	; 0x06
    3526:	16 96       	adiw	r26, 0x06	; 6
    3528:	9c 91       	ld	r25, X
    352a:	16 97       	sbiw	r26, 0x06	; 6
    352c:	94 60       	ori	r25, 0x04	; 4
    352e:	16 96       	adiw	r26, 0x06	; 6
    3530:	9c 93       	st	X, r25
    3532:	90 81       	ld	r25, Z
    3534:	91 60       	ori	r25, 0x01	; 1
    3536:	90 83       	st	Z, r25
    3538:	8f bf       	out	0x3f, r24	; 63
    353a:	61 e0       	ldi	r22, 0x01	; 1
    353c:	80 e4       	ldi	r24, 0x40	; 64
    353e:	90 e0       	ldi	r25, 0x00	; 0
    3540:	a1 d0       	rcall	.+322    	; 0x3684 <ccp_write_io>
    3542:	8f b7       	in	r24, 0x3f	; 63
    3544:	f8 94       	cli
    3546:	e0 e5       	ldi	r30, 0x50	; 80
    3548:	f0 e0       	ldi	r31, 0x00	; 0
    354a:	90 81       	ld	r25, Z
    354c:	9e 7f       	andi	r25, 0xFE	; 254
    354e:	90 83       	st	Z, r25
    3550:	8f bf       	out	0x3f, r24	; 63
    3552:	24 96       	adiw	r28, 0x04	; 4
    3554:	cd bf       	out	0x3d, r28	; 61
    3556:	de bf       	out	0x3e, r29	; 62
    3558:	df 91       	pop	r29
    355a:	cf 91       	pop	r28
    355c:	08 95       	ret

0000355e <sysclk_enable_module>:
    355e:	9f b7       	in	r25, 0x3f	; 63
    3560:	f8 94       	cli
    3562:	e8 2f       	mov	r30, r24
    3564:	f0 e0       	ldi	r31, 0x00	; 0
    3566:	e0 59       	subi	r30, 0x90	; 144
    3568:	ff 4f       	sbci	r31, 0xFF	; 255
    356a:	60 95       	com	r22
    356c:	80 81       	ld	r24, Z
    356e:	68 23       	and	r22, r24
    3570:	60 83       	st	Z, r22
    3572:	9f bf       	out	0x3f, r25	; 63
    3574:	08 95       	ret

00003576 <sysclk_enable_usb>:

	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
    3576:	86 30       	cpi	r24, 0x06	; 6
    3578:	11 f4       	brne	.+4      	; 0x357e <sysclk_enable_usb+0x8>
		prescaler = CLK_USBPSDIV_8_gc;
    357a:	68 e1       	ldi	r22, 0x18	; 24
    357c:	01 c0       	rjmp	.+2      	; 0x3580 <sysclk_enable_usb+0xa>
	}
	else {
		prescaler = 0;
    357e:	60 e0       	ldi	r22, 0x00	; 0

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    3580:	e0 e5       	ldi	r30, 0x50	; 80
    3582:	f0 e0       	ldi	r31, 0x00	; 0
    3584:	81 81       	ldd	r24, Z+1	; 0x01
	/*
	 * Switch to the system clock selected by the user.
	 */
	switch (CONFIG_USBCLK_SOURCE) {
	case USBCLK_SRC_RCOSC:
		if (!osc_is_ready(OSC_ID_RC32MHZ)) {
    3586:	81 fd       	sbrc	r24, 1
    3588:	24 c0       	rjmp	.+72     	; 0x35d2 <sysclk_enable_usb+0x5c>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    358a:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    358c:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    358e:	90 81       	ld	r25, Z
    3590:	92 60       	ori	r25, 0x02	; 2
    3592:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3594:	8f bf       	out	0x3f, r24	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    3596:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
    3598:	81 ff       	sbrs	r24, 1
    359a:	fd cf       	rjmp	.-6      	; 0x3596 <sysclk_enable_usb+0x20>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    359c:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    359e:	f8 94       	cli
# if !XMEGA_E
				|| (ref_id == OSC_ID_USBSOF)
#endif
				);

		OSC.DFLLCTRL &= ~(OSC_RC32MCREF_gm);
    35a0:	a0 e5       	ldi	r26, 0x50	; 80
    35a2:	b0 e0       	ldi	r27, 0x00	; 0
    35a4:	16 96       	adiw	r26, 0x06	; 6
    35a6:	9c 91       	ld	r25, X
    35a8:	16 97       	sbiw	r26, 0x06	; 6
    35aa:	99 7f       	andi	r25, 0xF9	; 249
    35ac:	16 96       	adiw	r26, 0x06	; 6
    35ae:	9c 93       	st	X, r25
    35b0:	16 97       	sbiw	r26, 0x06	; 6
		else if (ref_id == OSC_ID_USBSOF) {
			/*
			 * Calibrate 32MRC at 48MHz using USB SOF
			 * 48MHz / 1kHz = 0xBB80
			 */
			DFLLRC32M.COMP1 = 0x80;
    35b2:	e0 e6       	ldi	r30, 0x60	; 96
    35b4:	f0 e0       	ldi	r31, 0x00	; 0
    35b6:	90 e8       	ldi	r25, 0x80	; 128
    35b8:	95 83       	std	Z+5, r25	; 0x05
			DFLLRC32M.COMP2 = 0xBB;
    35ba:	9b eb       	ldi	r25, 0xBB	; 187
    35bc:	96 83       	std	Z+6, r25	; 0x06
			OSC.DFLLCTRL |= OSC_RC32MCREF_USBSOF_gc;
    35be:	16 96       	adiw	r26, 0x06	; 6
    35c0:	9c 91       	ld	r25, X
    35c2:	16 97       	sbiw	r26, 0x06	; 6
    35c4:	94 60       	ori	r25, 0x04	; 4
    35c6:	16 96       	adiw	r26, 0x06	; 6
    35c8:	9c 93       	st	X, r25
			OSC.DFLLCTRL &= ~(OSC_RC32MCREF_bm);
# endif
		}
#endif

		DFLLRC32M.CTRL |= DFLL_ENABLE_bm;
    35ca:	90 81       	ld	r25, Z
    35cc:	91 60       	ori	r25, 0x01	; 1
    35ce:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    35d0:	8f bf       	out	0x3f, r24	; 63
			}
			osc_enable_autocalibration(OSC_ID_RC32MHZ,
					CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC);
#endif
		}
		ccp_write_io((uint8_t *)&CLK.USBCTRL, (prescaler)
    35d2:	63 60       	ori	r22, 0x03	; 3
    35d4:	84 e4       	ldi	r24, 0x44	; 68
    35d6:	90 e0       	ldi	r25, 0x00	; 0
    35d8:	55 d0       	rcall	.+170    	; 0x3684 <ccp_write_io>
	default:
		Assert(false);
		break;
	}

	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_USB);
    35da:	60 e4       	ldi	r22, 0x40	; 64
    35dc:	80 e0       	ldi	r24, 0x00	; 0
    35de:	bf cf       	rjmp	.-130    	; 0x355e <sysclk_enable_module>
    35e0:	08 95       	ret

000035e2 <spi_xmega_set_baud_div>:
 * \return Status of operation.
 *   \retval >=0  Success.
 *   \retval  <0  Error.
 */
int8_t spi_xmega_set_baud_div(SPI_t *spi, uint32_t baudrate, uint32_t clkper_hz)
{
    35e2:	cf 92       	push	r12
    35e4:	df 92       	push	r13
    35e6:	ef 92       	push	r14
    35e8:	ff 92       	push	r15
    35ea:	0f 93       	push	r16
    35ec:	1f 93       	push	r17
    35ee:	cf 93       	push	r28
    35f0:	df 93       	push	r29
    35f2:	ec 01       	movw	r28, r24
    35f4:	6a 01       	movw	r12, r20
    35f6:	7b 01       	movw	r14, r22

	/*
	 * Get wanted divisor rounded up so we don't get speed higher than
	 * requested baudrate.
	 */
	divisor = (clkper_hz + baudrate - 1) / baudrate;
    35f8:	db 01       	movw	r26, r22
    35fa:	ca 01       	movw	r24, r20
    35fc:	01 97       	sbiw	r24, 0x01	; 1
    35fe:	a1 09       	sbc	r26, r1
    3600:	b1 09       	sbc	r27, r1
    3602:	bc 01       	movw	r22, r24
    3604:	cd 01       	movw	r24, r26
    3606:	60 0f       	add	r22, r16
    3608:	71 1f       	adc	r23, r17
    360a:	82 1f       	adc	r24, r18
    360c:	93 1f       	adc	r25, r19
    360e:	a7 01       	movw	r20, r14
    3610:	96 01       	movw	r18, r12
    3612:	e0 d1       	rcall	.+960    	; 0x39d4 <__udivmodsi4>

	if (divisor > 128) {
    3614:	21 38       	cpi	r18, 0x81	; 129
    3616:	31 05       	cpc	r19, r1
    3618:	41 05       	cpc	r20, r1
    361a:	51 05       	cpc	r21, r1
    361c:	f8 f4       	brcc	.+62     	; 0x365c <spi_xmega_set_baud_div+0x7a>

	/*
	 * For divisor values between the possible ones round up to the closest
	 * higher one to avoid higher baudrate than requested.
	 */
	if (divisor_8bit > 64) {
    361e:	21 34       	cpi	r18, 0x41	; 65
    3620:	60 f4       	brcc	.+24     	; 0x363a <spi_xmega_set_baud_div+0x58>
		ctrl = SPI_PRESCALER_DIV128_gc;
	}
	else if (divisor_8bit > 32) {
    3622:	21 32       	cpi	r18, 0x21	; 33
    3624:	60 f4       	brcc	.+24     	; 0x363e <spi_xmega_set_baud_div+0x5c>
		ctrl = SPI_PRESCALER_DIV64_gc;
	}
	else if (divisor_8bit > 16) {
    3626:	21 31       	cpi	r18, 0x11	; 17
    3628:	60 f4       	brcc	.+24     	; 0x3642 <spi_xmega_set_baud_div+0x60>
		ctrl = SPI_CLK2X_bm | SPI_PRESCALER_DIV64_gc;
	}
	else if (divisor_8bit > 8) {
    362a:	29 30       	cpi	r18, 0x09	; 9
    362c:	60 f4       	brcc	.+24     	; 0x3646 <spi_xmega_set_baud_div+0x64>
		ctrl = SPI_PRESCALER_DIV16_gc;
	}
	else if (divisor_8bit > 4) {
    362e:	25 30       	cpi	r18, 0x05	; 5
    3630:	60 f4       	brcc	.+24     	; 0x364a <spi_xmega_set_baud_div+0x68>
		ctrl = SPI_CLK2X_bm | SPI_PRESCALER_DIV16_gc;
	}
	else if (divisor_8bit > 2) {
    3632:	23 30       	cpi	r18, 0x03	; 3
    3634:	60 f0       	brcs	.+24     	; 0x364e <spi_xmega_set_baud_div+0x6c>
		ctrl = SPI_PRESCALER_DIV4_gc;
    3636:	90 e0       	ldi	r25, 0x00	; 0
    3638:	0b c0       	rjmp	.+22     	; 0x3650 <spi_xmega_set_baud_div+0x6e>
	/*
	 * For divisor values between the possible ones round up to the closest
	 * higher one to avoid higher baudrate than requested.
	 */
	if (divisor_8bit > 64) {
		ctrl = SPI_PRESCALER_DIV128_gc;
    363a:	93 e0       	ldi	r25, 0x03	; 3
    363c:	09 c0       	rjmp	.+18     	; 0x3650 <spi_xmega_set_baud_div+0x6e>
	}
	else if (divisor_8bit > 32) {
		ctrl = SPI_PRESCALER_DIV64_gc;
    363e:	92 e0       	ldi	r25, 0x02	; 2
    3640:	07 c0       	rjmp	.+14     	; 0x3650 <spi_xmega_set_baud_div+0x6e>
	}
	else if (divisor_8bit > 16) {
		ctrl = SPI_CLK2X_bm | SPI_PRESCALER_DIV64_gc;
    3642:	92 e8       	ldi	r25, 0x82	; 130
    3644:	05 c0       	rjmp	.+10     	; 0x3650 <spi_xmega_set_baud_div+0x6e>
	}
	else if (divisor_8bit > 8) {
		ctrl = SPI_PRESCALER_DIV16_gc;
    3646:	91 e0       	ldi	r25, 0x01	; 1
    3648:	03 c0       	rjmp	.+6      	; 0x3650 <spi_xmega_set_baud_div+0x6e>
	}
	else if (divisor_8bit > 4) {
		ctrl = SPI_CLK2X_bm | SPI_PRESCALER_DIV16_gc;
    364a:	91 e8       	ldi	r25, 0x81	; 129
    364c:	01 c0       	rjmp	.+2      	; 0x3650 <spi_xmega_set_baud_div+0x6e>
	}
	else if (divisor_8bit > 2) {
		ctrl = SPI_PRESCALER_DIV4_gc;
	}
	else {
		ctrl = SPI_CLK2X_bm | SPI_PRESCALER_DIV4_gc;
    364e:	90 e8       	ldi	r25, 0x80	; 128
	}

	// Update register and make sure to clear out any leftover bits
	spi->CTRL = (spi->CTRL & ~(SPI_CLK2X_bm | SPI_PRESCALER_gm)) | ctrl;
    3650:	88 81       	ld	r24, Y
    3652:	8c 77       	andi	r24, 0x7C	; 124
    3654:	89 2b       	or	r24, r25
    3656:	88 83       	st	Y, r24

	return 1;
    3658:	81 e0       	ldi	r24, 0x01	; 1
    365a:	01 c0       	rjmp	.+2      	; 0x365e <spi_xmega_set_baud_div+0x7c>
	if (divisor > 128) {
		/*
		 * Highest possible divisor is 128 so fail since we can't get
		 * low enough baudrate.
		 */
		return -1;
    365c:	8f ef       	ldi	r24, 0xFF	; 255

	// Update register and make sure to clear out any leftover bits
	spi->CTRL = (spi->CTRL & ~(SPI_CLK2X_bm | SPI_PRESCALER_gm)) | ctrl;

	return 1;
}
    365e:	df 91       	pop	r29
    3660:	cf 91       	pop	r28
    3662:	1f 91       	pop	r17
    3664:	0f 91       	pop	r16
    3666:	ff 90       	pop	r15
    3668:	ef 90       	pop	r14
    366a:	df 90       	pop	r13
    366c:	cf 90       	pop	r12
    366e:	08 95       	ret

00003670 <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
    3670:	40 91 ca 01 	lds	r20, 0x01CA
	mov ZL, r22               ; Load byte index into low byte of Z.
    3674:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
    3676:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
    3678:	80 93 ca 01 	sts	0x01CA, r24
	lpm r24, Z                ; Perform an LPM to read out byte
    367c:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
    367e:	40 93 ca 01 	sts	0x01CA, r20
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
    3682:	08 95       	ret

00003684 <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    3684:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    3686:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    3688:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    368a:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    368c:	60 83       	st	Z, r22
	ret                             // Return to caller
    368e:	08 95       	ret

00003690 <board_init>:
    3690:	41 e0       	ldi	r20, 0x01	; 1
    3692:	50 e0       	ldi	r21, 0x00	; 0
    3694:	62 e0       	ldi	r22, 0x02	; 2
    3696:	80 e0       	ldi	r24, 0x00	; 0
    3698:	96 e0       	ldi	r25, 0x06	; 6
    369a:	cd de       	rcall	.-614    	; 0x3436 <ioport_configure_port_pin>
    369c:	41 e0       	ldi	r20, 0x01	; 1
    369e:	50 e0       	ldi	r21, 0x00	; 0
    36a0:	60 e2       	ldi	r22, 0x20	; 32
    36a2:	80 e6       	ldi	r24, 0x60	; 96
    36a4:	96 e0       	ldi	r25, 0x06	; 6
    36a6:	c7 de       	rcall	.-626    	; 0x3436 <ioport_configure_port_pin>
    36a8:	41 e0       	ldi	r20, 0x01	; 1
    36aa:	50 e0       	ldi	r21, 0x00	; 0
    36ac:	61 e0       	ldi	r22, 0x01	; 1
    36ae:	80 e4       	ldi	r24, 0x40	; 64
    36b0:	96 e0       	ldi	r25, 0x06	; 6
    36b2:	c1 de       	rcall	.-638    	; 0x3436 <ioport_configure_port_pin>
    36b4:	41 e0       	ldi	r20, 0x01	; 1
    36b6:	50 e0       	ldi	r21, 0x00	; 0
    36b8:	68 e0       	ldi	r22, 0x08	; 8
    36ba:	80 e4       	ldi	r24, 0x40	; 64
    36bc:	96 e0       	ldi	r25, 0x06	; 6
    36be:	bb de       	rcall	.-650    	; 0x3436 <ioport_configure_port_pin>
    36c0:	41 e0       	ldi	r20, 0x01	; 1
    36c2:	50 e0       	ldi	r21, 0x00	; 0
    36c4:	62 e0       	ldi	r22, 0x02	; 2
    36c6:	80 e4       	ldi	r24, 0x40	; 64
    36c8:	96 e0       	ldi	r25, 0x06	; 6
    36ca:	b5 de       	rcall	.-662    	; 0x3436 <ioport_configure_port_pin>
    36cc:	41 e0       	ldi	r20, 0x01	; 1
    36ce:	50 e0       	ldi	r21, 0x00	; 0
    36d0:	64 e0       	ldi	r22, 0x04	; 4
    36d2:	80 e4       	ldi	r24, 0x40	; 64
    36d4:	96 e0       	ldi	r25, 0x06	; 6
    36d6:	af de       	rcall	.-674    	; 0x3436 <ioport_configure_port_pin>
    36d8:	43 e0       	ldi	r20, 0x03	; 3
    36da:	50 e0       	ldi	r21, 0x00	; 0
    36dc:	60 e2       	ldi	r22, 0x20	; 32
    36de:	80 e4       	ldi	r24, 0x40	; 64
    36e0:	96 e0       	ldi	r25, 0x06	; 6
    36e2:	a9 de       	rcall	.-686    	; 0x3436 <ioport_configure_port_pin>
    36e4:	40 e0       	ldi	r20, 0x00	; 0
    36e6:	50 e0       	ldi	r21, 0x00	; 0
    36e8:	60 e4       	ldi	r22, 0x40	; 64
    36ea:	80 e4       	ldi	r24, 0x40	; 64
    36ec:	96 e0       	ldi	r25, 0x06	; 6
    36ee:	a3 de       	rcall	.-698    	; 0x3436 <ioport_configure_port_pin>
    36f0:	43 e0       	ldi	r20, 0x03	; 3
    36f2:	50 e0       	ldi	r21, 0x00	; 0
    36f4:	60 e8       	ldi	r22, 0x80	; 128
    36f6:	80 e4       	ldi	r24, 0x40	; 64
    36f8:	96 e0       	ldi	r25, 0x06	; 6
    36fa:	9d ce       	rjmp	.-710    	; 0x3436 <ioport_configure_port_pin>
    36fc:	08 95       	ret

000036fe <callback_cdc_enable>:
	udi_cdc_puts(buffer);
	//udi_cdc_puts("\t");
	//itoa(value, buffer, 2);
	//udi_cdc_puts(buffer);
	//udi_cdc_puts("\n\r");
}
    36fe:	81 e0       	ldi	r24, 0x01	; 1
    3700:	80 93 31 23 	sts	0x2331, r24
    3704:	08 95       	ret

00003706 <callback_cdc_disable>:
    3706:	10 92 31 23 	sts	0x2331, r1
    370a:	08 95       	ret

0000370c <main>:
	// Insert system clock initialization code here (sysclk_init()).

	// -------------------------------------------------------------------
	// USB
	
	sysclk_init();
    370c:	bc de       	rcall	.-648    	; 0x3486 <sysclk_init>
	
	irq_initialize_vectors();
    370e:	87 e0       	ldi	r24, 0x07	; 7
    3710:	e0 ea       	ldi	r30, 0xA0	; 160
    3712:	f0 e0       	ldi	r31, 0x00	; 0
    3714:	82 83       	std	Z+2, r24	; 0x02
	cpu_irq_enable();
    3716:	78 94       	sei
	// -------------------------------------------------------------------
	
	board_init();
    3718:	bb df       	rcall	.-138    	; 0x3690 <board_init>
	
	// -------------------------------------------------------------------
	// USB
	
	udc_start();
    371a:	0e 94 4d 04 	call	0x89a	; 0x89a <udc_start>
	// -------------------------------------------------------------------
		
	// -------------------------------------------------------------------
	// Motors
	
	motor_init(&motors[0], PWM_TCF0, PWM_CH_A, 4000, GPIO_F0, GPIO_A0);
    371e:	e1 2c       	mov	r14, r1
    3720:	08 e2       	ldi	r16, 0x28	; 40
    3722:	20 ea       	ldi	r18, 0xA0	; 160
    3724:	3f e0       	ldi	r19, 0x0F	; 15
    3726:	41 e0       	ldi	r20, 0x01	; 1
    3728:	66 e0       	ldi	r22, 0x06	; 6
    372a:	87 e5       	ldi	r24, 0x57	; 87
    372c:	93 e2       	ldi	r25, 0x23	; 35
    372e:	48 da       	rcall	.-2928   	; 0x2bc0 <motor_init>
	motor_init(&motors[1], PWM_TCF0, PWM_CH_B, 4000, GPIO_F1, GPIO_A1);
    3730:	ee 24       	eor	r14, r14
    3732:	e3 94       	inc	r14
    3734:	09 e2       	ldi	r16, 0x29	; 41
    3736:	20 ea       	ldi	r18, 0xA0	; 160
    3738:	3f e0       	ldi	r19, 0x0F	; 15
    373a:	42 e0       	ldi	r20, 0x02	; 2
    373c:	66 e0       	ldi	r22, 0x06	; 6
    373e:	83 e6       	ldi	r24, 0x63	; 99
    3740:	93 e2       	ldi	r25, 0x23	; 35
    3742:	3e da       	rcall	.-2948   	; 0x2bc0 <motor_init>
	motor_init(&motors[2], PWM_TCF0, PWM_CH_C, 4000, GPIO_F2, GPIO_A2);
    3744:	68 94       	set
    3746:	ee 24       	eor	r14, r14
    3748:	e1 f8       	bld	r14, 1
    374a:	0a e2       	ldi	r16, 0x2A	; 42
    374c:	20 ea       	ldi	r18, 0xA0	; 160
    374e:	3f e0       	ldi	r19, 0x0F	; 15
    3750:	43 e0       	ldi	r20, 0x03	; 3
    3752:	66 e0       	ldi	r22, 0x06	; 6
    3754:	8f e6       	ldi	r24, 0x6F	; 111
    3756:	93 e2       	ldi	r25, 0x23	; 35
    3758:	33 da       	rcall	.-2970   	; 0x2bc0 <motor_init>
	motor_init(&motors[3], PWM_TCF0, PWM_CH_D, 4000, GPIO_F3, GPIO_A3);
    375a:	0f 2e       	mov	r0, r31
    375c:	f3 e0       	ldi	r31, 0x03	; 3
    375e:	ef 2e       	mov	r14, r31
    3760:	f0 2d       	mov	r31, r0
    3762:	0b e2       	ldi	r16, 0x2B	; 43
    3764:	20 ea       	ldi	r18, 0xA0	; 160
    3766:	3f e0       	ldi	r19, 0x0F	; 15
    3768:	44 e0       	ldi	r20, 0x04	; 4
    376a:	66 e0       	ldi	r22, 0x06	; 6
    376c:	8b e7       	ldi	r24, 0x7B	; 123
    376e:	93 e2       	ldi	r25, 0x23	; 35
    3770:	27 da       	rcall	.-2994   	; 0x2bc0 <motor_init>
		
	motor_set(&motors[0], 5000, FORWARD);
    3772:	41 e0       	ldi	r20, 0x01	; 1
    3774:	68 e8       	ldi	r22, 0x88	; 136
    3776:	73 e1       	ldi	r23, 0x13	; 19
    3778:	87 e5       	ldi	r24, 0x57	; 87
    377a:	93 e2       	ldi	r25, 0x23	; 35
    377c:	82 da       	rcall	.-2812   	; 0x2c82 <motor_set>
	motor_set(&motors[1], 5000, FORWARD);
    377e:	41 e0       	ldi	r20, 0x01	; 1
    3780:	68 e8       	ldi	r22, 0x88	; 136
    3782:	73 e1       	ldi	r23, 0x13	; 19
    3784:	83 e6       	ldi	r24, 0x63	; 99
    3786:	93 e2       	ldi	r25, 0x23	; 35
    3788:	7c da       	rcall	.-2824   	; 0x2c82 <motor_set>
	motor_set(&motors[2], 5000, FORWARD);
    378a:	41 e0       	ldi	r20, 0x01	; 1
    378c:	68 e8       	ldi	r22, 0x88	; 136
    378e:	73 e1       	ldi	r23, 0x13	; 19
    3790:	8f e6       	ldi	r24, 0x6F	; 111
    3792:	93 e2       	ldi	r25, 0x23	; 35
    3794:	76 da       	rcall	.-2836   	; 0x2c82 <motor_set>
	motor_set(&motors[3], 5000, FORWARD);
    3796:	41 e0       	ldi	r20, 0x01	; 1
    3798:	68 e8       	ldi	r22, 0x88	; 136
    379a:	73 e1       	ldi	r23, 0x13	; 19
    379c:	8b e7       	ldi	r24, 0x7B	; 123
    379e:	93 e2       	ldi	r25, 0x23	; 35
    37a0:	70 da       	rcall	.-2848   	; 0x2c82 <motor_set>

	// Servos
	
	servo_init(&servos[0], PWM_TCD0, PWM_CH_A, 50, GPIO_D0);
    37a2:	08 e1       	ldi	r16, 0x18	; 24
    37a4:	22 e3       	ldi	r18, 0x32	; 50
    37a6:	30 e0       	ldi	r19, 0x00	; 0
    37a8:	41 e0       	ldi	r20, 0x01	; 1
    37aa:	62 e0       	ldi	r22, 0x02	; 2
    37ac:	83 e9       	ldi	r24, 0x93	; 147
    37ae:	93 e2       	ldi	r25, 0x23	; 35
    37b0:	bc da       	rcall	.-2696   	; 0x2d2a <servo_init>
	servo_init(&servos[1], PWM_TCD0, PWM_CH_B, 50, GPIO_D1);
    37b2:	09 e1       	ldi	r16, 0x19	; 25
    37b4:	22 e3       	ldi	r18, 0x32	; 50
    37b6:	30 e0       	ldi	r19, 0x00	; 0
    37b8:	42 e0       	ldi	r20, 0x02	; 2
    37ba:	62 e0       	ldi	r22, 0x02	; 2
    37bc:	80 ea       	ldi	r24, 0xA0	; 160
    37be:	93 e2       	ldi	r25, 0x23	; 35
    37c0:	b4 da       	rcall	.-2712   	; 0x2d2a <servo_init>
	servo_init(&servos[2], PWM_TCD0, PWM_CH_C, 50, GPIO_D2);
    37c2:	0a e1       	ldi	r16, 0x1A	; 26
    37c4:	22 e3       	ldi	r18, 0x32	; 50
    37c6:	30 e0       	ldi	r19, 0x00	; 0
    37c8:	43 e0       	ldi	r20, 0x03	; 3
    37ca:	62 e0       	ldi	r22, 0x02	; 2
    37cc:	8d ea       	ldi	r24, 0xAD	; 173
    37ce:	93 e2       	ldi	r25, 0x23	; 35
    37d0:	ac da       	rcall	.-2728   	; 0x2d2a <servo_init>
	servo_init(&servos[3], PWM_TCD0, PWM_CH_D, 50, GPIO_D3);
    37d2:	0b e1       	ldi	r16, 0x1B	; 27
    37d4:	22 e3       	ldi	r18, 0x32	; 50
    37d6:	30 e0       	ldi	r19, 0x00	; 0
    37d8:	44 e0       	ldi	r20, 0x04	; 4
    37da:	62 e0       	ldi	r22, 0x02	; 2
    37dc:	8a eb       	ldi	r24, 0xBA	; 186
    37de:	93 e2       	ldi	r25, 0x23	; 35
    37e0:	a4 da       	rcall	.-2744   	; 0x2d2a <servo_init>

	// -------------------------------------------------------------------
	
	// -------------------------------------------------------------------
	// RF24
	rf24_begin();
    37e2:	4d dd       	rcall	.-1382   	; 0x327e <rf24_begin>
	
	rf24_setPayloadSize(32);
    37e4:	80 e2       	ldi	r24, 0x20	; 32
    37e6:	26 dc       	rcall	.-1972   	; 0x3034 <rf24_setPayloadSize>
	rf24_setPALevel(RF24_PA_MAX);
    37e8:	83 e0       	ldi	r24, 0x03	; 3
    37ea:	f9 dc       	rcall	.-1550   	; 0x31de <rf24_setPALevel>
	dynamic_payloads_enabled=false;
    37ec:	10 92 43 23 	sts	0x2343, r1

__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	base->OUTTGL = arch_ioport_pin_to_mask(pin);
    37f0:	80 e2       	ldi	r24, 0x20	; 32
    37f2:	e0 e6       	ldi	r30, 0x60	; 96
    37f4:	f6 e0       	ldi	r31, 0x06	; 6
    37f6:	87 83       	std	Z+7, r24	; 0x07

	gpio_toggle_pin(LED_D5);
	rf24_setAddressWidth(5);
    37f8:	85 e0       	ldi	r24, 0x05	; 5
    37fa:	4e dc       	rcall	.-1892   	; 0x3098 <rf24_setAddressWidth>
	rf24_openReadingPipe(1,addresses[0]);
    37fc:	6c e7       	ldi	r22, 0x7C	; 124
    37fe:	70 e2       	ldi	r23, 0x20	; 32
    3800:	81 e0       	ldi	r24, 0x01	; 1
    3802:	57 dc       	rcall	.-1874   	; 0x30b2 <rf24_openReadingPipe>
	rf24_startListening();
    3804:	b2 dc       	rcall	.-1692   	; 0x316a <rf24_startListening>

//-----------------------------------------------------------------------------



int main (void) {
    3806:	0f 2e       	mov	r0, r31
    3808:	f0 ea       	ldi	r31, 0xA0	; 160
    380a:	cf 2e       	mov	r12, r31
    380c:	f0 2d       	mov	r31, r0
    380e:	0f 2e       	mov	r0, r31
    3810:	f6 e8       	ldi	r31, 0x86	; 134
    3812:	df 2e       	mov	r13, r31
    3814:	f0 2d       	mov	r31, r0
    3816:	ee 24       	eor	r14, r14
    3818:	e3 94       	inc	r14
    381a:	f1 2c       	mov	r15, r1
    381c:	00 e6       	ldi	r16, 0x60	; 96
    381e:	16 e0       	ldi	r17, 0x06	; 6
    3820:	68 94       	set
    3822:	bb 24       	eor	r11, r11
    3824:	b5 f8       	bld	r11, 5
    3826:	8c 2d       	mov	r24, r12
    3828:	9d 2d       	mov	r25, r13
    382a:	ae 2d       	mov	r26, r14
    382c:	bf 2d       	mov	r27, r15
    382e:	01 97       	sbiw	r24, 0x01	; 1
    3830:	a1 09       	sbc	r26, r1
    3832:	b1 09       	sbc	r27, r1
    3834:	00 97       	sbiw	r24, 0x00	; 0
    3836:	a1 05       	cpc	r26, r1
    3838:	b1 05       	cpc	r27, r1
    383a:	c9 f7       	brne	.-14     	; 0x382e <main+0x122>
	
	while (1) {
		// data comes from remote control about every 100ms
		delay_ms(25);
		
		if ( rf24_available(NULL) ) {
    383c:	80 e0       	ldi	r24, 0x00	; 0
    383e:	90 e0       	ldi	r25, 0x00	; 0
    3840:	11 dc       	rcall	.-2014   	; 0x3064 <rf24_available>
    3842:	88 23       	and	r24, r24
    3844:	f1 f0       	breq	.+60     	; 0x3882 <main+0x176>
    3846:	f8 01       	movw	r30, r16
    3848:	b7 82       	std	Z+7, r11	; 0x07
			gpio_toggle_pin(LED_D5);
			
			// Fetch the data payload
			rf24_read( joystick, 12 ); //the size is the number of BYTES (uint8_t) regardless of the size of values in the buffer
    384a:	6c e0       	ldi	r22, 0x0C	; 12
    384c:	87 e8       	ldi	r24, 0x87	; 135
    384e:	93 e2       	ldi	r25, 0x23	; 35
    3850:	1e dc       	rcall	.-1988   	; 0x308e <rf24_read>
    3852:	17 c0       	rjmp	.+46     	; 0x3882 <main+0x176>
			*/
		}
		
	
		for (uint16_t angle_loop = 0; angle_loop < 18000; angle_loop=angle_loop + 500) {
			servo_set(&servos[0], angle_loop);
    3854:	be 01       	movw	r22, r28
    3856:	83 e9       	ldi	r24, 0x93	; 147
    3858:	93 e2       	ldi	r25, 0x23	; 35
    385a:	9d da       	rcall	.-2758   	; 0x2d96 <servo_set>
			servo_set(&servos[1], angle_loop);
    385c:	be 01       	movw	r22, r28
    385e:	80 ea       	ldi	r24, 0xA0	; 160
    3860:	93 e2       	ldi	r25, 0x23	; 35
    3862:	99 da       	rcall	.-2766   	; 0x2d96 <servo_set>
			servo_set(&servos[2], angle_loop);
    3864:	be 01       	movw	r22, r28
    3866:	8d ea       	ldi	r24, 0xAD	; 173
    3868:	93 e2       	ldi	r25, 0x23	; 35
    386a:	95 da       	rcall	.-2774   	; 0x2d96 <servo_set>
			servo_set(&servos[3], angle_loop);
    386c:	be 01       	movw	r22, r28
    386e:	8a eb       	ldi	r24, 0xBA	; 186
    3870:	93 e2       	ldi	r25, 0x23	; 35
    3872:	91 da       	rcall	.-2782   	; 0x2d96 <servo_set>
			udi_cdc_puts("\r\n");
			*/
		}
		
	
		for (uint16_t angle_loop = 0; angle_loop < 18000; angle_loop=angle_loop + 500) {
    3874:	cc 50       	subi	r28, 0x0C	; 12
    3876:	de 4f       	sbci	r29, 0xFE	; 254
    3878:	c0 35       	cpi	r28, 0x50	; 80
    387a:	f6 e4       	ldi	r31, 0x46	; 70
    387c:	df 07       	cpc	r29, r31
    387e:	51 f7       	brne	.-44     	; 0x3854 <main+0x148>
    3880:	d2 cf       	rjmp	.-92     	; 0x3826 <main+0x11a>

//-----------------------------------------------------------------------------



int main (void) {
    3882:	c0 e0       	ldi	r28, 0x00	; 0
    3884:	d0 e0       	ldi	r29, 0x00	; 0
    3886:	e6 cf       	rjmp	.-52     	; 0x3854 <main+0x148>

00003888 <__fixunssfsi>:
    3888:	70 d0       	rcall	.+224    	; 0x396a <__fp_splitA>
    388a:	88 f0       	brcs	.+34     	; 0x38ae <__fixunssfsi+0x26>
    388c:	9f 57       	subi	r25, 0x7F	; 127
    388e:	90 f0       	brcs	.+36     	; 0x38b4 <__fixunssfsi+0x2c>
    3890:	b9 2f       	mov	r27, r25
    3892:	99 27       	eor	r25, r25
    3894:	b7 51       	subi	r27, 0x17	; 23
    3896:	a0 f0       	brcs	.+40     	; 0x38c0 <__fixunssfsi+0x38>
    3898:	d1 f0       	breq	.+52     	; 0x38ce <__fixunssfsi+0x46>
    389a:	66 0f       	add	r22, r22
    389c:	77 1f       	adc	r23, r23
    389e:	88 1f       	adc	r24, r24
    38a0:	99 1f       	adc	r25, r25
    38a2:	1a f0       	brmi	.+6      	; 0x38aa <__fixunssfsi+0x22>
    38a4:	ba 95       	dec	r27
    38a6:	c9 f7       	brne	.-14     	; 0x389a <__fixunssfsi+0x12>
    38a8:	12 c0       	rjmp	.+36     	; 0x38ce <__fixunssfsi+0x46>
    38aa:	b1 30       	cpi	r27, 0x01	; 1
    38ac:	81 f0       	breq	.+32     	; 0x38ce <__fixunssfsi+0x46>
    38ae:	77 d0       	rcall	.+238    	; 0x399e <__fp_zero>
    38b0:	b1 e0       	ldi	r27, 0x01	; 1
    38b2:	08 95       	ret
    38b4:	74 c0       	rjmp	.+232    	; 0x399e <__fp_zero>
    38b6:	67 2f       	mov	r22, r23
    38b8:	78 2f       	mov	r23, r24
    38ba:	88 27       	eor	r24, r24
    38bc:	b8 5f       	subi	r27, 0xF8	; 248
    38be:	39 f0       	breq	.+14     	; 0x38ce <__fixunssfsi+0x46>
    38c0:	b9 3f       	cpi	r27, 0xF9	; 249
    38c2:	cc f3       	brlt	.-14     	; 0x38b6 <__fixunssfsi+0x2e>
    38c4:	86 95       	lsr	r24
    38c6:	77 95       	ror	r23
    38c8:	67 95       	ror	r22
    38ca:	b3 95       	inc	r27
    38cc:	d9 f7       	brne	.-10     	; 0x38c4 <__fixunssfsi+0x3c>
    38ce:	3e f4       	brtc	.+14     	; 0x38de <__fixunssfsi+0x56>
    38d0:	90 95       	com	r25
    38d2:	80 95       	com	r24
    38d4:	70 95       	com	r23
    38d6:	61 95       	neg	r22
    38d8:	7f 4f       	sbci	r23, 0xFF	; 255
    38da:	8f 4f       	sbci	r24, 0xFF	; 255
    38dc:	9f 4f       	sbci	r25, 0xFF	; 255
    38de:	08 95       	ret

000038e0 <__floatunsisf>:
    38e0:	e8 94       	clt
    38e2:	09 c0       	rjmp	.+18     	; 0x38f6 <__floatsisf+0x12>

000038e4 <__floatsisf>:
    38e4:	97 fb       	bst	r25, 7
    38e6:	3e f4       	brtc	.+14     	; 0x38f6 <__floatsisf+0x12>
    38e8:	90 95       	com	r25
    38ea:	80 95       	com	r24
    38ec:	70 95       	com	r23
    38ee:	61 95       	neg	r22
    38f0:	7f 4f       	sbci	r23, 0xFF	; 255
    38f2:	8f 4f       	sbci	r24, 0xFF	; 255
    38f4:	9f 4f       	sbci	r25, 0xFF	; 255
    38f6:	99 23       	and	r25, r25
    38f8:	a9 f0       	breq	.+42     	; 0x3924 <__floatsisf+0x40>
    38fa:	f9 2f       	mov	r31, r25
    38fc:	96 e9       	ldi	r25, 0x96	; 150
    38fe:	bb 27       	eor	r27, r27
    3900:	93 95       	inc	r25
    3902:	f6 95       	lsr	r31
    3904:	87 95       	ror	r24
    3906:	77 95       	ror	r23
    3908:	67 95       	ror	r22
    390a:	b7 95       	ror	r27
    390c:	f1 11       	cpse	r31, r1
    390e:	f8 cf       	rjmp	.-16     	; 0x3900 <__floatsisf+0x1c>
    3910:	fa f4       	brpl	.+62     	; 0x3950 <__floatsisf+0x6c>
    3912:	bb 0f       	add	r27, r27
    3914:	11 f4       	brne	.+4      	; 0x391a <__floatsisf+0x36>
    3916:	60 ff       	sbrs	r22, 0
    3918:	1b c0       	rjmp	.+54     	; 0x3950 <__floatsisf+0x6c>
    391a:	6f 5f       	subi	r22, 0xFF	; 255
    391c:	7f 4f       	sbci	r23, 0xFF	; 255
    391e:	8f 4f       	sbci	r24, 0xFF	; 255
    3920:	9f 4f       	sbci	r25, 0xFF	; 255
    3922:	16 c0       	rjmp	.+44     	; 0x3950 <__floatsisf+0x6c>
    3924:	88 23       	and	r24, r24
    3926:	11 f0       	breq	.+4      	; 0x392c <__floatsisf+0x48>
    3928:	96 e9       	ldi	r25, 0x96	; 150
    392a:	11 c0       	rjmp	.+34     	; 0x394e <__floatsisf+0x6a>
    392c:	77 23       	and	r23, r23
    392e:	21 f0       	breq	.+8      	; 0x3938 <__floatsisf+0x54>
    3930:	9e e8       	ldi	r25, 0x8E	; 142
    3932:	87 2f       	mov	r24, r23
    3934:	76 2f       	mov	r23, r22
    3936:	05 c0       	rjmp	.+10     	; 0x3942 <__floatsisf+0x5e>
    3938:	66 23       	and	r22, r22
    393a:	71 f0       	breq	.+28     	; 0x3958 <__floatsisf+0x74>
    393c:	96 e8       	ldi	r25, 0x86	; 134
    393e:	86 2f       	mov	r24, r22
    3940:	70 e0       	ldi	r23, 0x00	; 0
    3942:	60 e0       	ldi	r22, 0x00	; 0
    3944:	2a f0       	brmi	.+10     	; 0x3950 <__floatsisf+0x6c>
    3946:	9a 95       	dec	r25
    3948:	66 0f       	add	r22, r22
    394a:	77 1f       	adc	r23, r23
    394c:	88 1f       	adc	r24, r24
    394e:	da f7       	brpl	.-10     	; 0x3946 <__floatsisf+0x62>
    3950:	88 0f       	add	r24, r24
    3952:	96 95       	lsr	r25
    3954:	87 95       	ror	r24
    3956:	97 f9       	bld	r25, 7
    3958:	08 95       	ret

0000395a <__fp_split3>:
    395a:	57 fd       	sbrc	r21, 7
    395c:	90 58       	subi	r25, 0x80	; 128
    395e:	44 0f       	add	r20, r20
    3960:	55 1f       	adc	r21, r21
    3962:	59 f0       	breq	.+22     	; 0x397a <__fp_splitA+0x10>
    3964:	5f 3f       	cpi	r21, 0xFF	; 255
    3966:	71 f0       	breq	.+28     	; 0x3984 <__fp_splitA+0x1a>
    3968:	47 95       	ror	r20

0000396a <__fp_splitA>:
    396a:	88 0f       	add	r24, r24
    396c:	97 fb       	bst	r25, 7
    396e:	99 1f       	adc	r25, r25
    3970:	61 f0       	breq	.+24     	; 0x398a <__fp_splitA+0x20>
    3972:	9f 3f       	cpi	r25, 0xFF	; 255
    3974:	79 f0       	breq	.+30     	; 0x3994 <__fp_splitA+0x2a>
    3976:	87 95       	ror	r24
    3978:	08 95       	ret
    397a:	12 16       	cp	r1, r18
    397c:	13 06       	cpc	r1, r19
    397e:	14 06       	cpc	r1, r20
    3980:	55 1f       	adc	r21, r21
    3982:	f2 cf       	rjmp	.-28     	; 0x3968 <__fp_split3+0xe>
    3984:	46 95       	lsr	r20
    3986:	f1 df       	rcall	.-30     	; 0x396a <__fp_splitA>
    3988:	08 c0       	rjmp	.+16     	; 0x399a <__fp_splitA+0x30>
    398a:	16 16       	cp	r1, r22
    398c:	17 06       	cpc	r1, r23
    398e:	18 06       	cpc	r1, r24
    3990:	99 1f       	adc	r25, r25
    3992:	f1 cf       	rjmp	.-30     	; 0x3976 <__fp_splitA+0xc>
    3994:	86 95       	lsr	r24
    3996:	71 05       	cpc	r23, r1
    3998:	61 05       	cpc	r22, r1
    399a:	08 94       	sec
    399c:	08 95       	ret

0000399e <__fp_zero>:
    399e:	e8 94       	clt

000039a0 <__fp_szero>:
    39a0:	bb 27       	eor	r27, r27
    39a2:	66 27       	eor	r22, r22
    39a4:	77 27       	eor	r23, r23
    39a6:	cb 01       	movw	r24, r22
    39a8:	97 f9       	bld	r25, 7
    39aa:	08 95       	ret

000039ac <__udivmodhi4>:
    39ac:	aa 1b       	sub	r26, r26
    39ae:	bb 1b       	sub	r27, r27
    39b0:	51 e1       	ldi	r21, 0x11	; 17
    39b2:	07 c0       	rjmp	.+14     	; 0x39c2 <__udivmodhi4_ep>

000039b4 <__udivmodhi4_loop>:
    39b4:	aa 1f       	adc	r26, r26
    39b6:	bb 1f       	adc	r27, r27
    39b8:	a6 17       	cp	r26, r22
    39ba:	b7 07       	cpc	r27, r23
    39bc:	10 f0       	brcs	.+4      	; 0x39c2 <__udivmodhi4_ep>
    39be:	a6 1b       	sub	r26, r22
    39c0:	b7 0b       	sbc	r27, r23

000039c2 <__udivmodhi4_ep>:
    39c2:	88 1f       	adc	r24, r24
    39c4:	99 1f       	adc	r25, r25
    39c6:	5a 95       	dec	r21
    39c8:	a9 f7       	brne	.-22     	; 0x39b4 <__udivmodhi4_loop>
    39ca:	80 95       	com	r24
    39cc:	90 95       	com	r25
    39ce:	bc 01       	movw	r22, r24
    39d0:	cd 01       	movw	r24, r26
    39d2:	08 95       	ret

000039d4 <__udivmodsi4>:
    39d4:	a1 e2       	ldi	r26, 0x21	; 33
    39d6:	1a 2e       	mov	r1, r26
    39d8:	aa 1b       	sub	r26, r26
    39da:	bb 1b       	sub	r27, r27
    39dc:	fd 01       	movw	r30, r26
    39de:	0d c0       	rjmp	.+26     	; 0x39fa <__udivmodsi4_ep>

000039e0 <__udivmodsi4_loop>:
    39e0:	aa 1f       	adc	r26, r26
    39e2:	bb 1f       	adc	r27, r27
    39e4:	ee 1f       	adc	r30, r30
    39e6:	ff 1f       	adc	r31, r31
    39e8:	a2 17       	cp	r26, r18
    39ea:	b3 07       	cpc	r27, r19
    39ec:	e4 07       	cpc	r30, r20
    39ee:	f5 07       	cpc	r31, r21
    39f0:	20 f0       	brcs	.+8      	; 0x39fa <__udivmodsi4_ep>
    39f2:	a2 1b       	sub	r26, r18
    39f4:	b3 0b       	sbc	r27, r19
    39f6:	e4 0b       	sbc	r30, r20
    39f8:	f5 0b       	sbc	r31, r21

000039fa <__udivmodsi4_ep>:
    39fa:	66 1f       	adc	r22, r22
    39fc:	77 1f       	adc	r23, r23
    39fe:	88 1f       	adc	r24, r24
    3a00:	99 1f       	adc	r25, r25
    3a02:	1a 94       	dec	r1
    3a04:	69 f7       	brne	.-38     	; 0x39e0 <__udivmodsi4_loop>
    3a06:	60 95       	com	r22
    3a08:	70 95       	com	r23
    3a0a:	80 95       	com	r24
    3a0c:	90 95       	com	r25
    3a0e:	9b 01       	movw	r18, r22
    3a10:	ac 01       	movw	r20, r24
    3a12:	bd 01       	movw	r22, r26
    3a14:	cf 01       	movw	r24, r30
    3a16:	08 95       	ret

00003a18 <__tablejump2__>:
    3a18:	ee 0f       	add	r30, r30
    3a1a:	ff 1f       	adc	r31, r31

00003a1c <__tablejump__>:
    3a1c:	05 90       	lpm	r0, Z+
    3a1e:	f4 91       	lpm	r31, Z
    3a20:	e0 2d       	mov	r30, r0
    3a22:	19 94       	eijmp

00003a24 <__umulhisi3>:
    3a24:	a2 9f       	mul	r26, r18
    3a26:	b0 01       	movw	r22, r0
    3a28:	b3 9f       	mul	r27, r19
    3a2a:	c0 01       	movw	r24, r0
    3a2c:	a3 9f       	mul	r26, r19
    3a2e:	70 0d       	add	r23, r0
    3a30:	81 1d       	adc	r24, r1
    3a32:	11 24       	eor	r1, r1
    3a34:	91 1d       	adc	r25, r1
    3a36:	b2 9f       	mul	r27, r18
    3a38:	70 0d       	add	r23, r0
    3a3a:	81 1d       	adc	r24, r1
    3a3c:	11 24       	eor	r1, r1
    3a3e:	91 1d       	adc	r25, r1
    3a40:	08 95       	ret

00003a42 <memcpy>:
    3a42:	fb 01       	movw	r30, r22
    3a44:	dc 01       	movw	r26, r24
    3a46:	02 c0       	rjmp	.+4      	; 0x3a4c <memcpy+0xa>
    3a48:	01 90       	ld	r0, Z+
    3a4a:	0d 92       	st	X+, r0
    3a4c:	41 50       	subi	r20, 0x01	; 1
    3a4e:	50 40       	sbci	r21, 0x00	; 0
    3a50:	d8 f7       	brcc	.-10     	; 0x3a48 <memcpy+0x6>
    3a52:	08 95       	ret

00003a54 <_exit>:
    3a54:	f8 94       	cli

00003a56 <__stop_program>:
    3a56:	ff cf       	rjmp	.-2      	; 0x3a56 <__stop_program>
